package com.theginbin.video {		import com.theginbin.events.MediaEvent;		import flash.display.Sprite;	import flash.display.Stage;	import flash.display.StageAlign;	import flash.display.StageDisplayState;	import flash.display.StageScaleMode;	import flash.events.FullScreenEvent;	import flash.events.NetStatusEvent;	import flash.events.TimerEvent;	import flash.geom.Rectangle;	import flash.media.SoundTransform;	import flash.media.Video;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.utils.Timer;	// =================================================	// ================ @Class	// =================================================	public class SimpleVideoDisplay extends Sprite {				private const PLAYHEAD_UPDATE_INTERVAL_MS:uint = 10;				private var _meta:Object = new Object(); //A copy of the current video's metadata object.		private var _client:Object = new Object();		private var _nc:NetConnection;		private var _ns:NetStream;		private var _timer:Timer;		private var _video:Video;		private var _videoStage:Stage;				private var _soundTransform:SoundTransform;		public var playing:Boolean = false;				private var _isNewVideo:Boolean = false;		private var _fsMode:Boolean = false;				private var _videoWidth:Number = 0;		private var _videoHeight:Number = 0;		private var _actualWidth:Number;		private var _actualHeight:Number;				// =================================================		// ================ @Constructor		// =================================================		public function SimpleVideoDisplay() {			init();		}				// =================================================		// ================ @Callable		// =================================================				public function play():void {			this.playing = true;			_ns.resume();			_timer.start();		}		public function pause():void {			playing = false;			_ns.togglePause();			//_timer.stop();		}		public function stop():void {			playing = false;			_ns.pause();			_ns.seek(0);			_timer.stop();					}				public function killVideo():void {			playing = false;			if (_ns != null) {				_ns.seek(0);				_ns.close();			}			trace("********* CLOSE NETSTREAM *********");					}				public function mute(doMute:Boolean):void {			if(doMute){				setVolume(0);			} else {				setVolume(1);			}		}				public function setVolume(volume:Number):void {			_soundTransform.volume = volume;			_ns.soundTransform = _soundTransform;					}				public function setVideoSize( w:Number, h:Number ):void {			//trace("setting video size in simple video display to ", w, h);			_videoWidth = w;			_videoHeight = h;			_video.height = _videoHeight;			_video.width = _videoWidth;		}				public function seekToPercent( percent:Number ):void {			////trace( percent + " " +  duration + " " + (percent * duration) );			seek( percent * duration );		}				public function seek( seekTo:Number ):void {			_ns.seek( seekTo );		}				public function setBuffer(time:Number):void {			_ns.bufferTime = time;			trace("-------SETTING BUFFER TIME TO = "+time);		}				public function setFSMode():void {			_videoStage = _video.stage;			_videoStage.scaleMode = StageScaleMode.NO_SCALE;			_videoStage.align = StageAlign.TOP_LEFT;			_videoStage.addEventListener(FullScreenEvent.FULL_SCREEN, resizeDisplay);		}				public function setFullScreen():void 		{			_fsMode = true;			//_videoStage.fullScreenSourceRect = new Rectangle(0, 0, 1400, 1200); //hardware accelerated video view, add padding vars			_videoStage.displayState = StageDisplayState.FULL_SCREEN;		}				public function exitFullScreen():void 		{			//_videoStage.fullScreenSourceRect = null;			if (_fsMode) {				_fsMode = false;				_videoStage.displayState = StageDisplayState.NORMAL;			}		}				public function resizeDisplay(event:FullScreenEvent):void //set this up for special ratio to be dynamic		{			if (event.fullScreen) {					_video.smoothing = false;						_video.height = stage.stageHeight;//-180;				_video.scaleX = _video.scaleY;								//_video.width = stage.stageWidth;//-180;				//_video.scaleY = _video.scaleX;				//				_video.x = (stage.stageWidth - _video.width)/2;				//_video.y = (stage.stageWidth - _video.height)/2;												this.dispatchEvent(new MediaEvent(MediaEvent.FULL_SCREEN)); //tell player to resize controls			} else {				_video.x = 0;				//_video.y = 0;				_video.height = _videoHeight;				_video.width = _videoWidth;								this.dispatchEvent(new MediaEvent(MediaEvent.NORMAL_SCREEN));//dispatch to controls to change fs graphic					}					}				public function addEvents():void {			if (_timer != null) {				_timer.addEventListener(TimerEvent.TIMER, handleTimer );			}			if (_ns != null) {				_ns.addEventListener( NetStatusEvent.NET_STATUS, handleNetStatus );			}		}				public function removeEvents():void {			if (_timer != null) {				_timer.stop();				_timer.removeEventListener(TimerEvent.TIMER, handleTimer );			}			if (_videoStage != null) {				_videoStage.removeEventListener(FullScreenEvent.FULL_SCREEN, resizeDisplay);			}			if (_ns != null) {				_ns.removeEventListener( NetStatusEvent.NET_STATUS, handleNetStatus );			}		}				// =================================================		// ================ @Workers		// =================================================		private function init():void {			_soundTransform = new SoundTransform();						_client = new Object();			_client.onMetaData = handleMetaData;						_nc = new NetConnection();			_nc.connect(null);						_ns = new NetStream( _nc );			//_ns.bufferTime = 5;					_ns.client = _client;						_video = new Video();			_video.attachNetStream( _ns );			_video.visible = false;			_video.alpha = 0;						_timer = new Timer(10);						addChild( _video );		}				private function updateURL(videoURL:String):void {					trace("++++++++++++++++++++++++ PLAY VIDEO: " + videoURL );			_ns.play( videoURL );			//dispatchEvent( new MediaEvent(MediaEvent.START ) );						playing = true;		}			// =================================================		// ================ @Handlers		// =================================================				private function handleTimer(event:TimerEvent):void {  ///EVENT FOR PROGRESS/LOADING/SCRUBBER			dispatchEvent( new MediaEvent( MediaEvent.PROGRESS, this.position, this.duration, _ns.bytesLoaded/_ns.bytesTotal ) );			////trace("PROGRESS: " + this.position + " " + this.duration );			//if( this.position >= this.duration && playing){			//dispatchEvent( new MediaEvent( MediaEvent.COMPLETE ) );			//playing = false;			//}		}				private function handleMetaData( obj:Object ):void {			_meta = obj;			_actualHeight = _meta.height;			_actualWidth = _meta.width;						if (_videoWidth == 0) { //a resize was never called, set to actual dimensions			//	trace("setting to meta info dimensions");				_video.height = _actualHeight;				_video.width = _actualWidth;			} else {				//trace("setting to dynamic dimensions, _videoWidth = "+_videoWidth, _videoHeight);								_video.height = _videoHeight; //set dynamically				_video.width = _videoWidth;			}						_video.alpha = 1;			_video.visible = true;			//trace("VIDEO W: " + _video.width + "  H: " + _video.height, "META = "+ _meta.width, _meta.height);			//if (obj.duration > 0) _duration = obj.duration;			dispatchEvent(new MediaEvent( MediaEvent.METADATA ));					}				private function handleNetStatus( event:NetStatusEvent ):void {			try {				//trace("SimpleVideoDiplay::handleNetStatus() - event.info.code >> " + event.info.code );				switch (event.info.code) {					case "NetStream.Play.Start" :						dispatchEvent(new MediaEvent(MediaEvent.START));						_timer.start();						playing = true;						break;					case "NetStream.Play.StreamNotFound" :						trace("stream not found");						break;					case "NetStream.Play.Stop" :						_timer.stop();						playing = false;						dispatchEvent( new MediaEvent( MediaEvent.COMPLETE ) );						break;										case "NetStream.Buffer.Full":						if( _isNewVideo ){							_isNewVideo = false;						}						dispatchEvent( new MediaEvent( MediaEvent.BUFFER_FULL ) );						break;										case "NetStream.Buffer.Empty":						dispatchEvent( new MediaEvent( MediaEvent.BUFFERING ) );						break;				}			} catch (error:TypeError) {				// Ignore any errors.			}		}					// =================================================		// ================ @Getters / Setters		// =================================================		public function set url( videoURL:String ):void {			//trace("SimpleVideoDisplay::url( " + videoURL + " )" );					_isNewVideo = true;			updateURL(videoURL);				}				public function get position():Number {			return _ns.time;		}		public function get duration():Number {			return _meta.duration;		}					public function get actualWidth():Number {			return _actualWidth;		}		public function get actualHeight():Number {			return _actualHeight;		}	}}