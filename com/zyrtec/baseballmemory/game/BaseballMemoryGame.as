package com.zyrtec.baseballmemory.game{	import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.baseballmemory.controller.BaseballMemoryMain;	import com.zyrtec.baseballmemory.events.BaseballMemoryEvent;	import com.zyrtec.baseballmemory.model.BMModel;	import com.zyrtec.baseballmemory.model.SoundData;	import com.zyrtec.baseballmemory.view.tiles.Tile;	import com.zyrtec.baseballmemory.view.tiles.TileHolder;		import flash.display.*;	import flash.events.*;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;
	// =================================================	// ================ @Class	// =================================================		public class BaseballMemoryGame extends Game	{		//display objs		private var _stageRef:Stage;		private var _clock:MovieClip;		private var _bonusPopup:MovieClip;		private var _plusOnePopup:MovieClip;				//bools		private var _isGameOver:Boolean = false;			//whether the game is over		private var _passedLevel:Boolean = false;			//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;				//whether timer has started running				//values for game			private var _gameWidth:int;		private var _gameHeight:int;		private var _gameLevel:int = 1;		private var _score:String="";						// score aka Time		private var _levelScore:int;						//store level score		private var _levelScoresArray:Array;				//store all level scores				//game specific vars		private var _totalTiles:uint;						//total number of tiles		private var _tileHolder:TileHolder;					//hold and control tile children		private var _numMatches=0;							//number of matched pairs		private var _currentTileNum:uint;					//currently selected tile id		private var _currentTileSelected:Tile;				//currently selected tile		private var _pairsRemaining:uint = _totalTiles/2;	//number of pairs left to match		private var _clockTimer:BasicFrameTimer;			//scoreboard timer		private var _bonusFlipsNum:uint;					//store number of bonus flips		private var _totalBonusFlips:int;					//store max bonuses		private var _gameTime:String;						//running game play time		private var _lastMatchTimestamp:Number;				// timestamp in milliseconds of previous match @see checkPlayerSkills		private var _btnSkipToEnd:BtnSkipToEnd;				// BtnSkipToEnd			private var	_model:BMModel;							// Game Model (Singleton)		// =================================================		// ================ @Constructor		// =================================================		public function BaseballMemoryGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);			_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = BMModel.getInstance();			_stageRef = _model.stageRef;		}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 			_model.score=0;			_totalTiles = BMModel.TOTAL_TILES;        	_levelScore = 0;        	_gameLevel = 1;        	_isGameOver = false;			_isStarted = false;						_bonusFlipsNum = 0;			_numMatches=0;			_totalBonusFlips=_model.numBonuses;			trace("total bonus flips = "+_totalBonusFlips);			_pairsRemaining = (_totalTiles/2); //don't seem to be using this anymore						if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(31, 0, 3540000, true); //3,540,000 = 59 minutes, was at 360000000			} else {				_clockTimer.reset();			}						_model.matchTimeStampsArray.splice(0); //clear timestamps						if (_tileHolder == null) {				_tileHolder = new TileHolder(6, 8, _totalTiles);				_tileHolder.x = 178;				_tileHolder.y = -40;				_tileHolder.visible = false;				addChild(_tileHolder);			}			_tileHolder.createTiles();          				//update the scoreboard			updateScoreBoardPairs();			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, BaseballMemoryMain.TIME, "00:00:00" ) );        				//start game soundtrack        	//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_AMBIENT,true,1000,0,0.4));			_lastMatchTimestamp=0;		      	} 		//FUNCTION : NEW LEVEL - CALLED AFTER NEW GAME AND BEFORE START OF NEW LEVEL      	override public function newLevel():void		{ 			//animate tiles here         	//	dispatchEvent(new LevelScreenUpdateEvent(LevelScreenUpdateEvent.UPDATE_TEXT,String(_gameLevel))); //if graphically showing level      	} 		//FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER      	override public function runGame():void		{ // on game tick function                	// call custom functions here			if (_numMatches == (_totalTiles/2)) {				_isGameOver = true;			}			checkforEndGame();			_clockTimer.updateByMilliseconds();			updateScoreBoardClock();      	}		//FUNCTION : RESUME GAME     	override public function resumeGame():void		{			addEvents();			_clockTimer.stopPauseTime();     	}     			//FUNCTION : DESTROY LISTENERS     	override public function destroy():void		{			trace("!!!!!!!! DESTROYING BASEBALL MEMORY GAME !!!!!!!!!!!");			if (_tileHolder != null) {				_tileHolder.removeEvents();				_tileHolder.clearTheBoard(); //removes all tile listeners and kills the array				_tileHolder.removeEventListener(BaseballMemoryEvent.TILE_CLICK, onTileClicked);				_tileHolder.removeEventListener(AnimationEvent.COMPLETE, onTilesAnimatedIn);				_tileHolder.addEventListener(BaseballMemoryEvent.BONUS_FLIPS_COMPLETE, onBonusTileFlipped);			}						if (_clockTimer!=null) {				_clockTimer.removeEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp);				_clockTimer.stop();			}						_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);     	}		// ===============================================================================		// ================ @ CUSTOM GAME FUNCTIONS		// ===============================================================================				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			_tileHolder.visible = true;			_tileHolder.addEventListener(AnimationEvent.COMPLETE, onTilesAnimatedIn);			_tileHolder.animateIn();		}				//FUNCTION : ADD EVENTS		public function addEvents():void		{			debug(_model.isDebugMode);			_tileHolder.addEventListener(BaseballMemoryEvent.TILE_CLICK, onTileClicked);			_tileHolder.addEvents();						if (!_isStarted) {				_isStarted = true;				//_clockTimer.addEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp, false, 0, true);				_clockTimer.start();			}						//_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			_tileHolder.removeEvents();			_tileHolder.removeEventListener(BaseballMemoryEvent.TILE_CLICK, onTileClicked);		}				//FUNCTION : RESET GAME		public function reset():void		{			if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(31, 0, 3540000, true); //if need time limit in milliseconds, set here			} else {				_clockTimer.reset();				updateScoreBoardClock();			}			//_numMatches=_bonusFlipsNum=_totalBonusFlips=_model.numBonuses;			_pairsRemaining = (_totalTiles/2);			updateScoreBoardPairs();		}				// =================================================		// ================ @Workers		// =================================================				//FUNCTION : CHECK FOR PAIRS		private function checkForPair(currId:uint):Boolean		{ 			var isMatch:Boolean = false;			if (_currentTileNum <= (_totalTiles/2)) { //first half of tiles				if (_currentTileNum == currId-(_totalTiles/2)) {					isMatch = true;				}			} else { //	second half of tiles				if (_currentTileNum == currId+(_totalTiles/2)) {					isMatch = true;				}			}			return isMatch;		}		//FUNCTION : CHECK PLAYER SKILLS --- ARE WE USING THIS?		/**		 * description: Every time a player gets a match, check the time since the last match.		 * 				If less than [x] number of seconds, show encouragement.		 * 		 * param @t:Number time in milliseconds of most recent match		 */		private function checkPlayerSkills(t:Number):void		{ 			var newMatchTimestamp:Number=t;			if (_lastMatchTimestamp==0) {				_lastMatchTimestamp=newMatchTimestamp;						} else {				if (newMatchTimestamp - _lastMatchTimestamp <= 3) {					trace("Good Job! You got a match in less than 3 seconds!!!");				}				_lastMatchTimestamp=newMatchTimestamp;			}		}		//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 			if (_isGameOver) {					this.dispatchEvent(new Event(GAME_OVER));								_model.score = _clockTimer.milliseconds;				updateScoreBoardClock(); //ensure model has correct display score								_clockTimer.removeEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp);				_clockTimer.stop();								_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);								if (_bonusPopup!=null) {					_bonusPopup.gotoAndStop(1);				}			} 		}				//FUNCTION : UPDATE THE SCOREBOARD TIME CLOCK		private function updateScoreBoardClock():void		{			var timeConverter:TimeConverter = new TimeConverter();			var timeInSeconds:Number = _clockTimer.milliseconds;//.seconds*1000;			var timeString:String = timeConverter.convertTime(timeInSeconds, "milliseconds");			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, BaseballMemoryMain.TIME, String(timeString) ) );			_model.displayScore = timeString;		}		//FUNCTION : UPDATE SCOREBOARD PAIRS		private function updateScoreBoardPairs():void		{			dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, BaseballMemoryMain.PAIRS_REMAINING, String(_numMatches+"/"+(_totalTiles/2).toString() )) );   		}		//FUNCTION : DEBUG      	private function debug(b:Boolean):void		{ 			if (b) {				if (_btnSkipToEnd==null) {					_btnSkipToEnd=new BtnSkipToEnd;					_btnSkipToEnd.buttonMode=true;					addChild(_btnSkipToEnd)					_btnSkipToEnd.addEventListener(MouseEvent.CLICK, onSkipToEnd);				}			}      	}				//FUCNTION : ANIMATE IN BONUS POP UP BOX		private function animateInBonusPopUps():void {			if (_bonusPopup==null) {				_bonusPopup = new BonusPopUp(); //has timeline variable determines if screens have been shown yet				_bonusPopup.x = 492;				_bonusPopup.y = 265;				_bonusPopup.scaleX = 0;				_bonusPopup.scaleY = 0;				addChild(_bonusPopup);			}						//animate in, on complete animteInBonusPopUps			if (_model.hasDogBonus && !_bonusPopup.dogShown) {				_bonusPopup.gotoAndStop("DOG");				_numMatches++;			} else if (_model.hasFriendBonus && !_bonusPopup.friendShown) {				_bonusPopup.gotoAndStop("FRIEND");				_numMatches++;			} else if (_model.numQuizBonuses==1 && !_bonusPopup.q1Shown) {				_bonusPopup.gotoAndStop("Q1");				_numMatches++;			} else if (_model.numQuizBonuses==2 && !_bonusPopup.q2Shown) {				_bonusPopup.gotoAndStop("Q2");				_numMatches+=2;			}						TweenMax.to(_bonusPopup, 0.3, {scaleX:1, scaleY:1, ease:Back.easeOut});			TweenMax.to(_bonusPopup, 0.3, {scaleX:0, scaleY:0, delay:2, ease:Back.easeIn, onComplete:animateInBonusFlips});						updateScoreBoardPairs();			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT,false,0, 0, 1));		}				//FUCNTION : ANIMATE IN BONUS FLIPS		private function animateInBonusFlips():void {			_tileHolder.addEventListener(BaseballMemoryEvent.BONUS_FLIPS_COMPLETE, onBonusTileFlipped);			_tileHolder.flipBonusMatch();		}				// =================================================		// ================ @Handlers		// ================================================		//FUNCTION : ON TILES ANIMATED IN		private function onTilesAnimatedIn(e:AnimationEvent):void		{			_tileHolder.removeEventListener(AnimationEvent.COMPLETE, onTilesAnimatedIn);						if (_model.numBonuses>0) {				animateInBonusPopUps(); //DISPLAY THE BONUS POPUPS FIRST, THEN SHOW THE BONUS FLIPS			} else {				this.dispatchEvent(new Event(Game.NEW_LEVEL));			}		}		//FUNCTION : ON BONUS TILE FLIPPED		private function onBonusTileFlipped(e:BaseballMemoryEvent):void		{			_tileHolder.removeEventListener(BaseballMemoryEvent.BONUS_FLIPS_COMPLETE, onBonusTileFlipped);			_bonusFlipsNum++;			_pairsRemaining--;			if (_bonusFlipsNum == _totalBonusFlips) {				this.dispatchEvent(new Event(Game.NEW_LEVEL));			} else { //	keep flipping tiles				if (_model.numQuizBonuses==2 && _bonusFlipsNum==_totalBonusFlips-1) { //if both quiz questions correct - just need the one popup					animateInBonusFlips();				} else {					TweenMax.delayedCall(0.4, animateInBonusPopUps); 				}			}		}				//FUNCTION : ON TILE CLICK		private function onTileClicked(e:BaseballMemoryEvent):void		{			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_FLIP_OVER,false,0, 0, 1));							var tileClicked:Tile = Tile(e.data);			if (_currentTileNum==0) {				_currentTileNum = tileClicked.id;				_currentTileSelected = tileClicked; //	flips first tile			} else {				//	prevent further clicking				removeEvents();				if(checkForPair(tileClicked.id)) { //IT'S A MATCH					addEvents();										if (_plusOnePopup==null) {						_plusOnePopup = new PlusOneMC();						_plusOnePopup.x = 490;						_plusOnePopup.y = 273;						_plusOnePopup.mouseEnabled = false;						_plusOnePopup.mouseChildren = false;						_plusOnePopup.scaleX = _plusOnePopup.scaleY = 0.7;						addChild(_plusOnePopup);					}					_plusOnePopup.visible = true;					_plusOnePopup.gotoAndPlay(2);										dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT,false,0, 0, 1));										Tile(_currentTileSelected).discard(0.5);					Tile(tileClicked).discard(0.5);					_currentTileNum = 0;										_numMatches++;					trace("*************** IT'S A MATCH AND NUM MATCHES == "+_numMatches);					_pairsRemaining = (_totalTiles/2)-_numMatches;					updateScoreBoardPairs();										_model.matchTimeStampsArray.push(_clockTimer.milliseconds);//cheat checking										//randomly play a hooray					var randNum:Number = Math.floor(Math.random()*9);					if (randNum == 2) {						dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_HOORAY,false,0, 0, 1));					}									} else { //NOT A MATCH					TweenMax.delayedCall(0.5, _currentTileSelected.flip); 					TweenMax.delayedCall(0.5, tileClicked.flip); 										TweenMax.delayedCall(0.5, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_FLIP_BACK,false,0, 0, 1)]);					TweenMax.delayedCall(0.3, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,0, 0, 1)]);										_currentTileNum = 0;										// penalty delay					TweenMax.delayedCall(0.7, addEvents);										//randomly play a ohhh					var randNum2:Number = Math.floor(Math.random()*9);					if (randNum2 == 2) {						dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_OHH,false,0, 0, 1));					}				}			}		}		//FUNCTION : ON CLOCK TIMER UP		private function onClockTimerUp(e:Event):void		{			_isGameOver = true;		}				//FUNCTION : ON SKIP TO END		private function onSkipToEnd(event:Event=null):void		{ 			_numMatches = (_totalTiles/2);			//_tileHolder.clearTheBoard();		}				//FUNCTION : ON KEY DOWN - CHECK FOR P PAUSE		private function keyDownHandler(event:KeyboardEvent):void{  			if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); //prevent tile roll and click				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			}		}				// =================================================		// ================ @Getters / Setters		// =================================================				public function get gameLevel():int		{			return _gameLevel;		}	}}