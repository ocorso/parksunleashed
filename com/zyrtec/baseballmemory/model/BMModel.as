package com.zyrtec.baseballmemory.model{	import com.bigspaceship.utils.Out;	import com.zyrtec.adapters.ShellAdapter;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.model.MiniGameModel;	import com.zyrtec.utils.EncryptUtils;		import flash.display.*;	import flash.events.*;		import net.ored.util.ORedUtils;	// =================================================	// ================ @Class	// =================================================	public class BMModel extends MiniGameModel	{		public static const TOTAL_TILES:uint = 48; //total tiles		public static const SHOW_FRIEND_BONUS:Boolean = false; //whether or not the game will offer an invite a friend bonus //mandatory for high scores screen				//BEFORE PUBLISHING MEMORY GAME, CHOOSE WHICH GAME IT IS HERE AND COMMENT OUT THE REST		public static const MEMORY_TYPE:String = "Baseball";//		public static const MEMORY_TYPE:String = "DogRun";//		public static const MEMORY_TYPE:String = "SearchSeats";				private static var _instance:BMModel=null;		// SINGLETON instance				private var _isLoggedIn:Boolean=false;				//game specific		private var _showQuiz:Boolean; //whether to go to quiz mode or straight to game play		private var _numBonuses:uint=0; //number of bonus tile pairs to reveal before game starts		private var _numQuizBonuses:uint=0; //number of bonuses from quiz		private var _hasDogBonus:Boolean; //has dog bonus		private var _hasFriendBonus:Boolean; //has bonus from friend invite		private var _matchTimeStampsArray:Array; //CHEAT CHECK - stores the time of each match gotten				private var _isDebugMode:Boolean = false;//	t:show numbers on tile and skip to end, f: dont		// =================================================		// ================ @Constructor		// =================================================		public function BMModel( event:SingletonEnforcer ):void		{			_matchTimeStampsArray = new Array();		}		public static function getInstance():BMModel		{			if (_instance == null) {				_instance = new BMModel(new SingletonEnforcer());			}			return _instance;		}		// =================================================		// ================ @Callable		// =================================================		override public function setGameData($gameData:IGameData):void {			super.setGameData($gameData as BMGameData);			this.showQuiz = ($gameData as BMGameData).showQuiz;			this.hasDogBonus = ($gameData as BMGameData).hasDogBonus;			this.hasFriendBonus = ($gameData as BMGameData).hasFriendBonus;						//trace("salt: "+this.encryptor.saltForServices);		}				public function track($id, $val):void{			shell.track(_uid, _sid, $id, $val);					}				// =================================================		// ================ @Workers		// =================================================		// =================================================		// ================ @Handlers		// =================================================				// =================================================		// ================ @Getters / Setters		// =================================================		override public function get dataToSend():Object{ 						var dataObj:Object = new Object();						dataObj.UserID = uid;			dataObj.GameID = gid;			dataObj.SessionID = sid;			dataObj.Stars = stars;						var customDataObj:Object = new Object();//data to encrypt			if (isRefreshScore) {				customDataObj.userTime = -1;			} else {				customDataObj.userTime = _score;			}			isRefreshScore=false; //reset this right away						customDataObj.timeStampArray = _matchTimeStampsArray;			customDataObj.numBonuses = _numBonuses;			//Out.info(this, "SCORE VALUE BEING PASSED : "+customDataObj.userTime);						//encryptor.createSaltFromString("ff24814dff66ad42ffffffffff2ca45fff19844fff32af4affffffffff1a9845");			dataObj.Data = customDataObj;//encryptor.encrypt(customDataObj);						//Out.info(this, "here is ecrypted data: "+dataObj.Data);			Out.warning(this, "game ID: " + gid);						Out.info(this, "here is the object data to send : ");			ORedUtils.objectToString(dataObj);						Out.info(this, "here is the custom data objct : ");			ORedUtils.objectToString(customDataObj);						return dataObj;					}//end function				override public function get scoreToSend():Object{						var scoreToSend:Object 	= new Object();			scoreToSend.displayValue = this.displayScore+" min";						return scoreToSend;					}				public function get matchTimeStampsArray():Array	{	return _matchTimeStampsArray;	}		public function set matchTimeStampsArray(value:Array):void	{	_matchTimeStampsArray = value;	}				public function get numBonuses():uint	{	return _numBonuses;	}		public function set numBonuses(value:uint):void	{	_numBonuses = value;	}				public function get numQuizBonuses():uint	{	return _numQuizBonuses;	}		public function set numQuizBonuses(value:uint):void	{				_numQuizBonuses = value;				_numBonuses+=_numQuizBonuses;		}				public function get hasDogBonus():Boolean	{	return _hasDogBonus;	}		public function set hasDogBonus(value:Boolean):void	{			_hasDogBonus = value; 			if (_hasDogBonus) {				_numBonuses++;			} 		}				public function get hasFriendBonus():Boolean	{	return _hasFriendBonus;	}		public function set hasFriendBonus(value:Boolean):void	{				_hasFriendBonus = value; 			if (_hasFriendBonus) {				_numBonuses++;			}		}			public function get showQuiz():Boolean	{	return _showQuiz;	}		public function set showQuiz(value:Boolean):void	{	_showQuiz = value;	}				public function get isDebugMode():Boolean	{	return _isDebugMode;	}	}}// =================================================// ================ @Singleton // =================================================	class SingletonEnforcer {	}