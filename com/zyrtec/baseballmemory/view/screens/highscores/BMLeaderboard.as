package com.zyrtec.baseballmemory.view.screens.highscores{	import com.greensock.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.ui.RollOverButton;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.baseballmemory.model.BMModel;	import com.zyrtec.events.ZyrtecGameEvent;	import com.zyrtec.model.MiniGameModel;	import com.zyrtec.view.Leaderboard;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;		import com.zyrtec.analytics.Tracking;		// =================================================	// ================ @Class	// =================================================	public class BMLeaderboard extends Leaderboard	{			// =================================================		// ================ @Constructor		// =================================================		public function BMLeaderboard(leaderboardClipMC:MovieClip, gameModel:MiniGameModel)		{			super(leaderboardClipMC, gameModel);		}				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : SET THE LEADERBOARD STATIC TEXT		override public function setStaticText():void {			if (model.isLoggedIn) {  //gray these out				leaderboardClip.signupAreaMC.alpha = 0.4;			}						leaderboardClip.txtLoading.alpha = 1;						leaderboardClip.txtTimeComplete.txt.autoSize = "right";			leaderboardClip.txtTimeComplete.txt.text = model.displayScore;						//display stars earned : NOTE : THIS WILL BE DIFFERENT ACROSS GAMES			leaderboardClip.txtMinutes.txt.autoSize = "left";			leaderboardClip.txtStars.txt.autoSize = "left";						var minutes:uint = BMModel(model).score/60000;			if (minutes < 2) { //3 stars				leaderboardClip.star1.gotoAndStop(2);				leaderboardClip.star2.gotoAndStop(2);				leaderboardClip.star3.gotoAndStop(2);				leaderboardClip.txtMinutes.txt.text = "< 2 minutes.";				leaderboardClip.txtStars.txt.text = "3 stars";				model.stars = 3;			} else if (minutes >= 2 && minutes < 3){ //2 stars				leaderboardClip.star1.gotoAndStop(2);				leaderboardClip.star2.gotoAndStop(2);				leaderboardClip.txtMinutes.txt.text = "< 3 minutes.";				leaderboardClip.txtStars.txt.text = "2 stars";				model.stars = 2;			} else if (minutes >=3){ //1 star				leaderboardClip.star1.gotoAndStop(2);				leaderboardClip.txtMinutes.txt.text = "> 3 minutes.";				leaderboardClip.txtStars.txt.text = "1 star";				model.stars = 1;			}		}				//FUNCTION : SET THE LEADERBOARD DYNAMIC TEXT 		override public function setLeaderboardText():void {			//trace("results obj = "+model.leaderboardResults);			trace("SETTING LEADERBOARD TEXT");			TweenMax.to(leaderboardClip.txtLoading, 0.4, {alpha:0});						var i:int;			if (playerHolder.numChildren>0) { //clear out the leaderboard data before this animates in				var clip:MovieClip;				for (i = 0; i < playerHolder.numChildren; i++) {					clip = MovieClip(playerHolder.getChildAt(i));					clip.visible = false;					clip = null;				}			}						var resultsObj:Object = model.leaderboardResults;						if (!model.isLoggedIn || !resultsObj.hasOwnProperty("TopScore") || resultsObj.TopScore==null || resultsObj.TopScore==undefined) {				leaderboardClip.txtYourRank.txtTime.text = model.displayScore; 			} else {				leaderboardClip.txtYourRank.txtTime.text = getPlayerScoreDisplay(resultsObj.TopScore); 			}						/*if (resultsObj.hasOwnProperty("Rank") && resultsObj.Rank!=null && resultsObj.Rank!=undefined) {			leaderboardClip.txtYourRank.txtRank.text = resultsObj.Rank;			} else {			leaderboardClip.txtYourRank.txtRank.text = "";			}*/						if (resultsObj.hasOwnProperty("SessionName") && resultsObj.SessionName!=null && resultsObj.SessionName!=undefined) {				leaderboardClip.txtSession.txt.text = resultsObj.SessionName;			}						//start the session countdown clock			if (resultsObj.hasOwnProperty("TimeLeft") && resultsObj.TimeLeft!=null && resultsObj.TimeLeft!=undefined) {				sessionTime = resultsObj.TimeLeft;				if (sessionTime>1000) { //only use the timer if the time left is greater than 1 second					if(sessionTimer==null) {						sessionTimer = new Timer(1000);					}					sessionTimer.addEventListener(TimerEvent.TIMER, onSessionTimer);					sessionTimer.start();				}			}						//populate the leaderboard			var leaderboardPlayer:MovieClip;			var spacing:uint = 10;			var rank:String;			var scoresLength:int;			if (resultsObj.hasOwnProperty("Scores") && resultsObj.Scores!=null && resultsObj.Scores!=undefined) {				scoresLength = resultsObj.Scores.length;				//resultsObj.Scores.sortOn("score"); //SORT ARRAY ASCENDING				for (i=0; i<resultsObj.Scores.length; i++) { //just grab first 5 players					leaderboardPlayer = new LeaderboardPlayerMC();					/*if (resultsObj.hasOwnProperty("Rank") && resultsObj.Rank!=null) {					rank = resultsObj.Rank;					} else {					rank = "N/A";					}					if (rank==(i+1).toString()) { //you are in the top 5					leaderboardPlayer.txtRank.text = rank;					if (model.uid=="-1" || model.uid==null) {  //not logged in					leaderboardPlayer.txtName.text = "YOU";					} else {					leaderboardPlayer.txtName.text = model.name;					}					leaderboardPlayer.txtScore.text = model.displayScore;					} else {*/						trace("SCORES ARRAY -- looping through array and i == "+i+" and order == "+resultsObj.Scores[(scoresLength-1)-i].order+" and name == "+resultsObj.Scores[(scoresLength-1)-i].name+" and score == "+getPlayerScoreDisplay(resultsObj.Scores[(scoresLength-1)-i].score));					leaderboardPlayer.txtRank.text = (i+1).toString();//resultsObj.Scores[i].order; //assuming "order" will correspond to the order of the array					leaderboardPlayer.txtName.text = resultsObj.Scores[(scoresLength-1)-i].name;					leaderboardPlayer.txtScore.text = getPlayerScoreDisplay(resultsObj.Scores[(scoresLength-1)-i].score);					//}										leaderboardPlayer.y = (leaderboardPlayer.height+spacing)*i;										playerHolder.addChild(leaderboardPlayer);				}			}						//fade in			TweenMax.to(playerHolder, 0.4, {alpha:1, delay:0.4});			TweenMax.to(leaderboardClip.txtYourRank, 0.4, {alpha:1, delay:0.4});			TweenMax.delayedCall(0.4, addReloadEvents);		}				// =================================================		// ================ @Workers		// =================================================						// =================================================		// ================ @Handlers		// =================================================		override public function onPlayAgainClick(e:MouseEvent):void{ //restart the game, go to next system state			RollOverButton(leaderboardClip.btnPlayAgain).removeEvents();			leaderboardClip.btnPlayAgain.removeEventListener(MouseEvent.CLICK, onPlayAgainClick);			if (BMModel.SHOW_FRIEND_BONUS) {				if (!BMModel(model).hasFriendBonus) { //show the invite overlay and wait for close					leaderboardClip.screenInviteMC.visible = true;					leaderboardClip.overlayMC.visible = true;					TweenMax.to(leaderboardClip.screenInviteMC, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, onComplete:addInviteEvents});					TweenMax.to(leaderboardClip.overlayMC, 0.4, {alpha:1});				} else { //user invited friends already					dispatchEvent(new ZyrtecGameEvent(ZyrtecGameEvent.PLAY_AGAIN));				}			} else { 				dispatchEvent(new ZyrtecGameEvent(ZyrtecGameEvent.PLAY_AGAIN));			}		}				override public function onInviteFriendClick(e:MouseEvent):void{ //open invite pop up			if (leaderboardClip.screenInviteMC!=null) {				RollOverButton(leaderboardClip.screenInviteMC.btnInvite).removeEvents();				RollOverButton(leaderboardClip.screenInviteMC.btnSkip).removeEvents();				leaderboardClip.screenInviteMC.btnInvite.removeEventListener(MouseEvent.CLICK, onInviteFriendClick);				TweenMax.to(leaderboardClip.screenInviteMC, 0.2, {scaleX:0, scaleY:0, ease:Back.easeIn, visible:false});				TweenMax.to(leaderboardClip.overlayMC, 0.2, {alpha:0, visible:false});				BMModel(model).hasFriendBonus = true; //this would be confirmed after the facebook invite javascript call, but putting here for now			}			dispatchEvent(new ZyrtecGameEvent(ZyrtecGameEvent.PLAY_AGAIN));///PLACEHOLDER so game restarts no matter what		}				override public function onFacebookShareClick(e:MouseEvent):void{ //share page on facebook			var title:String;			var copy:String;			var url:String;						//if (BMModel.MEMORY_TYPE=="Baseball") {				//BASEBALL:				title ="Score! I'm a Heavy Hitter!";				copy = "I earned "+model.stars+" stars for completing the Baseball Memory Game in only "+model.displayScore+" minutes on ZYRTEC%26reg; Parks Unleashed%26trade;. Ch-ch-check it out.";				url = "http://www.facebook.com/sharer.php?s=100&p[title]="+title+"&p[url]="+model.shareURL+"&p[images][0]="+model.badgeURL+"&p[summary]="+copy;				Tracking.track(Tracking.L1_SHARE_PLAYBALL);			//} else if (BMModel.MEMORY_TYPE=="DogRun") {*/				//DOG RUN				/*title ="Can you dig it? I just unlocked the Dog Runner Badge!";				copy = "I earned "+model.stars+" stars for completing the Dig in the Dog Run Game in only "+model.displayScore+" minutes on ZYRTEC%26reg; Parks Unleashed%26trade;. Ch-ch-check it out.";				url = "http://www.facebook.com/sharer.php?s=100&p[title]="+title+"&p[url]="+model.shareURL+"&p[images][0]="+model.badgeURL+"&p[summary]="+copy;				Tracking.track(Tracking.L2_SHARE_DOGRUNNER);*///			}else if (BMModel.MEMORY_TYPE=="SearchSeats") {					//SEARCH THE SEATS				/*title ="Bow down! I unlocked the King of the Park Badge!";				//I rule at ZYRTEC® Parks Unleashed™. I finished Search the Seats Memory Game in only XXXX minutes. Bet you can't dethrone me.				//var copy:String = "I earned "+model.stars+" stars for completing the Dig in the Dog Run Game in only "+model.displayScore+" minutes on ZYRTEC%26reg; Parks Unleashed%26trade;. Ch-ch-check it out.";				copy = "I rule at ZYRTEC%26reg; Parks Unleashed%26trade;. I finished Search the Seats Memory Game in only "+model.displayScore+" minutes. Bet you can't dethrone me.";				url = "http://www.facebook.com/sharer.php?s=100&p[title]="+title+"&p[url]="+model.shareURL+"&p[images][0]="+model.badgeURL+"&p[summary]="+copy;					Tracking.track(Tracking.L3_SHARE_KINGOFPARK);*///			}						if (ExternalInterface.available){				ExternalInterface.call("openPopup", url, "ShareFacebook", Leaderboard.POP_UP_WIDTH, Leaderboard.POP_UP_HEIGHT);			}else navigateToURL(new URLRequest(url), "_blank");		}				// =================================================		// ================ @Getters / Setters		// =================================================			}}