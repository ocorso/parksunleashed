package com.zyrtec.baseballmemory.view.tiles{	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.zyrtec.baseballmemory.events.BaseballMemoryEvent;		import flash.display.*;	import flash.events.MouseEvent;	import flash.utils.getQualifiedClassName;			// =================================================	// ================ @Class	// =================================================	public class Tile extends Sprite	{		private var _side1:DisplayObject;		private var _side2:DisplayObject;		private var _selected:Boolean;		private var _id:uint;		private var _orderNum:uint; //where the front tile fits in the picture puzzle		private var _startX:Number; //the x of the correct position of the tile		private var _startY:Number; //the y of the correct position of the tile				// =================================================		// ================ @Constructor		// =================================================		public function Tile()		{			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin, BlurFilterPlugin]);		}				// =================================================		// ================ @Callable		// =================================================		public function addEvents():void {			this.buttonMode = true;			this.addEventListener(MouseEvent.ROLL_OVER,onTileRoll, false, 0, true);			this.addEventListener(MouseEvent.ROLL_OUT,onTileRollOut, false, 0, true);			this.addEventListener(MouseEvent.CLICK, onTileClick, false, 0, true);		}				public function removeEvents():void {			this.buttonMode = false;			this.removeEventListener(MouseEvent.ROLL_OVER,onTileRoll);			this.removeEventListener(MouseEvent.ROLL_OUT,onTileRollOut);			this.removeEventListener(MouseEvent.CLICK, onTileClick);				}				//FUNCTION : FLIP TILE		public function flip():void {			TweenMax.to(this, 0.3, {glowFilter:{color:0x000000, alpha:0, blurX:0, blurY:0}, overwrite:false});			if (!_side2.visible) { //show back				//trace("show back");				_side2.visible = true;				TweenMax.to(_side1, 0.25, {transformAroundCenter:{scaleX:0}, ease:Back.easeIn, visible:false, overwrite:false});				TweenMax.to(_side2, 0.25, {scaleX:1, delay:0.25, ease:Back.easeOut, overwrite:false});			} else { //show front ---- on complete - _selected = false				//trace("show front");				_side1.visible = true;				TweenMax.to(_side2, 0.25, {scaleX:0, ease:Back.easeIn, visible:false, overwrite:false});				TweenMax.to(_side1, 0.25, {glowFilter:{color:0x000000, alpha:0, blurX:0, blurY:0}, transformAroundCenter:{scaleX:1, scaleY:1}, delay:0.25, ease:Back.easeOut, overwrite:true, onComplete:deselect});			}						dispatchEvent(new BaseballMemoryEvent(BaseballMemoryEvent.TILE_FLIPPED));		}				//FUNCTION : INTRO FLIP TILE -- special reset values		public function introFlip():void {			_side1.visible = true;			//TweenMax.to(this, 0.25, {scaleX:1, scaleY:1});			TweenMax.to(_side2, 0.25, {scaleX:0, ease:Back.easeIn, visible:false, overwrite:false, onComplete:function resetSide2():void {				_side2.width = 82;				_side2.height = 94;				_side2.scaleX = 0;				//_side2.x = _side2.x-(_side2.width/2)-10; //adjust offset 				//_side2.y = _side2.y-(_side2.height/2);				TweenMax.to(_side2, 0.1, {glowFilter:{color:0x000000, alpha:1, blurX:15, blurY:15}});			}});			TweenMax.to(_side1, 0.25, {glowFilter:{color:0x000000, alpha:0, blurX:0, blurY:0}, transformAroundCenter:{scaleX:1, scaleY:1}, delay:0.25, ease:Back.easeOut, overwrite:true});				}				//FUNCTION : DISCARD THE TILE - FLY AWAY		public function discard(delayNum:Number=0):void {			this.parent.setChildIndex(this, this.parent.numChildren-1); //ghetto way to put the clip on top			var randX:Number = Math.floor(Math.random()*(1+240))-40;			var randY:Number = Math.floor(Math.random()*(1+240))-40;			var randRot:Number = Math.random()*(360);			// dispatches a TILE_DISCARDED event onComplete			TweenMax.to(this, 0.5, {blurFilter:{blurX:10, blurY:10, alpha:1}, scaleX:0, scaleY:0, x:randX, y:randY, rotation:randRot, delay:delayNum, ease:Back.easeIn, visible:false, onComplete: function(){	dispatchEvent(new BaseballMemoryEvent(BaseballMemoryEvent.TILE_DISCARDED))}	});		}				// =================================================		// ================ @Workers		// =================================================		private function deselect():void {			_selected = false;			this.parent.swapChildren(this, this.parent.getChildAt(this.parent.numChildren-2));		}				// =================================================		// ================ @Handlers		// =================================================			private function onTileRoll(e:MouseEvent):void {  			if (!_selected) {				this.parent.setChildIndex(this, this.parent.numChildren-2);				TweenMax.to(_side1, 0.3, {transformAroundCenter:{scaleX:1.25, scaleY:1.25}, ease:Back.easeOut, overwrite:true});				TweenMax.to(_side1, 0.3, {glowFilter:{color:0x000000, alpha:0.75, blurX:7, blurY:7}, overwrite:false});			}		}				private function onTileRollOut(e:MouseEvent):void {  			if (!_selected) {				//this.parent.setChildIndex(this, 0);				TweenMax.to(_side1, 0.25, {transformAroundCenter:{scaleX:1, scaleY:1}, ease:Back.easeIn, overwrite:true});				TweenMax.to(_side1, 0.25, {glowFilter:{color:0x000000, alpha:0, blurX:0, blurY:0}, overwrite:false});			}		}				private function onTileClick(e:MouseEvent):void { 			if (!_selected) {				_selected = true;				this.parent.setChildIndex(this, this.parent.numChildren-1);				this.flip();				dispatchEvent(new BaseballMemoryEvent(BaseballMemoryEvent.TILE_CLICK));			}		}				// =================================================		// ================ @Getters / Setters		// =================================================		public function get selected():Boolean { return _selected; };		public function set selected(value:Boolean):void { _selected = value; };				public function get id():uint { return _id; };		public function set id(value:uint):void { _id = value; };				public function get orderNum():uint { return _orderNum; };		public function set orderNum(value:uint):void { _orderNum = value; };		public function get startX():Number { return _startX; };		public function set startX(value:Number):void { _startX = value; };				public function get startY():Number { return _startY; };		public function set startY(value:Number):void { _startY = value; };		public function set side1(value:DisplayObject):void {			_side1 = value;			_side1.visible = false;			_side1.scaleX = 0;			//trace("********************  qualified class name of tile = "+getQualifiedClassName(_side1));			//if (getQualifiedClassName(_side1)=="Bitmap") {				//Bitmap(_side1).smoothing = true;			//}			addChild(_side1);			if (_side2!=null) {				//_side2.x = _side2.x-10//((_side2.width-_side1.width)/2); //adjust offset because side 2 is bigger				//_side2.y = _side2.y-((_side2.height-_side1.height)/2);				//_side2.scaleX = 0;			}		};				public function set side2(value:DisplayObject):void {			_side2 = value;			//_side2.visible = false;			//if using movieclip here and not png like side 1 (transform around center not working for side 2)			_side2.width = 66;			_side2.height = 75;			//_side2.x = _side2.x+(_side2.width/2)-10; //adjust offset since using movieclip for back tiles instead of png (side 1 uses png export with 0,0 reg point)			_side2.y = _side2.y+(_side2.height/2);			//_side2.scaleX = 0;			addChild(_side2);			TweenMax.to(_side2, 0.1, {glowFilter:{color:0x000000, alpha:0.5, blurX:5, blurY:5}});		};	}}