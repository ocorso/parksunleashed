package com.zyrtec.cardqueen.game{	import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.ui.RollOverButton;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.ConvertStringUtil;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.cardqueen.controller.CardQueenMain;	import com.zyrtec.cardqueen.events.CardQueenEvent;	import com.zyrtec.cardqueen.model.CQModel;	import com.zyrtec.cardqueen.model.SoundData;	import com.zyrtec.cardqueen.video.VideoController;		import flash.display.*;	import flash.events.*;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;	// =================================================	// ================ @Class	// =================================================		public class CardQueenGame extends Game	{		//display objs		private var _stageRef:Stage;		private var _feedbackClip:MovieClip; //feedback messages clip		private var _popupText:MovieClip; //pop up end of level to start timer		private var _videoController:VideoController; //control queen, jack, shuffle videos		private var _gameOverMC:MovieClip;		private var _pointsMC:MovieClip;		private var _countdownMC:MovieClip;		private var _hourglass:MovieClip;				//bools		private var _isGameOver:Boolean = false;//whether the game is over		private var _passedLevel:Boolean = false;//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;	//whether timer has started running				//req values for game			private var _gameWidth:int;		private var _gameHeight:int;							//game specific vars		private var _countdownTimer:Timer; //5 seconds to pick a card		private var _isEndLevel:Boolean; //whether the level is over		private var _secondCountdownNum:Number; //countdown number to pulling dog		private var _isInPlay:Boolean; //whether to allow keyboard events for arrow keys		private var _isCorrectHit:Boolean = false; //if the keyboard hit is correct, keep playing		private var _currentQueenNum:uint; //the start position of the queen - picked randomly		private var	_model:CQModel;// Game Model (Singleton)		// =================================================		// ================ @Constructor		// =================================================		public function CardQueenGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);			_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = CQModel.getInstance();			_stageRef = _model.stageRef;		}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 			_model.score=0;        	_model.gameLevel = 0;			_model.lives = 3;		        	_isGameOver = false;			_isStarted = false;			_secondCountdownNum = 5;			_isEndLevel = false;			_isInPlay = false;			_currentQueenNum = 1; //the middle position						if (_videoController==null) {				trace("create vieo controller");				_videoController = new VideoController();				_videoController.x = 235;				_videoController.y = 133;				addChild(_videoController);				//_videoController.loadQueenVideos(); //load the queens upfront			} else {				_videoController.reset();			}						if (_popupText==null) {				_popupText = new PopUpGameMessagingMC();				_popupText.x = 492;				_popupText.y = 200;				_popupText.scaleX = _popupText.scaleY = 0;				addChild(_popupText);				_popupText.mouseEnabled = false;				_popupText.visible = false;			}						if (_pointsMC==null) {				_pointsMC = new PopUpPointsMC();				_pointsMC.x = 492;				//_pointsMC.y = 160;				_pointsMC.y = 350;				_pointsMC.scaleX = _pointsMC.scaleY = 0;				addChild(_pointsMC);				_pointsMC.mouseEnabled = false;				_pointsMC.visible = false;			}						if (_countdownMC==null) {				_countdownMC = new CountdownMC();				_countdownMC.x = 480;				_countdownMC.y = 150;				addChild(_countdownMC);				_countdownMC.mouseEnabled = false;				_countdownMC.visible = false;			}						if (_hourglass==null) {				_hourglass = new HourglassMC();				addChild(_hourglass);			} 			_hourglass.txtCountdown.alpha = 0;			_hourglass.scaleX = _hourglass.scaleY = 1;			_hourglass.x = 480;			_hourglass.y = 160;			_hourglass.scaleX = _hourglass.scaleY = 0;			_hourglass.gotoAndStop(1);			_hourglass.alpha = 1;			_hourglass.rotation = 180;						if (_gameOverMC==null) {				_gameOverMC = new GameOverTextMC();				_gameOverMC.x = 492;				_gameOverMC.y = 145;				addChild(_gameOverMC);			}			_gameOverMC.scaleX = _gameOverMC.scaleY = 0;			_gameOverMC.visible = false;						//update the scoreboard with initial values			updateScoreBoard();			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, CQModel.LIVES, _model.lives.toString() ) );      	} 		//FUNCTION : NEW LEVEL - CALLED AFTER NEW GAME AND BEFORE LEVEL IN ANIMATION      	override public function newLevel():void		{ 			trace("new level");			//reset everything			_secondCountdownNum = 5;			_isEndLevel = false;						_isInPlay = false;			_model.gameLevel++;						_countdownMC.visible = false;			_countdownMC.gotoAndStop(1);						_hourglass.sand.alpha = 1;			_hourglass.sand.gotoAndStop(1);						dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, CQModel.LEVEL, String(_model.gameLevel)));      	} 		//FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER      	override public function runGame():void		{ // on game tick function                	// call custom functions here			if (_model.lives==0) {				_isGameOver = true;			}						checkforEndGame();      	}		//FUNCTION : RESUME GAME     	override public function resumeGame():void		{			_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);     	}     			//FUNCTION : DESTROY LISTENERS     	override public function destroy():void		{			removeEvents();			_videoController.removeEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);			_videoController.removeEventListener(CardQueenEvent.CARD_DOWN, onJackDown);			_videoController.destroyVideos();			     	}		// ===============================================================================		// ================ @ CUSTOM GAME FUNCTIONS		// ===============================================================================				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			_videoController.animateIn();			TweenMax.delayedCall(0.3, onAnimatedIn);		}				//FUNCTION : ADD EVENTS		public function addEvents():void		{				trace("game.addEvents");			_videoController.addEventListener(SoundEvent.PLAY_SOUND, onVideoPlaySound);			_videoController.addEventListener(SoundEvent.STOP_SOUND, onVideoStopSound);			if (_model.gameLevel==1) { //show the latifah				_videoController.addEventListener(CardQueenEvent.CARD_DOWN, onQueenDown);				_videoController.showQueenLatifah();			}else {				var randNum:int = Math.floor(Math.random()*2); //pick random position				if (randNum==_currentQueenNum) { //don't repeat, chose another number					if (randNum==0){						_currentQueenNum = 1;					} else if (randNum==1) {						_currentQueenNum = 2;					} else if (randNum==2) {						_currentQueenNum = 0;					}				} else {					_currentQueenNum = randNum;				}				_videoController.addEventListener(CardQueenEvent.CARD_DOWN, onQueenDown);				_videoController.showQueen(_currentQueenNum);			}						//_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);					}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			//_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			//_videoController.removeEvents(); 			_videoController.removeEventListener(SoundEvent.PLAY_SOUND, onVideoPlaySound);			_videoController.removeEventListener(SoundEvent.STOP_SOUND, onVideoStopSound);			_videoController.removeEventListener(CardQueenEvent.CARD_DOWN, onQueenDown);			_videoController.removeEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);			_videoController.removeCardEvents();			_countdownTimer.removeEventListener(TimerEvent.TIMER, onCountdownTimer);			_countdownTimer.stop();			_videoController.removeEventListener(CardQueenEvent.SHUFFLE_COMPLETE, onShuffleComplete);		}				// =================================================		// ================ @Workers		// =================================================						//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 			if (_isGameOver) {					removeEvents();							dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_LOSE,false));				//_gameOverMC.gotoAndStop("WON");				//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_HOORAY,false));								this.dispatchEvent(new Event(GAME_OVER));								//_model.score = 				//updateScoreBoard();								_gameOverMC.visible = true;				TweenMax.to(_gameOverMC, 0.4, {scaleX:1, scaleY:1, delay:0.5, ease:Back.easeOut});				TweenMax.to(_gameOverMC, 0.4, {scaleX:0, scaleY:0, delay:2.5, ease:Back.easeIn, visible:false, overwrite:false});								//TweenMax.to(_videoController, 0.3, {alpha:0, delay:2, onComplete:_videoController.reset}); //reset the values on fade out done							}		}				//FUNCTION : UPDATE THE SCOREBOARD 		private function updateScoreBoard():void		{			_model.displayScore = ConvertStringUtil.addNumberCommas(_model.score.toString());			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, CQModel.SCORE, _model.displayScore ) );		}				//FUCNTION: ENABLE CARD CLICKS - START TIMER		private function enableCardClick():void {			if (_countdownTimer==null) {				_countdownTimer = new Timer(50);			}						_videoController.addEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);			_videoController.addCardEvents();						_countdownTimer.addEventListener(TimerEvent.TIMER, onCountdownTimer);			_countdownTimer.start();						TweenMax.to(_hourglass, _secondCountdownNum, {frame:27, delay:0.7, ease:Sine.easeIn});						//_countdownMC.visible = true;			//_countdownMC.gotoAndPlay("COUNT_5");						dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_TIMER,false,0, 0, 0.8));		}		// =================================================		// ================ @Handlers		// ================================================		//FUNCTION : ON ANIMATED IN		private function onAnimatedIn(e:AnimationEvent=null):void		{			TweenMax.delayedCall(0.4, this.dispatchEvent, [new Event(Game.NEW_LEVEL)]);		}				//FUNCTION : ON QUEEN DOWN - queen sequence is done - show shuffle sequence		private function onQueenDown(e:CardQueenEvent):void {			_videoController.removeEventListener(CardQueenEvent.CARD_DOWN, onQueenDown);			_videoController.addEventListener(CardQueenEvent.SHUFFLE_COMPLETE, onShuffleComplete);			var speed:String;			var difficulty:String;			if (_model.gameLevel<=5) {				speed = "Med";				difficulty = _model.gameLevel.toString();			} else if (_model.gameLevel>5 && _model.gameLevel<=10) {				speed = "Fast";				difficulty = (_model.gameLevel-5).toString();			} else if (_model.gameLevel>10 && _model.gameLevel<=15) {				speed = "Fast";				difficulty = (_model.gameLevel-10).toString();			} else if (_model.gameLevel>15 && _model.gameLevel<=20) {				speed = "Luda"; 				difficulty = (_model.gameLevel-15).toString();			} else if (_model.gameLevel>20) {				speed = "Luda";				difficulty = "5"; //or can make this random....			}			_videoController.playShuffle(speed, difficulty);		}				//FUNCTION : ON SHUFFLE COMPLETE		private function onShuffleComplete(e:CardQueenEvent):void {			_videoController.removeEventListener(CardQueenEvent.SHUFFLE_COMPLETE, onShuffleComplete);			_hourglass.txtCountdown.txt.autoSize = "right";			_hourglass.txtCountdown.txt.text = "0"+_secondCountdownNum.toString();			_hourglass.gotoAndStop("START");			_hourglass.sand.alpha = 0;						//if (_model.gameLevel==1) {				_popupText.gotoAndStop("FIND_QUEEN");				_popupText.y = 200;				_popupText.visible = true;				TweenMax.to(_popupText, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.5});				TweenMax.to(_popupText, 0.4, {scaleX:0, scaleY:0, delay:1.4, ease:Back.easeIn, visible:false, overwrite:false});								TweenMax.to(_hourglass, 0.5, {scaleX:1, scaleY:1, ease:Back.easeInOut, delay:1.4, overwrite:false});				TweenMax.to(_hourglass, 0.6, {rotation:0, delay:1.6, ease:Back.easeInOut, overwrite:false});				TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:1, delay:1.8, onComplete:enableCardClick});			/*} else {				TweenMax.to(_hourglass, 0.5, {scaleX:1, scaleY:1, ease:Back.easeInOut, delay:0.5, overwrite:false});				TweenMax.to(_hourglass, 0.6, {rotation:0, delay:0.7, ease:Back.easeInOut, overwrite:false});				TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:1, delay:1.4, onComplete:enableCardClick});			}*/							}				//FUNCTION : ON CARD CLICKED		private function onCardClicked(e:CardQueenEvent):void {			trace("YOU CHOSE CARD NUMBER "+e.data);			_countdownTimer.removeEventListener(TimerEvent.TIMER, onCountdownTimer);			_countdownTimer.stop();			dispatchEvent(new SoundEvent(SoundEvent.STOP_SOUND, SoundData.SOUND_TIMER,false,0, 0, 0.8));						_videoController.removeEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);			_videoController.removeCardEvents();						_countdownMC.visible = false;			_countdownMC.gotoAndStop(1);						TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:0});			TweenMax.to(_hourglass, 0.5, {scaleX:0, scaleY:0, ease:Back.easeInOut, onComplete:_hourglass.gotoAndPlay, onCompleteParams:["RESET"]});			TweenMax.to(_hourglass, 1, {rotation:180, ease:Back.easeInOut});						if (e.data == _videoController.currentShuffleEndPos) { //CORRECT!				if (_secondCountdownNum < 1) {					_model.score +=100;					_pointsMC.gotoAndStop(5);				} else if (_secondCountdownNum >=1 && _secondCountdownNum < 2) {					_model.score +=200;					_pointsMC.gotoAndStop(4);				}else if (_secondCountdownNum >=2 && _secondCountdownNum < 3) {					_model.score +=300;					_pointsMC.gotoAndStop(3);				}else if (_secondCountdownNum >=3 && _secondCountdownNum < 4) {					_model.score +=400;					_pointsMC.gotoAndStop(2);				}else if (_secondCountdownNum >=4 && _secondCountdownNum <= 5) {					_model.score +=500;					_pointsMC.gotoAndStop(1);				}				updateScoreBoard();				_videoController.showQueen(e.data);				_popupText.gotoAndStop("GREAT_JOB");				_popupText.y = 140;				_popupText.visible = true;				TweenMax.to(_popupText, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.4});				TweenMax.to(_popupText, 0.4, {scaleX:0, scaleY:0, delay:1.7, ease:Back.easeIn, visible:false, overwrite:false});								if (e.data == 0) {					_pointsMC.x = 300;				} else if (e.data ==1) {					_pointsMC.x = 462;				} else if (e.data ==2) {					_pointsMC.x = 635;				}								_pointsMC.visible = true;								TweenMax.to(_pointsMC, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.1});				TweenMax.to(_pointsMC, 0.4, {scaleX:0, scaleY:0, delay:2, ease:Back.easeIn, visible:false, overwrite:false});				dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT));				TweenMax.delayedCall(2.7, dispatchEvent, [new Event(Game.NEW_LEVEL)]);			} else { //WRONG!				_model.lives--;				dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, CQModel.LIVES, _model.lives.toString() ) );				if (_model.lives>0) {					_popupText.gotoAndStop("TRY_AGAIN");					_popupText.y = 140;					_popupText.visible = true;					TweenMax.to(_popupText, 0.4, {scaleX:1, scaleY:1, delay:0.4, ease:Back.easeOut});					TweenMax.to(_popupText, 0.4, {scaleX:0, scaleY:0, delay:1.7, ease:Back.easeIn, visible:false, overwrite:false});					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false, 0,0, 0.7));					TweenMax.delayedCall(2.5, dispatchEvent, [new Event(Game.NEW_LEVEL)]);				} else {					_videoController.addEventListener(CardQueenEvent.CARD_DOWN, onJackDown); //dont update anything, wait for jack down done				}								_videoController.showJack(e.data);			}					}				//FUNCITON : ON JACK DOWN - GAME OVER		private function onJackDown(e:CardQueenEvent):void {			trace("animate out cards from game");			_videoController.removeEventListener(CardQueenEvent.CARD_DOWN, onJackDown);			_videoController.addEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);			_videoController.animateOut(); 		}				//FUNCTION : ON COUNTDOWN TIMER		private function onCountdownTimer(e:TimerEvent):void {			_secondCountdownNum-=0.05; //0.05=(1/20th of second is 50 milliseconds)			var decimalPlaces:Number = Math.pow(10, 2);			_secondCountdownNum = Math.round(decimalPlaces * _secondCountdownNum) / decimalPlaces;			//trace("counting down -- "+_secondCountdownNum);									if (_secondCountdownNum == 4 || _secondCountdownNum == 3 || _secondCountdownNum == 2 || _secondCountdownNum == 1 || _secondCountdownNum ==0) {			//	_countdownMC.visible = true;			//	_countdownMC.gotoAndPlay("COUNT_"+_secondCountdownNum.toString());				_hourglass.txtCountdown.txt.autoSize = "right";				_hourglass.txtCountdown.txt.text = "0"+_secondCountdownNum.toString();			}					if (_secondCountdownNum == 0) {				_countdownTimer.removeEventListener(TimerEvent.TIMER, onCountdownTimer);				_countdownTimer.stop();				_videoController.removeEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);				_videoController.removeCardEvents();				_countdownMC.visible = false;				_countdownMC.gotoAndStop(1);				dispatchEvent(new SoundEvent(SoundEvent.STOP_SOUND, SoundData.SOUND_TIMER,false,0, 0, 0.8));				_model.lives--;				dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, CQModel.LIVES, _model.lives.toString() ) );								TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:0});				TweenMax.to(_hourglass, 0.5, {scaleX:0, scaleY:0, ease:Back.easeInOut, onComplete:_hourglass.gotoAndPlay, onCompleteParams:["RESET"]});				TweenMax.to(_hourglass, 1, {rotation:180, ease:Back.easeInOut});								if (_model.lives>0){					_popupText.gotoAndStop("TRY_AGAIN"); //maybe this should say "time's up!" ?					_popupText.y = 180;					_popupText.visible = true;					TweenMax.to(_popupText, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.4});					TweenMax.to(_popupText, 0.4, {scaleX:0, scaleY:0, delay:1.7, ease:Back.easeIn, visible:false, overwrite:false});										TweenMax.delayedCall(2.5, dispatchEvent, [new Event(Game.NEW_LEVEL)]);				} else {					_videoController.addEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);					TweenMax.delayedCall(1, _videoController.animateOut); 				}			}		}				//FUNCTION : ON CARDS ANIMATE OUT GAME OVER		function onCardsAnimateOutComplete(e:CardQueenEvent):void {			_videoController.removeEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);			dispatchEvent(new CardQueenEvent(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE));		}				//FUNCTION : ON VIDEO PLAY SOUND EVENT		private function onVideoPlaySound(e:SoundEvent):void {			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, e.name));		}				//FUNCTION : ON VIDEO STOP SOUND EVENT		private function onVideoStopSound(e:SoundEvent):void {			dispatchEvent(new SoundEvent(SoundEvent.STOP_SOUND, e.name));		}											//FUNCTION : ON KEY DOWN HANDLER		private function keyDownHandler(event:KeyboardEvent):void{  			/*if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); 				//add a black screen so they can't touch anything				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			}*/		}				// =================================================		// ================ @Getters / Setters		// =================================================			}}