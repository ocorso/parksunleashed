package com.zyrtec.cardqueen.model{	import com.bigspaceship.utils.Out;	import com.zyrtec.adapters.ShellAdapter;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.model.MiniGameModel;	import com.zyrtec.utils.EncryptUtils;		import flash.display.*;	import flash.events.*;		import net.ored.util.ORedUtils;	// =================================================	// ================ @Class	// =================================================	public class CQModel extends MiniGameModel	{		//custom display constants on scoreboard		public static const SCORE:String = "score";	//	points count		public static const LEVEL:String = "level";	//	levels		public static const LIVES:String = "lives"; // lives				private static var _instance:CQModel=null;		// SINGLETON instance				//game specific		private var _gameLevel:int=0;	 //game level		private var _lives:uint;				private var _isDebugMode:Boolean = false;//	end game on 1 error		// =================================================		// ================ @Constructor		// =================================================		public function CQModel( event:SingletonEnforcer ):void		{					}		public static function getInstance():CQModel		{			if (_instance == null) {				_instance = new CQModel(new SingletonEnforcer());			}			return _instance;		}		// =================================================		// ================ @Callable		// =================================================		/*override public function setGameData($gameData:IGameData):void {			super.setGameData($gameData as TOWGameData);					}*/				public function track($id, $val):void{			shell.track(_uid, _sid, $id, $val);					}				// =================================================		// ================ @Workers		// =================================================		// =================================================		// ================ @Handlers		// =================================================				// =================================================		// ================ @Getters / Setters		// =================================================		override public function get dataToSend():Object{ 						var dataObj:Object = new Object();						dataObj.UserID = uid;			dataObj.GameID = gid;			dataObj.SessionID = sid;			dataObj.Stars = stars;						var customDataObj:Object = new Object();//data to encrypt						if (isRefreshScore) {				customDataObj.score = -1;			} else {				customDataObj.score = _score;			}			isRefreshScore = false;						//dataObj.Data = encryptor.encrypt(customDataObj);			dataObj.Data = customDataObj;						//Out.info(this, "here is ecrypted data: "+dataObj.Data);			Out.warning(this, "game ID: " + gid);						Out.info(this, "here is the object data to send : ");			ORedUtils.objectToString(dataObj);						Out.info(this, "here is the custom data objct : ");			ORedUtils.objectToString(customDataObj);						return dataObj;					}//end function				override public function get scoreToSend():Object{						var scoreToSend:Object 	= new Object();			scoreToSend.displayValue = this.displayScore+" pts";						return scoreToSend;					}				public function get gameLevel():int	{	return _gameLevel;	}		public function set gameLevel(value:int):void	{	_gameLevel=value;	}				public function get lives():int	{	return _lives;	}		public function set lives(value:int):void	{	_lives=value;	}				public function get isDebugMode():Boolean	{	return _isDebugMode;	}	}}// =================================================// ================ @Singleton // =================================================	class SingletonEnforcer {	}