package com.zyrtec.cardqueen.video{	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.events.MediaEvent;	import com.theginbin.video.SimpleVideoDisplay;	import com.zyrtec.cardqueen.events.CardQueenEvent;	import com.zyrtec.cardqueen.model.CQModel;	import com.zyrtec.cardqueen.model.SoundData;		import flash.display.MovieClip;	import flash.display.Sprite;
		// =================================================	// ================ @Class	// =================================================	public class VideoController extends Sprite	{		private var _queenUpArray:Array;		private var _queenDownArray:Array;		private var _jackUpArray:Array;		private var _jackDownArray:Array;		private var _queenUp:SimpleVideoDisplay;		private var _queenDown:SimpleVideoDisplay;		private var _queensLoaded:Boolean;		private var _currentShuffleEndPos:uint; //end position of the current shuffle video		private var _cards:MovieClip; //the card pngs - static video placeholders		private var _currentCardPos:uint; //the current initial position of a card, queen or jack		private var _currentCardType:String; //'jack' or 'queen'		//need a readable variable that will show what the correct end position is				private var _model:CQModel;				// =================================================		// ================ @Constructor		// =================================================		public function VideoController()		{			TweenPlugin.activate([VisiblePlugin]);						_model = CQModel.getInstance();						_cards = new CardsMC();			addChild(_cards);			var i:uint;			for (i=0; i<3; i++) {				Card(_cards.getChildAt(i)).position = i;			}			_queenUpArray = [new CardVideoObject(_model.cdn+"assets/flv/queen/cardsUpQueenLeft.flv"),new CardVideoObject(_model.cdn+"assets/flv/queen/cardsUpQueenCenter.flv"),new CardVideoObject(_model.cdn+"assets/flv/queen/cardsUpQueenRight.flv")];			_queenDownArray = [new CardVideoObject(_model.cdn+"assets/flv/queen/cardsDownQueenLeft.flv"),new CardVideoObject(_model.cdn+"assets/flv/queen/cardsDownQueenCenter.flv"),new CardVideoObject(_model.cdn+"assets/flv/queen/cardsDownQueenRight.flv")];			_jackUpArray = [new CardVideoObject(_model.cdn+"assets/flv/jack/cardsUpJackSpadeLeft.flv"),new CardVideoObject(_model.cdn+"assets/flv/jack/cardsUpJackSpadeCenter.flv"),new CardVideoObject(_model.cdn+"assets/flv/jack/cardsUpJackSpadeRight.flv")];			_jackDownArray = [new CardVideoObject(_model.cdn+"assets/flv/jack/cardsDownJackSpadeLeft.flv"),new CardVideoObject(_model.cdn+"assets/flv/jack/cardsDownJackSpadeCenter.flv"),new CardVideoObject(_model.cdn+"assets/flv/jack/cardsDownJackSpadeRight.flv")];			//place all videos on stage			for (i=0; i<3; i++) {				addChild(_queenUpArray[i]);				_queenUpArray[i].visible = false;				_queenUpArray[i].x = _cards["card"+i.toString()].x;				_queenUpArray[i].y = _cards["card"+i.toString()].y;				addChild(_queenDownArray[i]);				_queenDownArray[i].visible = false;				_queenDownArray[i].x = _cards["card"+i.toString()].x;				_queenDownArray[i].y = _cards["card"+i.toString()].y;				addChild(_jackUpArray[i]);				_jackUpArray[i].visible = false;				_jackUpArray[i].x = _cards["card"+i.toString()].x;				_jackUpArray[i].y = _cards["card"+i.toString()].y;				addChild(_jackDownArray[i]);				_jackDownArray[i].visible = false;				_jackDownArray[i].x = _cards["card"+i.toString()].x;				_jackDownArray[i].y = _cards["card"+i.toString()].y;			}		}				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : LOAD ALL THE QUEEN VIDEOS UPFRONT		public function loadQueenVideos():void {			//load the queen latifah video first //do not let game start until this is loaded			//load all the queen up and down videos (6)			//on all complete, pause and hide them		}				//FUNCTION : SHOW SPECIAL LATIFAH		public function showQueenLatifah():void {			_currentCardType = "queenLatifah";			_currentCardPos = 1;			_queenUp = new SimpleVideoDisplay();			_queenUp.visible = false;			addChild(_queenUp);			_queenUp.addEventListener(MediaEvent.BUFFER_FULL, onBufferUpFull);			_queenUp.addEventListener(MediaEvent.COMPLETE, onVideoUpComplete); 			_queenUp.addEvents(); 			_queenUp.y = -100;			_queenUp.url = _model.cdn+"assets/flv/queen/cardsUpQueenVideo.flv";		}		//FUNCTION : ANIMATE IN		public function animateIn():void {			_cards.gotoAndPlay(2);		}				//FUNCTION : ANIMATE OUT		public function animateOut():void {			_cards.addEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);			_cards.gotoAndPlay("ANIMATE_OUT");		}				//FUNCTION : SHOW THE QUEEN CARD  - POSITION 0, 1, 2		public function showQueen(cardPos:int):void {			_currentCardType = "queen";			_currentCardPos = cardPos;			trace("current type and position = "+_currentCardType, _currentCardPos);			_queenUpArray[cardPos].addEventListener(MediaEvent.BUFFER_FULL, onBufferUpFull);			_queenUpArray[cardPos].addEventListener(MediaEvent.COMPLETE, onVideoUpComplete);			_queenUpArray[cardPos].visible = false;			_queenUpArray[cardPos].alpha = 1;			CardVideoObject(_queenUpArray[cardPos]).addEvents();			CardVideoObject(_queenUpArray[cardPos]).playVideo();		}				//FUNCTION : SHOW JACK - when user clicks a wrong (jack) card		public function showJack(cardPos:int):void {			_currentCardType = "jack";			_currentCardPos = cardPos;			trace("current type and position = "+_currentCardType, _currentCardPos);			_jackUpArray[cardPos].addEventListener(MediaEvent.BUFFER_FULL, onBufferUpFull);			_jackUpArray[cardPos].addEventListener(MediaEvent.COMPLETE, onVideoUpComplete);			_jackUpArray[cardPos].visible = false;			_jackUpArray[cardPos].alpha = 1;			CardVideoObject(_jackUpArray[cardPos]).addEvents();			CardVideoObject(_jackUpArray[cardPos]).playVideo();		}				//FUNCTION : PLAY SHUFFLING SEQUENCE		public function playShuffle(speed:String, difficulty:String):void { //game should tell this what type of shuffle to play (easy, med, fast) and which position to land on			var shuffleVidPath:String;			var startPos:String;			var endPos:String;			var vidType:String = "sequenceOverUnder"; 						switch (_currentCardPos) {				case 0:					startPos = "A";					break;				case 1:					startPos = "B";					break;				case 2:					startPos = "C";					break;			}					_currentShuffleEndPos = Math.round(Math.random()*2); //pick a random ending position			//trace("!!!!! current shuffle end pos random number = "+_currentShuffleEndPos);			switch (_currentShuffleEndPos) {				case 0:					endPos = "A";					break;				case 1:					endPos = "B";					break;				case 2:					endPos = "C";					break;			}			trace("!!!!! current shuffle end pos random number = "+_currentShuffleEndPos);			shuffleVidPath = _model.cdn+"assets/flv/shuffle/"+vidType+"_"+startPos+endPos+"_"+speed+"_"+difficulty+".flv";						var shuffleVideo = new SimpleVideoDisplay();			shuffleVideo.visible = false;			addChild(shuffleVideo);			shuffleVideo.addEventListener(MediaEvent.BUFFER_FULL, onBufferShuffleFull);			shuffleVideo.addEventListener(MediaEvent.COMPLETE, onVideoShuffleComplete); 			shuffleVideo.addEvents(); 			/*if (vidType == "sequenceOverUnder") { ///COMMENT OUT WHEN GET NEW SHUFFLES				shuffleVideo.x = 35;				shuffleVideo.y = 7;			} else { //"sequenceFigEight"				shuffleVideo.x = 35;				shuffleVideo.y = 57;			}*/			shuffleVideo.url = shuffleVidPath;		}				//FUNCTION : ADD CARD EVENTS		public function addCardEvents():void {			for (var i:uint=0; i<3; i++) {				Card(_cards.getChildAt(i)).addEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);				Card(_cards.getChildAt(i)).addEvents();			}		}				//FUNCTION : REMOVE CARD EVENTS		public function removeCardEvents():void {			for (var i:uint=0; i<3; i++) {				Card(_cards.getChildAt(i)).removeEventListener(CardQueenEvent.CARD_CLICKED, onCardClicked);				Card(_cards.getChildAt(i)).removeEvents();				Card(_cards.getChildAt(i)).onCardRollOut(null);			}		}				//FUNCTION : DESTROY 		public function destroyVideos():void {			//kill all listeners and netstreams		}				//FUNCITN : RESET		public function reset():void {			_cards.gotoAndStop(1);		}				// =================================================		// ================ @Workers		// =================================================				//FUNCTION : PLAY DOWN CARD		private function playCardDown():void {			if (_currentCardType=="queen") {				_queenDownArray[_currentCardPos].addEventListener(MediaEvent.BUFFER_FULL, onBufferDownFull);				_queenDownArray[_currentCardPos].addEventListener(MediaEvent.COMPLETE, onVideoDownComplete);				_queenDownArray[_currentCardPos].visible = false;				_queenDownArray[_currentCardPos].alpha = 1;				CardVideoObject(_queenDownArray[_currentCardPos]).addEvents();				CardVideoObject(_queenDownArray[_currentCardPos]).playVideo();			} else if (_currentCardType=="jack"){				_jackDownArray[_currentCardPos].addEventListener(MediaEvent.BUFFER_FULL, onBufferDownFull);				_jackDownArray[_currentCardPos].addEventListener(MediaEvent.COMPLETE, onVideoDownComplete);				_jackDownArray[_currentCardPos].visible = false;				_jackDownArray[_currentCardPos].alpha = 1;				CardVideoObject(_jackDownArray[_currentCardPos]).addEvents();				CardVideoObject(_jackDownArray[_currentCardPos]).playVideo();			} else {				_queenDown = new SimpleVideoDisplay();				_queenDown.visible = false;				addChild(_queenDown);				_queenDown.addEventListener(MediaEvent.BUFFER_FULL, onBufferDownFull);				_queenDown.addEventListener(MediaEvent.COMPLETE, onVideoDownComplete); 				_queenDown.addEvents(); 				_queenDown.y = -100;				_queenDown.url = _model.cdn+"assets/flv/queen/cardsDownQueenVideo.flv";			}		}						// =================================================		// ================ @Handlers		// =================================================				//FUNCTION : ON BUFFER UP FULL		private function onBufferUpFull(e:MediaEvent):void {//turn on/off appropriate card			trace("on buffer up full");			e.target.removeEventListener(MediaEvent.BUFFER_FULL, onBufferUpFull);			if (_currentCardType=="queen") {				_queenUpArray[_currentCardPos].visible = true;			} else if (_currentCardType == "jack"){				_jackUpArray[_currentCardPos].visible = true;			} else {				_queenUp.visible = true;			}			TweenMax.to(_cards["card"+_currentCardPos.toString()], 0.1, {alpha:0, visible:false});			//_cards["card"+_currentCardPos.toString()].visible = false;			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_UP,false));		}				//FUNCTION : ON BUFFER DOWN FULL		private function onBufferDownFull(e:MediaEvent):void {//turn on/off appropriate card			e.target.removeEventListener(MediaEvent.BUFFER_FULL, onBufferDownFull);			if (_currentCardType=="queen") {				_queenDownArray[_currentCardPos].visible = true;				TweenMax.to(_queenUpArray[_currentCardPos], 0.1, {alpha:0, visible:false});				//_queenUpArray[_currentCardPos].visible = false;			} else if (_currentCardType=="jack") {				_jackDownArray[_currentCardPos].visible = true;				TweenMax.to(_jackUpArray[_currentCardPos], 0.1, {alpha:0, visible:false});			} else {				_queenDown.visible = true;				TweenMax.to(_queenUp, 0.1, {alpha:0, visible:false}); //should kill this			}						dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DOWN,false,0, 0.4, 1));		}				//FUNCTION : ON BUFFER SHUFFLE FULL		private function onBufferShuffleFull(e:MediaEvent):void {//turn on/off appropriate card			e.target.removeEventListener(MediaEvent.BUFFER_FULL, onBufferShuffleFull);			e.target.visible = true;			TweenMax.to(_cards, 0.1, {alpha:0, visible:false});			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_SHUFFLE,false));		}				//FUNCTION : ON VIDEO UP COMPLETE		private function onVideoUpComplete(e:MediaEvent):void {			//set delayed call to play down video -- make sure the down video is loaded first before playing			e.target.removeEventListener(MediaEvent.COMPLETE, onVideoUpComplete);			if (_currentCardType=="queen") {				TweenMax.delayedCall(1.7, playCardDown);			} else if (_currentCardType=="jack"){				TweenMax.delayedCall(1, playCardDown);			} else {				TweenMax.delayedCall(0.2, playCardDown);//queen latifah - was 1.2			}		}				//FUNCTION : ON VIDEO DOWN COMPLETE		private function onVideoDownComplete(e:MediaEvent):void {			//dispatch that card is down 			e.target.removeEventListener(MediaEvent.COMPLETE, onVideoDownComplete);			_cards["card"+_currentCardPos.toString()].alpha = 1;			_cards["card"+_currentCardPos.toString()].visible = true;			if (_currentCardType=="queen") {				_queenDownArray[_currentCardPos].visible = false;			} else if (_currentCardType=="jack"){				_jackDownArray[_currentCardPos].visible = false;			} else {				_queenDown.visible = false;			}			this.dispatchEvent(new CardQueenEvent(CardQueenEvent.CARD_DOWN));		}				//FUNCTION : ON VIDEO SHUFFLE COMPLETE		private function onVideoShuffleComplete(e:MediaEvent):void {			//dispatch that shuffle is done			e.target.removeEventListener(MediaEvent.COMPLETE, onVideoShuffleComplete);			SimpleVideoDisplay(e.target).visible = false;			removeChild(SimpleVideoDisplay(e.target));			SimpleVideoDisplay(e.target).removeEvents();			SimpleVideoDisplay(e.target).killVideo();			_cards.visible = true;			_cards.alpha = 1;			dispatchEvent(new CardQueenEvent(CardQueenEvent.SHUFFLE_COMPLETE));						dispatchEvent(new SoundEvent(SoundEvent.STOP_SOUND, SoundData.SOUND_SHUFFLE,false));		}				//FUNCTION : ON CARD CLICKED		private function onCardClicked(e:CardQueenEvent):void {			removeCardEvents();			this.dispatchEvent(new CardQueenEvent(CardQueenEvent.CARD_CLICKED, e.data));		}				//FUNCTION : ON CARDS ANIMATE OUT GAME OVER COMPLETE		function onCardsAnimateOutComplete(e:CardQueenEvent):void {			_cards.removeEventListener(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE, onCardsAnimateOutComplete);			dispatchEvent(new CardQueenEvent(CardQueenEvent.GAMEOVER_ANIMATION_COMPLETE));		}				// =================================================		// ================ @Getters / Setters		// =================================================				public function get currentShuffleEndPos():uint { //0, 1, 2			return _currentShuffleEndPos;		}	}}