package com.zyrtec.cardqueen.view.screens{	import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.BasicScreen;	import com.g2.gaming.framework.events.ButtonIdEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.theginbin.ui.RollOverButton;	import com.zyrtec.cardqueen.model.CQModel;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;
	public class ScreenLevelIn extends BasicScreen	{		public var levelMC:MovieClip;		public var btnNext:MovieClip;		private var _isStarted:Boolean=false; //whether intro animation ran				private var _model:CQModel;				public function ScreenLevelIn(id:int=0, addBitmapBackground:Boolean=false, width:Number=0, height:Number=0, isTransparent:Boolean=false, color:uint=0)		{			super(id, addBitmapBackground, width, height, isTransparent, color);						levelMC.num2.visible = false;			_model = CQModel.getInstance();		}				public function startAnimation():void {			trace("animate level in");			this.gotoAndStop(1);			this.scaleX = this.scaleY = 1;			levelMC.num2.visible = false;			if (_model.gameLevel>9) { //set the game level text				levelMC.num2.visible = true;				//trace(_model.gameLevel.toString(),_model.gameLevel.toString().substr(0, 1), _model.gameLevel.toString().substr(1, 1));				if (_model.gameLevel.toString().substr(1, 1) == "0") {					levelMC.num2.gotoAndStop(10);				} else {					levelMC.num2.gotoAndStop(int(_model.gameLevel.toString().substr(1, 1)));				}				levelMC.num1.gotoAndStop(int(_model.gameLevel.toString().substr(0, 1)));				levelMC.num2.x = levelMC.num1.x+levelMC.num1.width-20;			} else {				levelMC.num1.gotoAndStop(_model.gameLevel);			}						if (!_isStarted) {				this.visible = true;				this.addEventListener(AnimationEvent.COMPLETE, onAnimationComplete, false, 0, true);				this.gotoAndPlay(2);			} else {				onAnimationComplete(null);			}		}				private function showWatchIntro():void { //might be showing queen latif or something here			this.scaleX = this.scaleY = 0;			this.gotoAndStop("WATCH");			TweenMax.to(this, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.5, onComplete:onWatchIntroComplete});		}				private function onAnimationComplete(e:AnimationEvent):void { //do the level clip animation, then dispatch on complete of that out			this.removeEventListener(AnimationEvent.COMPLETE, onAnimationComplete);			_isStarted = true;			this.scaleX = this.scaleY = 0;			this.gotoAndStop("LEVEL");			TweenMax.to(this, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut, delay:0.5, onComplete:onLevelInComplete});		}				private function onLevelInComplete():void { //animate out the level text, tell Main to go to next state			TweenMax.to(this, 0.4, {scaleX:0, scaleY:0, ease:Back.easeIn, delay:1.2});			/*if (_model.gameLevel==1) {				TweenMax.delayedCall(1.6, showWatchIntro);			} else {*/				TweenMax.delayedCall(1.6, dispatchEvent, [new ButtonIdEvent(ButtonIdEvent.BUTTON_ID, this.id)]); 			//}		}				private function onWatchIntroComplete():void {			TweenMax.to(this, 0.4, {scaleX:0, scaleY:0, ease:Back.easeIn, delay:1.2});			TweenMax.delayedCall(1.6, dispatchEvent, [new ButtonIdEvent(ButtonIdEvent.BUTTON_ID, this.id)]); 		}				/*private function onNextClick(e:MouseEvent):void {  			RollOverButton(btnNext).removeEvents();			btnNext.removeEventListener(MouseEvent.CLICK, onNextClick);			TweenMax.to(this, 0.4, {scaleX:0, scaleY:0, ease:Back.easeIn, onComplete:this.dispatchEvent, onCompleteParams:[new ButtonIdEvent(ButtonIdEvent.BUTTON_ID, this.id)]});		}*/				public function set isStarted(value:Boolean):void {			_isStarted = value;		}	}}