package com.zyrtec.dogmatch.game{		import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.dogmatch.controller.DogMatchMain;	import com.zyrtec.dogmatch.events.DogMatchEvent;	import com.zyrtec.dogmatch.model.DMModel;	import com.zyrtec.dogmatch.model.SoundData;	import com.zyrtec.dogmatch.view.circles.Dogs;	import com.zyrtec.dogmatch.view.circles.Holder;	import com.zyrtec.dogmatch.view.circles.LevelTimer;	import com.zyrtec.analytics.Tracking;		import flash.display.*;	import flash.events.*;	import flash.sampler.StackFrame;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;
		// =================================================	// ================ @Class	// =================================================		public class DogMatchGame extends Game	{		//display objs				private var _stageRef:Stage;		private var _correctOnePopup:MovieClip; //feedback clip		private var _wrongOnePopup:MovieClip;		private var _timeUpPopup:MovieClip;		//bools		private var _isGameOver:Boolean = false;			//whether the game is over		private var _passedLevel:Boolean = false;			//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;				//whether timer has started running		private var _paused:Boolean = false;		private var _levelsComplete:Boolean = false;		//values for game			private var _gameWidth:int;		private var _gameHeight:int;		private var _holderX:int = 186;			private var _holderY:int = 411;		private var _gameLevel:int;		private var _score:String="";						// score aka Time		private var _numMatches:int;						//number of matches		private var _numLevels:int;							//matches left		private var _numLives;								//number of lives		private var _levelScore:int;						//store level score		//private var _levelScoresArray:Array;				//store all level scores		private var _count:int = 0;		private var _trackingCount:int;		private var _matchingID:int;		private var _matchOwner:MovieClip;		private var _missedIdArray:Array;		//game specific vars		private var _clockTimer:BasicFrameTimer;			//scoreboard timer		private var _holder:Holder;		private var _dogArray:Array;		private var	_model:DMModel;							// Game Model (Singleton)		private var myDelay:Timer;		private var _gameOverMC:MovieClip;		private var _className:String;		private var _classRef:Class;		// =================================================		// ================ @Constructor		// =================================================		public function DogMatchGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);						_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = DMModel.getInstance();			_stageRef = _model.stageRef;			trace("MODEL STAGEREF " + _stageRef);					}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 			_model.score=0;			_model.livesString = "";			_model.displayScore = "";			_model.levelsCompleted = false;			Tracking.track(Tracking.L2_PERFECTPAIRING_START); //tracking						_trackingCount=0;			_levelScore = 0;			_gameLevel = 1;			_levelsComplete = false;			_isGameOver = false;			_isStarted = false;			_numLives = 4;			_numMatches = 0;			_numLevels = 18; //don't seem to be using this anymore			_count = 0;						trace("NEW GAME!!! HERES SOME FUN VALUES: " + "_model.score: " + _model.score + " _model.livesString: " + _model.livesString + " _model.displayScore: " + _model.displayScore + " _model.levelsCompleted: " + _model.levelsCompleted + " _levelsComplete: " + _levelsComplete + " _numMatches: " + _numMatches + " OKAY THATS ENOUGH VALUES ALREADY.... YEESH!");  											if (_clockTimer==null) {				//_clockTimer = new BasicFrameTimer(31, 3600000000, 0, true);				_clockTimer = new BasicFrameTimer(31, 0, 3540000, true); //note to becky - i changed this so the timer would stop at 59 minutes			} else {				_clockTimer.reset();			}			if (_holder==null) {			// add if null				_holder= new Holder(_gameLevel);			} 				_missedIdArray = [];						//			_holder.lines();			_holder.importTimer();			_holder.importOwners(_gameLevel);			_holder.getLevelOwner(_gameLevel);						this.addChild(_holder);			_holder.x = _holderX;			_holder.y = _holderY;						_matchOwner=_holder.matchOwner;			_matchingID= _matchOwner.id;			trace("_matchingID: " + _matchingID);						updateScoreBoardLives();			updateScoreBoard();				updateScoreBoardPairs();//update the scoreboard			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, DogMatchMain.TIME, "00:00:00" ) );			_holder.resetHighlight(); //reset highlight state of circles						 			_className = "GameOverMC";			_classRef = getDefinitionByName(_className) as Class;			_gameOverMC = new _classRef;			if (_gameOverMC==null) {			// add if null				_gameOverMC= new GameOverMC();			}						this.addChild(_gameOverMC);			_gameOverMC.visible = false;			_gameOverMC.x = 500;			_gameOverMC.y = 225;						} 				//FUNCTION : NEW LEVEL - CALLED AFTER NEW GAME AND BEFORE START OF NEW LEVEL		/*override public function newLevel():void		{ 						_holder.resetHighlight(); //reset highlight state of circles		} */				//FUNCTION: make new dog level		public function newGameLevel():void{			trace("new Game Level called");			trace("current game level is: " +_gameLevel);			_gameLevel++;			trace("new game Level is: " + _gameLevel);						//if new level is 18 or less:			if ( _gameLevel <= _numLevels ){				_holder.resetHighlight();				_holder.getLevelOwner(_gameLevel);							//if new level is 19:			}else if ( _gameLevel == _numLevels +1 ){				trace(" MISSED MATCH GAME LEVELS ADDED HERE ");				trace("_missedIdArray[0]: " + _missedIdArray[0]);				_holder.resetHighlight();				_holder.getMissedLevels(_missedIdArray[0]);						//if new level is 20:				}else if ( _gameLevel == _numLevels +2 ){			 trace("_missedIdArray[1]: " + _missedIdArray[1]);														_holder.resetHighlight();				_holder.getMissedLevels(_missedIdArray[1]);			}						_matchOwner=_holder.matchOwner;			_matchingID= _matchOwner.id;			myDelay = new Timer(500);			myDelay.addEventListener(TimerEvent.TIMER, callAnimation);			myDelay.start();					}		//FUNCTION:delayed call to animate in		function callAnimation(event:TimerEvent):void{			_holder.animateIn(_gameLevel);			myDelay.stop();		}		 				 //FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER		override public function runGame():void		{ // on game tick function       			// call custom functions here			if( _numMatches == _numLevels ){				_levelsComplete = true;					_isGameOver = true;				//_trackingCount++;			}			if ( _numLives <= 1 ){				_isGameOver = true;			}									checkforEndGame();				_holder.updateCountDownTimer(_paused);				_clockTimer.updateByMilliseconds();				updateScoreBoard();					}				//FUNCTION : RESUME GAME		override public function resumeGame():void		{			//addEvents();			_clockTimer.stopPauseTime();			_paused = false;		}				//FUNCTION : DESTROY LISTENERS		override public function destroy():void		{			_clockTimer.removeEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp);			_clockTimer.stop();			removeEvents();			_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			//animate circles etc in			_holder.animateIn(_gameLevel);			TweenMax.delayedCall(1.5, onAnimatedIn, null); //delay the 3,2,1 go animation		}						//FUNCTION : ADD EVENTS		public function addEvents():void		{			//trace("game.addEvents");			_holder.addEventListener(DogMatchEvent.LEVEL_TIME_UP2, levelTimeUp2);			_holder.addEventListener(DogMatchEvent.CIRCLE_CLICK, onCircleClick);						_holder.addEvents();			if (!_isStarted) {				_isStarted = true;				_clockTimer.addEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp, false, 0, true);				_clockTimer.start();			}			_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			_holder.removeEvents();		}				//FUNCTION : RESET GAME		public function reset():void		{			if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(31, 36000000000, 0, true); //if need time limit in milliseconds, set here			} else {				_clockTimer.reset();				updateScoreBoardLives();				updateScoreBoard();				updateScoreBoardPairs();				_holder.resetHighlight(); //reset highlight state of circles			}		}			// =================================================		// ================ @Workers		// =================================================			//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 						if (_isGameOver) {						destroy();				if(_trackingCount<1){					Tracking.track(Tracking.L2_PERFECTPAIRING_END); //tracking					_trackingCount++;				}				if (_levelsComplete){					_model.levelsCompleted = true;					_model.score =((_clockTimer.milliseconds) - ((_numLives -1) * 5000));					var livesBonus:int = (((_numLives - 1) * 5000) /1000);//lives - one bc lives is defined at 4. for 4 frames of the lives mc. 0 lives, 1, 2, 3.					_model.livesString =livesBonus.toString();					//trace("_count: " + _count);						if(_count==0){																TweenMax.delayedCall(1.5, showGameOverGood);//show proper screen						}else{							//trace("already fired good gameover screen")						}							/*TweenMax.to(_gameOverMC, 0.4, {delay:1.75, scaleX:1, scaleY:1, ease:Back.easeOut});							//TweenMax.to(_gameOverMC, 0.4, {delay:3.5, scaleX:0, scaleY:0, alpha:0, ease:Back.easeOut});							TweenMax.delayedCall(0.5, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_HAPPY,false,0, 0, 1)]);			*/					_count++;					TweenMax.delayedCall(3, dispatchEvent, [new Event(GAME_OVER)]); 									}else{ //levels were not completed					_model.levelsCompleted = false;					_model.score = 0;					//trace("_count: " + _count);						if(_count==0){							TweenMax.delayedCall(1.5, showGameOverBad);			//show proper screen						}else{							//trace("already fired bad gameover screen")						}						_count++;					/*TweenMax.to(_gameOverMC, 0.4, {delay: 1.75, scaleX:1, scaleY:1, ease:Back.easeOut});					TweenMax.to(_gameOverMC, 0.4, {delay: 3.5, scaleX:0, scaleY:0, alpha:0, ease:Back.easeOut});					TweenMax.delayedCall(0.5, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_SAD, false,0, 0, 1)]);			*/					TweenMax.delayedCall(3, dispatchEvent, [new Event(GAME_OVER)]); 				}			} else{						///everytime it runs:				updateScoreBoardPairs(); 							//update lives and matches on scoreboard				updateScoreBoardLives();				updateScoreBoard(); 			}		}				private function showGameOverGood():void{			//tween in game over			_gameOverMC.visible = true;			_gameOverMC.gotoAndPlay("correct");					}		private function showGameOverBad():void{			//tween in game over			_gameOverMC.visible = true;			_gameOverMC.gotoAndPlay("incorrect");					}				//FUNCTION : UPDATE THE SCOREBOARD TIME CLOCK		private function updateScoreBoard():void		{			//trace("updateScoreBoard _levelsComplete: " + _levelsComplete);			var timeConverter:TimeConverter = new TimeConverter();			//trace(" real time: " + _clockTimer.milliseconds);			var timeInSeconds:Number;			var timeString:String;						if (_isGameOver){				if(_levelsComplete){					trace("levels completed!");					_model.levelsCompleted = true;					timeInSeconds = ((_clockTimer.milliseconds) - ((_numLives -1) * 5000));		//.seconds*1000;					_model.score = timeInSeconds; //set score to be time minus lives bonus so minutes conversion in leaderboard is correct					timeString = timeConverter.convertTime(timeInSeconds, "milliseconds");					_model.displayScore = timeString;				}				else{ //levels werent completed					trace("didnt complete the levels! ");					_model.levelsCompleted = false;					timeString = "Incomplete";					_model.displayScore = "00:00:00"; //leaderboard will display incomplete if this is the value of displayScore									}			}else{ //game isnt over				timeInSeconds = _clockTimer.milliseconds;		//.seconds*1000;				timeString = timeConverter.convertTime(timeInSeconds, "milliseconds");				dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, DogMatchMain.TIME, String(timeString) ) );				_model.displayScore = timeString;			}					}				//FUNCTION : UPDATE SCOREBOARD PAIRS		private function updateScoreBoardPairs():void		{			dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, DogMatchMain.PAIRS_REMAINING, String(_numMatches+"/"+(_numLevels).toString() )) );   					}				//FUNCTION : UPDATE SCOREBOARD LIVES		private function updateScoreBoardLives():void		{						if (_isGameOver){				if(_levelsComplete){					var livesBonus:int = (((_numLives - 1) * 5000) /1000);//lives - one bc lives is defined at 4. for 4 frames of the lives mc. 0 lives, 1, 2, 3.					_model.livesString =livesBonus.toString();										//_model.livesString = String(("- " + (((_numLives - 1) * 5000).toString()) + " seconds"));							}			}else{ //game isnt over				dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, DogMatchMain.LIVES, _numLives.toString() ));   							}			//dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, DogMatchMain.LIVES, _numLives.toString() ));   		}				//FUNCTION: CHECK MATCH		private function checkMatch(clickedId:uint):Boolean		{			//trace("matchowner id to check against: " + );			var isMatch:Boolean = false;			trace("_matchingID in check match is: " + _matchingID);			if (_matchingID == clickedId) {					isMatch = true;			} 				trace("*********************Is it a match?  " + isMatch + "!!!***********");				return isMatch;		}				//FUNCTION: CIRCLE CLICK		private function onCircleClick(e:DogMatchEvent):void		{						//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_FLIP_OVER,false,0, 0, 1));			//_clockTimer.startPauseTime();   			//_paused = true;			//_holder.removeEvents();			_holder.stopLevelTimer();			trace("clicked ID (e.data): " + (e.data));							var circleClickedID:int = (e.data);				if(checkMatch(e.data)) { //IT'S A MATCH					//addEvents();					//trace("ITS A MATCH!!!");					if (_correctOnePopup==null) {						_correctOnePopup = new CorrectOneMC();						_correctOnePopup.x = 480;						_correctOnePopup.y = 100;						_correctOnePopup.mouseEnabled = false;						_correctOnePopup.mouseChildren = false;						_correctOnePopup.scaleX = _correctOnePopup.scaleY = 0.7;						addChild(_correctOnePopup);					}					// higlight correct circle					_holder.highlightChoice(e.data, true);					_correctOnePopup.visible = true;					_correctOnePopup.gotoAndPlay(2);										dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT,false,0, 0, 1));					_numMatches++;						//trace("*************** IT'S A MATCH AND NUM MATCHES == "+_numMatches);					//_pairsRemaining = (_totalTiles/2)-_numMatches;					updateScoreBoardPairs();					updateScoreBoardLives();						//_model.matchTimeStampsArray.push(_clockTimer.milliseconds);//cheat checking										if (_numMatches == _numLevels){			//prepare for 20 levels and 18 total matches, must end game)						TweenMax.delayedCall(.75,_holder.animateOut);						_levelsComplete = true;						_isGameOver = true;						//_trackingCount++;					}else{						TweenMax.delayedCall(1,_holder.animateOut);						TweenMax.delayedCall(1,newGameLevel);						}														}else{					//NOT A MATCH					_missedIdArray.push(_matchingID);					trace("just pushed id '" + _matchingID + "' into _missedIdArray");					trace("_missedIdArray now equals: " + _missedIdArray);					if (_wrongOnePopup==null) {						_wrongOnePopup = new WrongOneMC();						_wrongOnePopup.x = 480;						_wrongOnePopup.y = 100;						_wrongOnePopup.mouseEnabled = false;						_wrongOnePopup.mouseChildren = false;						_wrongOnePopup.scaleX = _wrongOnePopup.scaleY = 0.7;						addChild(_wrongOnePopup);					}					_holder.highlightChoice(e.data, false);					_wrongOnePopup.visible = true;					_wrongOnePopup.gotoAndPlay(2);					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,0, 0, 1));					//TweenMax.delayedCall(0.3, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,0, 0, 1)]);					_numLives--;					updateScoreBoardLives();										if (_numLives <=1){						_isGameOver = true						//_trackingCount++;						TweenMax.delayedCall(.75, _holder.animateOut);					//	TweenMax.delayedCall(.65, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_BUZZ,false,0, 0, 1)]);					}else{						TweenMax.delayedCall(1, _holder.animateOut);						TweenMax.delayedCall(1.5, newGameLevel);										}				}				checkforEndGame();		}				// =================================================		// ================ @Handlers		// ================================================				//FUNCTION : ON TILES ANIMATED IN		private function onAnimatedIn(e:AnimationEvent = null):void		{			dispatchEvent(new Event(Game.NEW_LEVEL));		// this starts the level in, can add delay			//TweenMax.delayedCall(3.2, _holder.addEvents);		}				//FUNCTION : ON CLOCK TIMER UP		private function onClockTimerUp(e:Event):void		{			_isGameOver = true;		}				//FUNCTION: ON LEVEL TIME UP		private function levelTimeUp2(e:DogMatchEvent):void{			trace(" you lose a life!!! ");			//play you-ran-out-of-time noise			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,1, 0, 1));			_holder.removeEvents(); 			_missedIdArray.push(_matchingID);			trace("just pushed id '" + _matchingID + "' into _missedIdArray");			trace("_missedIdArray now equals: " + _missedIdArray);						if (_timeUpPopup==null) {				_timeUpPopup = new TimeUpMC();				_timeUpPopup.x = 480;				_timeUpPopup.y = 100;				_timeUpPopup.mouseEnabled = false;				_timeUpPopup.mouseChildren = false;				_timeUpPopup.scaleX = _timeUpPopup.scaleY = 0.7;				addChild(_timeUpPopup);			}			_timeUpPopup.visible = true;			_timeUpPopup.gotoAndPlay(2);			_numLives--;			updateScoreBoardLives();			TweenMax.delayedCall(1,_holder.animateOut);			if (_numLives <=1){				_isGameOver = true			}else{				TweenMax.delayedCall(1,newGameLevel);			}					}				//FUNCTION : ON KEY DOWN - CHECK FOR P PAUSE		private function keyDownHandler(event:KeyboardEvent):void{  			trace("pause... NOT");							/*if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); //prevent tile roll and click				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			} */		}				// =================================================		// ================ @Getters / Setters		// =================================================				//public function get gameLevel():int { return _gameLevel};		public function set gameLevel(value:int):void { _gameLevel = value};				/*public function get gameWidth():int { return _gameWidth};		public function set gameWidth(value:int):void { _gameWidth = value};				public function get gameHeight():int { return _gameHeight};		public function set gameHeight(value:int):void { _gameHeight = value};*/		}}