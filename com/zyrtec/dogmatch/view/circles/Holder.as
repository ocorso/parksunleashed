package com.zyrtec.dogmatch.view.circles{	import com.bigspaceship.events.AnimationEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.zyrtec.dogmatch.events.DogMatchEvent;	import com.zyrtec.dogmatch.game.DogMatchGame;	import com.zyrtec.dogmatch.model.DMModel;	import com.zyrtec.dogmatch.view.circles.Dogs;	import com.zyrtec.dogmatch.view.circles.LevelTimer;		import flash.display.*;	import flash.geom.Matrix;	import flash.events.MouseEvent;	import flash.utils.getDefinitionByName;				// =================================================		// ================ @Class		// =================================================	public class Holder extends Sprite	{		private var _gameWidth:int = 940;		private var _gameHeight:int = 600;				//private var _orderNum:uint; 			//where the front tile fits in the picture puzzle		private var _startX:Number; 			//the x of the correct position of the tile		private var _startY:Number; 			//the y of the correct position of the tile		private var _randomNum:Number;		private var _numDogs:int = 18;		private var _numOwners:int = 18;		private var _id:uint;		private var _currentID:int;				//to keep track of matching outer circle				private var _gameLevel:int;		private var _dogArray:Array;			//array from library		private var _newDogArray:Array;			//copy to mess with		private var _ownerArray:Array;   		//array from library		private var _newOwnerArray:Array;  		//copy to mess with		private var _shuffledOwnersArray:Array;	//shuffle center circles to force randomized levels		private var _levelDogsArray:Array;		//array of dogs used on current level		private var _shuffledDogsArray:Array; 	//shuffled version of ^^		private var _levelObjHolder:MovieClip;  		//mc that holds the dog circles		private var _matchDog:MovieClip; 		//current right answer dog		private var _matchOwner:MovieClip;		private var _levelDog1:MovieClip; 		//random dogs		private var _levelDog2:MovieClip;		private var _levelDog3:MovieClip;				private var _model:DMModel;		private var _dogs:Dogs;		private var _owners:Owners;			private var _levelTimer:LevelTimer;		private var _countdownTimerClip:MovieClip;		private var _lineHolderMC:Shape;		private var _mxBox:Matrix;		// =================================================		// ================ @Constructor		// =================================================		public function Holder(gameLevel:int)		{			_model= DMModel.getInstance();			_gameLevel= gameLevel;			//trace("holder game level passed from Game: " + _gameLevel);	//		_topLeftLine = new TopLeftLineMC;			_dogs= new Dogs;			_dogArray = _dogs.dogArray;			_owners = new Owners;			_ownerArray = _owners.ownerArray;			_levelTimer = new LevelTimer(_gameLevel);			_countdownTimerClip = _levelTimer.countdownTimerClip;			_newOwnerArray = [];			_newDogArray = [];			_levelDogsArray= [];			//importDogs(_gameLevel);					}		// =================================================		// ================ @Callable		// =================================================		public function importTimer():void		{			_levelTimer.init();			this.addChild(_countdownTimerClip);			_countdownTimerClip.x = 292;			_countdownTimerClip.y = -175;			_countdownTimerClip.alpha = 0;			_countdownTimerClip.scaleX= 0;			_countdownTimerClip.scaleY= 0;		}				public function importDogs():void{						//get Dogs from Dogs class 			_newDogArray = _dogArray.slice(); 					//copy array to mess with			_newDogArray.splice(0,1);							//set up new level of dogs and knock off element 0 so we have dogs 1-18, not 0-17			//trace("original _newDogArray: " + _newDogArray);		}				public function importOwners(_level:int):void{			//trace("holder import owners game level: " + _gameLevel);			_newOwnerArray = _ownerArray.slice(); 				//copy array to new one to mess with			_newOwnerArray.splice(0,1);							//knock off empty first element. now starts with element 1			_shuffledOwnersArray = shuffle(_newOwnerArray);		//shuffle new array to keep new games randomized			//getLevelOwner(_level);								//set up new level of owners		}		public function lines():void{			if (_lineHolderMC == null){			_lineHolderMC = new Shape;			_mxBox = new Matrix();			_mxBox.createGradientBox(200, 200);			addChild(_lineHolderMC);			}			/* _topLeftLine.x = 292;			 _topLeftLine.y = -175;*/		 }		public function clearLines():void{						_lineHolderMC.graphics.clear();		}				public function getMissedLevels(missedId:int):void{			//trace("Here is the match you missed! " + missedId);						importOwners(missedId);			var i:int;			for (i=0; i<_shuffledOwnersArray.length; i++) {				//i=1 to account for the arrays first element being 0				if (_shuffledOwnersArray[i].id == missedId) {			//THERE IS NO _newDogArray[0] first element is _newDogArray[1]					_matchOwner = _shuffledOwnersArray[i]; 					//currentDog is matching dog for the level				}			}			importDogs();			var j:int;			for (j=0; j<_newDogArray.length; j++) {				//i=1 to account for the arrays first element being 0				if (_newDogArray[j].id == missedId) {			//THERE IS NO _newDogArray[0] first element is _newDogArray[1]					_matchDog = _newDogArray[j]; 					//currentDog is matching dog for the level					_newDogArray.splice(j, 1);						// new array minus the matching dog					}			}			_levelDogsArray = [];			_levelDogsArray.push(_matchDog, _levelDog1, _levelDog2, _levelDog3);			_randomNum = new Number();			var b:int;												//get 3 random dogs ( no repeats )			for (b=1; b<4; b++){				_randomNum = (Math.floor(Math.random() * ((16-b) - 1 + 1)) + 1);				_levelDogsArray[b]= _newDogArray[_randomNum];				_newDogArray.splice(_randomNum, 1);			}			_shuffledDogsArray = [];			_shuffledDogsArray = shuffle(_levelDogsArray);				placePups(_shuffledDogsArray);										}				//***FUNCTION: CALLED FROM DOGMATCHGAME to get center circle for new level. array of center circs is already shuffled. yaaay.		public function getLevelOwner(_level:int):void		{				_level--;			_matchOwner= _shuffledOwnersArray[_level]; 			//randomly shuffled, the element in position _level is the first center circle. its id does not match the current level			trace("match Owner: " + _matchOwner);			trace("match Owner id: " + _matchOwner.id);			_currentID = _matchOwner.id;			importDogs();			getNewLevelDogs(_currentID);						//pass outer circle function the id of the center circle it must match						this.addChild(_matchOwner);							//add match dog to holder			_matchOwner.x = 292;			_matchOwner.y = -175;			_matchOwner.alpha = 0;								//make mini and invisible			_matchOwner.scaleX=.01;			_matchOwner.scaleY=.01;		}					//***FUNCTION : get dogs for new level			public function getNewLevelDogs(ownerID:int):void		{				var j:int;			for (j=0; j<_newDogArray.length; j++) {				//i=1 to account for the arrays first element being 0				if (_newDogArray[j].id == ownerID) {			//THERE IS NO _newDogArray[0] first element is _newDogArray[1]				_matchDog = _newDogArray[j]; 					//currentDog is matching dog for the level				_newDogArray.splice(j, 1);						// new array minus the matching dog					}			}													trace("match dog: " + _matchDog);			trace("match dog id: " + _matchDog.id);						_levelDogsArray.push(_matchDog, _levelDog1, _levelDog2, _levelDog3);			_randomNum = new Number();			var b:int;												//get 3 random dogs ( no repeats )			for (b=1; b<4; b++){				_randomNum = (Math.floor(Math.random() * ((16-b) - 1 + 1)) + 1);				_levelDogsArray[b]= _newDogArray[_randomNum];				_newDogArray.splice(_randomNum, 1);			}						_shuffledDogsArray = shuffle(_levelDogsArray);	//shuffle the order of the dogs in the array			//addEvents();   								//add listeners to pups															//trace("_shuffledDogsArray: " + _shuffledDogsArray); 						trace("_shuffledDogsArray: " + _shuffledDogsArray);			placePups(_shuffledDogsArray);					//Place dogs in random positions		}					//***FUNCTION: SHUFFLES ELEMENT ORDER IN ARRAY		public function shuffle(_unshuffled:Array):Array{						var _shuffled:Array = [];			while (_unshuffled.length > 0) {				_shuffled.push(_unshuffled.splice(Math.round(Math.random() * (_unshuffled.length - 1)), 1)[0]);				}			return _shuffled;			}				//***FUNCTION: animate objects in		public function animateIn(level:int):void		{			trace("game level in Holder animate in : " + level);			TweenMax.to(_matchOwner, 1, {delay:0.25, scaleX:1, scaleY:1, alpha:1, ease:Elastic.easeOut});			resetLevelTimer(level);			TweenMax.to(_countdownTimerClip, 1, {delay:0.25, scaleX:1, scaleY:1, alpha:1, ease:Elastic.easeOut});			var i:uint;			for (i= 0; i<4; i++){					TweenMax.to(_shuffledDogsArray[i], 1, {delay:(.5 + (.1* i)), scaleX:1, scaleY:1, alpha:1, ease:Elastic.easeOut});			}								if(level>1){								addEvents();				trace("level is >1, added events");			}		//	TweenMax.delayedCall(2, onHoverShowLine);			/*if(level==1){				TweenMax.delayedCall(6, addEvents);					trace("added events first time");			}else{				TweenMax.delayedCall(1, addEvents);					trace("added events second+ time");							}*/		}		//***FUNCTION: animate objects out		public function animateOut():void		{	trace(" animate out ");			TweenMax.to(_matchOwner, .5, {scaleX:0, scaleY:0, alpha:0, ease:Quart.easeOut});			TweenMax.to(_countdownTimerClip, .5, {scaleX:0, scaleY:0, alpha:0, ease:Quart.easeOut});			clearLines();			var i:uint;			for (i= 0; i<4; i++)			{					TweenMax.to(_shuffledDogsArray[i], .5, {scaleX:0, scaleY:0, alpha:0, ease:Quart.easeOut, onComplete:stopLevelTimer});			}					}			//***FUNCTION: update level timer		public function updateCountDownTimer(_paused:Boolean)		{					_levelTimer.updateCountdownMeter(_paused);		}				//FUNCTION: add events to pups on level		public function addEvents():void{			var i:uint;			for (i=0; i<_shuffledDogsArray.length; i++){				trace(_shuffledDogsArray[i] + " events added");				_shuffledDogsArray[i].buttonMode = true;				_shuffledDogsArray[i].addEventListener(MouseEvent.MOUSE_OVER, onDogOver, false, 0, true);				_shuffledDogsArray[i].addEventListener(MouseEvent.MOUSE_OUT, onDogOut, false, 0, true);				_shuffledDogsArray[i].addEventListener(MouseEvent.CLICK, onDogClicked, false, 0, true);				}						_levelTimer.addEventListener(DogMatchEvent.LEVEL_TIME_UP, levelTimeUp);		}				public function removeEvents():void{			var i:uint;			for (i=0; i<_shuffledDogsArray.length; i++){				trace(_shuffledDogsArray[i] + " events removed");				_shuffledDogsArray[i].buttonMode = false;				_shuffledDogsArray[i].removeEventListener(MouseEvent.CLICK, onDogClicked);				_shuffledDogsArray[i].removeEventListener(MouseEvent.MOUSE_OVER, onDogOver);				_shuffledDogsArray[i].removeEventListener(MouseEvent.MOUSE_OUT, onDogOut);			}				_levelTimer.removeEventListener(DogMatchEvent.LEVEL_TIME_UP, levelTimeUp);		}				public function highlightChoice(idNum:int, correct:Boolean):void {			if (correct){				_dogArray[idNum].gotoAndStop("ON");			}else if (!correct){				_dogArray[idNum].gotoAndStop("OFF");			}		}				public function resetHighlight():void{			var i = int; 			for (i=1; i<_dogArray.length; i ++){				_dogArray[i].gotoAndStop("none");					}		}				public function resetLevelTimer(level:int):void{				/*trace("GAME LEVEL IN HOLDER RESET TIME FUNC: " + _gameLevel);*/			//_levelTimer.resetLevelTimer(levelArray); 						_levelTimer.resetLevelTimer(level); 					}				public function startLevelTimer():void{						_levelTimer.startLevelTimer(); 					}		public function stopLevelTimer():void{						_levelTimer.stopLevelTimer(); 					}	// =================================================		// ================ @Workers   aka private funcs		// =================================================					//FUNCTION : Place Dogs Randomly in Positions, add to holder		private function placePups(_onscreenDogs:Array):void{						var i:int;			for (i=0; i<_onscreenDogs.length; i++){					//make mini and invis				this.addChild(_onscreenDogs[i]);				_onscreenDogs[i].scaleX = 0;				_onscreenDogs[i].scaleY = 0;				_onscreenDogs[i].alpha = 0;			}			//position			_onscreenDogs[0].x = 120;			_onscreenDogs[0].y = -75;						//			_onscreenDogs[1].x = 120;			_onscreenDogs[1].y = -275;			//			_onscreenDogs[2].x = 465;			_onscreenDogs[2].y = -75;			//			_onscreenDogs[3].x = 465;			_onscreenDogs[3].y = -275;			}				private function levelTimeUp(e:DogMatchEvent):void {			trace(" LEVEL TIME IS UP!!! ");			dispatchEvent(new DogMatchEvent(DogMatchEvent.LEVEL_TIME_UP2));		//dispatch to dogmatchgame 		}			private function onDogClicked(e:MouseEvent):void {			trace("dog " + e.currentTarget.id + " clicked");			removeEvents();			dispatchEvent(new DogMatchEvent(DogMatchEvent.CIRCLE_CLICK, e.currentTarget.id));			//draw lineskie to center pooch			_lineHolderMC.graphics.lineStyle(15, 0xb3f710, 1);			_lineHolderMC.graphics.moveTo(_countdownTimerClip.x,_countdownTimerClip.y);			_lineHolderMC.graphics.lineTo(e.currentTarget.x, e.currentTarget.y);			//_lineHolderMC.graphics.endFill();			 		}		private function onDogOver(e:MouseEvent):void {			_lineHolderMC.graphics.lineStyle(15, 0xb3f710, 1);			//_lineHolderMC.graphics.lineGradientStyle(GradientType.LINEAR,[0xc4fea8, 0xb3f710, 0xc4fea8],[1, 2, 1], [0, 255, 0], _mxBox);			_lineHolderMC.graphics.moveTo(_countdownTimerClip.x,_countdownTimerClip.y);			_lineHolderMC.graphics.lineTo(e.currentTarget.x, e.currentTarget.y);			//_lineHolderMC.graphics.endFill();		}		private function onDogOut(e:MouseEvent):void {			clearLines();		}								// =================================================		// ================ @setters		// =================================================		public function get matchOwner():MovieClip { return _matchOwner};		public function set matchOwner(value:MovieClip):void { _matchOwner = value};								}}