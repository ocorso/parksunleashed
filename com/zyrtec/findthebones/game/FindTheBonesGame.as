package com.zyrtec.findthebones.game{		import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.analytics.Tracking;	import com.zyrtec.findthebones.controller.FindTheBonesMain;	import com.zyrtec.findthebones.events.FindTheBonesEvent;	import com.zyrtec.findthebones.model.FTBModel;	import com.zyrtec.findthebones.model.SoundData;	import com.zyrtec.findthebones.view.objects.Grid;	import com.zyrtec.findthebones.view.objects.GridObject;		import flash.display.*;	import flash.events.*;	import flash.sampler.StackFrame;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;
		// =================================================	// ================ @Class	// =================================================		public class FindTheBonesGame extends Game	{		//display objs				private var _stageRef:Stage;		private var _correctOnePopup:MovieClip; //feedback clip		private var _wrongOnePopup:MovieClip;		private var _timeUpPopup:MovieClip;		//bools		private var _isGameOver:Boolean = false;			//whether the game is over		private var _passedLevel:Boolean = false;			//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;				//whether timer has started running		private var _blockNewLevel:Boolean = false;		private var _paused:Boolean = false;//		private var _levelCleared:Boolean = false;		//values for game			private var _gameWidth:int;		private var _gameHeight:int;		private var _holderX:int = 186;			private var _holderY:int = 411;		private var _gameLevel:int;		private var _levelToSend:int;		private var _score:String="";						// score aka Time		private var _numMatches:int;						//number of matches		private var _numLevels:int;							//matches left		private var _levelScore:int;						//store level score		//private var _levelScoresArray:Array;				//store all level scores		private var _count:int = 0;		private var _matchingID:int;		private var _currentObj:MovieClip;		private var _missedIdArray:Array;		//game specific vars		private var _clockTimer:BasicFrameTimer;			//scoreboard timer		private var _numLevelMatches:int;		private var _grid:Grid;		private var	_model:FTBModel;							// Game Model (Singleton)		private var myDelay:Timer;		private var _gameOverMC:MovieClip;		private var _className:String;		private var _classRef:Class;		// =================================================		// ================ @Constructor		// =================================================		public function FindTheBonesGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);						_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = FTBModel.getInstance();			_stageRef = _model.stageRef;			trace("MODEL STAGEREF " + _stageRef);					}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 			trace("new gameskie");			Tracking.track(Tracking.L3_GAME_BONES_START);  //tracking			_model.score= 0;			_model.displayScore = "";			_levelScore = 0;			_gameLevel = 0;			_levelToSend = 0;			_isGameOver = false;			_isStarted = false;			_blockNewLevel = false;			_numMatches = 0;			//_numLevels = 18; 			_count = 0;														if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(30, 0, 60000, false);			} else {				_clockTimer.reset();			}			if (_grid==null) {				_grid= new Grid(3, 6, 18);				_grid.x= 186;				_grid.y = 75;				addChild(_grid);			}			_grid.addChild(_grid.wordXnum);			_grid.wordXnum.alpha = 0;						_grid.visible = true;			newGameLevel();							_model.score = (_numMatches*100); 			_model.displayScore = String(_model.score);						updateScoreBoardPairs();//update the scoreboard			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, FindTheBonesMain.TIME, "01:00:00" ) );			 			_className = "GameOverMC";			_classRef = getDefinitionByName(_className) as Class;			_gameOverMC = new _classRef;			if (_gameOverMC==null) {			// add if null				_gameOverMC= new GameOverMC();			}						this.addChild(_gameOverMC);			_gameOverMC.visible = false;			_gameOverMC.x = 500;			_gameOverMC.y = 225;		} 				//FUNCTION: make new game level		public function newGameLevel():void{						_numLevelMatches = 0;			trace("current game level is: " +_gameLevel);			_gameLevel++;			trace("new game Level is: " + _gameLevel);						if(_gameLevel < 19){				_levelToSend = _gameLevel;			}else if(_gameLevel > 18){				_levelToSend = _gameLevel-18;			}else if(_gameLevel > 36){				_levelToSend = _gameLevel - 36;			}			if (!_isGameOver){				_grid.getMatchObjects(_gameLevel, _levelToSend);				_grid.getLevelObjects(_gameLevel);			}			if (_gameLevel >1){						_grid.addEventListener(FindTheBonesEvent.OBJECT_CLICK, onObjectClick);			}		}				//FUNCTION:delayed call to animate in		public function callAnimation(event:TimerEvent):void{		}		 		 //FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER		override public function runGame():void		{ // on game tick function       			// call custom functions here			if(_count < 2){				_clockTimer.updateByMilliseconds();				updateScoreBoard();				checkforEndGame();							}		}				//FUNCTION : RESUME GAME		override public function resumeGame():void		{			addEvents();			_clockTimer.stopPauseTime();			_paused = false;		}				//FUNCTION : DESTROY LISTENERS		override public function destroy():void		{	trace("count:" + _count);			trace("_grid.objectsRemoved: " + _grid.objectsRemoved);			/*if(_count <2){				if(!_grid.objectsRemoved){					_grid.clearObjects(_isGameOver);				}else{									_grid.removeChild(_grid.wordXnum);				}			}*/			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, FindTheBonesMain.TIME, "00:00:00" ) );			_clockTimer.stop();			removeEvents();		}				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			//animate objects in here			TweenMax.delayedCall(1.5, onAnimatedIn, null); //delay the 3,2,1 go animation		}						//FUNCTION : ADD EVENTS		public function addEvents():void		{			trace("game.addEvents");						if (!_isStarted) {				_isStarted = true;				//_clockTimer.addEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp, false, 0, true);				_clockTimer.start();			}			//took out the Pause cause cheaters suck			//_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			_grid.removeEvents();					_grid.removeEventListener(FindTheBonesEvent.OBJECT_CLICK, onObjectClick);		}				//FUNCTION : RESET GAME		public function reset():void		{			if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(30, 0, 60000, false);				//_clockTimer = new BasicFrameTimer(31, 36000000000, 0, true); //if need time limit in milliseconds, set here			} else {				_clockTimer.reset();				updateScoreBoard();				updateScoreBoardPairs();			}		}			// =================================================		// ================ @Workers		// =================================================			//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 	//to est end game								if (_isGameOver) {						destroy();				_model.score =(_numMatches*100);				//throw gameover animation in here, ten delay call below				_gameOverMC.visible = true;				_gameOverMC.gotoAndPlay(2);				if(_count == 1){					_grid.clearObjects(_isGameOver);					Tracking.track(Tracking.L3_GAME_BONES_END); //tracking					TweenMax.delayedCall(1.5, Tracking.track, [Tracking.L3_GAME_BONES_CONGRATS]);	//tracking the time is up screen 				}				TweenMax.delayedCall(2, dispatchEvent, [new Event(GAME_OVER)]); 					}else{				//			}		}				//FUNCTION : CHECK FOR END GAME		private function checkforEndLevel():void		{			if(!_isGameOver){				if(_numLevelMatches == 1){					//level is over					removeEvents();					_grid.clearLevelObjects();										if(!_blockNewLevel){						TweenMax.delayedCall(1.25, newGameLevel, null);					}				}			}		}			//FUNCTION : UPDATE THE SCOREBOARD TIME CLOCK		private function updateScoreBoard():void		{				var timeConverter:TimeConverter = new TimeConverter();			//trace(" real time: " + _clockTimer.milliseconds);			var timeInSeconds:Number;			var timeString:String;				//game isnt over				timeInSeconds = _clockTimer.milliseconds;		//.seconds*1000;				//trace("milliseconds: " + timeInSeconds);				timeString = timeConverter.convertTime(timeInSeconds, "milliseconds");				dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, FindTheBonesMain.TIME, String(timeString) ) );				_model.score = (_numMatches*100); 				_model.displayScore = String(_model.score);							if((timeInSeconds < 800) && (timeInSeconds > 0)){					trace("time up! game is overrr");					_isGameOver = true;					_count++;					dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, FindTheBonesMain.TIME, "00:00:00" ) );				}							if(timeInSeconds < 1750){					_blockNewLevel = true;				}									if (_isGameOver){					_model.score = (_numMatches*100); 					_model.displayScore = String(_model.score);				}		}				//FUNCTION : UPDATE SCOREBOARD PAIRS		private function updateScoreBoardPairs():void		{			dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, FindTheBonesMain.PAIRS_REMAINING, _model.displayScore));   		}				//FUNCTION: CHECK MATCH		private function checkMatch(clickedId:uint):Boolean		{			var isMatch:Boolean = false;			if (clickedId >50) {				isMatch = true;			} 				trace("Is it a match?  " + isMatch + "!!!");				return isMatch;		}				//FUNCTION: CIRCLE CLICK		private function onObjectClick(e:FindTheBonesEvent):void		{			trace("clicked ID (e.data): " + (e.data));				var objClickedID:uint = (e.data);				if(checkMatch(e.data)) { //IT'S A MATCH					trace("CORRECT!!!");										_grid.objectRxn(objClickedID,true);					if (_correctOnePopup==null) {						_correctOnePopup = new CorrectOneMC();												_correctOnePopup.mouseEnabled = false;						_correctOnePopup.mouseChildren = false;						_correctOnePopup.scaleX = _correctOnePopup.scaleY = 0.7;						addChild(_correctOnePopup);					}					_correctOnePopup.x = _grid.x + _grid.popupx;					_correctOnePopup.y = _grid.y + _grid.popupy;					_correctOnePopup.visible = true;					_correctOnePopup.gotoAndPlay(2);					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT,false,0, 0, 1));					_numMatches++;						_numLevelMatches++;					trace("model.displayScore: " + _model.displayScore);					trace("*** CORRECT AND NUM MATCHES == "+_numMatches + " AND NUM LEVEL MATCHES == "+_numLevelMatches);								}else{ //incorrect choice buddy.					_grid.objectRxn(objClickedID,false);					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,0, 0, 1));				}				updateScoreBoard();				checkforEndGame();				checkforEndLevel();				updateScoreBoardPairs();		}				// =================================================		// ================ @Handlers		// ================================================				//FUNCTION : ON TILES ANIMATED IN		private function onAnimatedIn(e:AnimationEvent = null):void		{			TweenMax.delayedCall(1, dispatchEvent, [new Event(Game.NEW_LEVEL)] );	// this starts the level in, can add delay			TweenMax.delayedCall(4.3, _grid.addEvents, null);			_grid.addEventListener(FindTheBonesEvent.OBJECT_CLICK, onObjectClick);					}				//FUNCTION : ON KEY DOWN - CHECK FOR P PAUSE		private function keyDownHandler(event:KeyboardEvent):void{  			if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); //prevent tile roll and click				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			} 		}				// =================================================		// ================ @Getters / Setters		// =================================================				//public function get gameLevel():int { return _gameLevel};		public function set gameLevel(value:int):void { _gameLevel = value};		}}