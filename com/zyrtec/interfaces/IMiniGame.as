package com.zyrtec.interfaces{	/**	 * Interface for mini-games to implement	 */	public interface IMiniGame	{		/**		 * Initializer for the game SWF, game should not begin unless this function has been called in parent SWF.		 * 		 * @param  completecallback - Function		 *              No arguments needed, is meant to let the parent SWF know that the game session has ended and is ready to close		 *		 * 		 * @param leaderboardcallback - Function		 *			- Argument -		 * 				Object: {		 *                  UserID: string user id,		 * 					GameID: integer game id,		 *              	SessionID: string session id,		 * 					Stars: integer stars earned		 *					Data: AES encrypted score and score data		 *						Object: { ... }		 *					}		 * 				}		 *		 * 		 * @param  logincallback - Function		 *              No arguments needed, is meant to let the parent SWF know that the login screen should be shown		 *		 * 		 * @param  registercallback - Function		 *              No arguments needed, is meant to let the parent SWF know that the registration screen should be shown		 *		 *		 * @param  gamedata: - Object		 * 			{		 *              uid: string user id,		 *              sid: string session id,		 * 				gid: integer game id,		 * 				name: string display name,		 *              cdn: string URL for CDN to retrieve files		 * 				shareURL: the game specific url to link the sharing to: ie "http://youtube.com/parksunleased"		 * 				badgeURL: string of filePath to the each game's badge image ie: "http://c679303.r3.cf2.rackcdn.com/main/game/L1/assets/images/highFlyerBadge.jpg";		 * 				** ALL OTHER ITEMS WITHIN THE OBJECT WILL BE GAME SPECIFIC **		 * 			};		 *		 * @return  void		 */		function initMiniGame(completecallback:Function, leaderboardcallback:Function, logincallback:Function, registercallback:Function, gamedata:Object):void;				/**		 * Returns an Object with data form the game session		 *		 * @return  scoredata: Object		 * 			 {		 *				displayValue: string		 * 			 }		 */		function getScore():Object;				/**		 * Initializes the game's data object, most likely to be used if a user logs in or registers via a prompt		 * within the game. The main game shell will need to call this to pass along data about the session to the 		 * current game.		 * 		 * @param  $o: - Object		 * 			{		 *              uid: string user id,		 *             	sid: string session id,		 * 				gid: integer game id,		 * 				name: string display name,		 *             	cdn: string URL for CDN to retrieve files		 * 				** ALL OTHER ITEMS WITHIN THE OBJECT WILL BE GAME SPECIFIC **		 * 			};		 *		 * @return  void		 */		function setGameData($o:Object):void;				/**		 * Passes in the results from the leaderboard service call to the game		 * 		 * @param 	$o: - Object		 *				{		 *					SessionName: String,		 *					TimeLeft: Int,		 *					Rank: String,		 * 					TopScore: String,		 *					Scores - Array: [		 * 						Object: {		 * 							order:int,		 * 							name:String,		 * 							score:String		 * 						}		 * 					]		 *				}		 */		function setLeaderBoard($o:Object):void;				/**		 * Will mute all sounds within game		 *		 * @param  bool  Boolean value asserting if sound is muted		 * @return void		 */		function muteGame($b:Boolean):void;				/**		 * Will cause game to quit and begin to unload assets		 *		 * @return  Boolean value asserting success of quit		 */		function gameQuit():Boolean;				/**		 * Will cause game to pause and resume when called		 * 		 * @param  bool  Boolean value asserting if sound is paused		 * @return void		 */		function gamePause($b:Boolean):void;	}//end interface	}//end package