package com.zyrtec.kiteflying.controller{	import com.bigspaceship.events.AnimationEvent;	import com.bigspaceship.utils.Out;	import com.greensock.TweenMax;	import com.greensock.easing.Back;	import com.greensock.plugins.AutoAlphaPlugin;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VisiblePlugin;	import com.zyrtec.kiteflying.model.KFModel;		import flash.display.DisplayObject;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;		import net.ored.util.StringUtils;
		public class FeedbackController extends EventDispatcher	{		private var _m		:KFModel;		public var view		:MovieClip;		public var extra	:MovieClip;		public var num		:Sprite;		private var _timer	:Timer;		private const __I	:Number = 1000;		private const __XOFF	:Number = 20; 		private const __YOFF	:Number = -7;		private var _yOrig	:Number;				// =================================================		// ================ @Callable		// =================================================		public function init():void		{						TweenPlugin.activate([VisiblePlugin]);			TweenPlugin.activate([AutoAlphaPlugin]);			_m		= KFModel.getInstance();						_timer	= new Timer(__I);			_timer.addEventListener(TimerEvent.TIMER, _animateOut);			_yOrig = view.y;			view.visible = false;		}				public function showRound($n:Number):void{									var roundNumber:String = $n.toString();			//var roundNumber:String = "10";						Out.status(this, "round "+roundNumber);						//clear out old			_removeExtra();			if (num){				view.roundsMC.units.removeChild(num);				num = null;			}						num			= new Sprite();			var v:Vector.<String> 	= StringUtils.explode(roundNumber);			var i:uint				= 0;			for each (var e:* in v) {				var n:Class			= getDefinitionByName("num"+e) as Class;				var digit:DisplayObject = new n();				digit.x 			= __XOFF*i;				digit.y				= __YOFF*i;				num.addChildAt(digit,0);				i++;			}			view.roundsMC.units.addChildAt(num,0);			view.gotoAndStop(KFModel.LABEL_ROUND);						animateIn();				}//end function		public function showGameOver():void{						view.gotoAndStop(KFModel.LABEL_GAME_OVER);			animateIn();			_timer.start();					}		public function showStreak($type:String):void{						Out.status(this, "show streak: "+ $type);			switch($type){				case KFModel.STREAK_TYPES[0] : extra = new Double();					extra.x = view.streakMC.x-80;					break;				case KFModel.STREAK_TYPES[1] : extra = new FourTime();					extra.x = view.streakMC.x-30;					break;				case KFModel.STREAK_TYPES[2] : extra = new EightTimes();					extra.x = view.streakMC.x-30;					break;				default : Out.error(this, "bad streak type"); extra = new MovieClip();			}			view.gotoAndStop(KFModel.LABEL_STREAK);			extra.y = -70;			view.addChild(extra);						animateIn();		}		// =================================================		// ================ @Workers		// =================================================		private function _removeExtra():void{			if (extra) {				view.removeChild(extra);				extra = null;			}					}		// =================================================		// ================ @Handlers		// =================================================		// =================================================		// ================ @Animation		// =================================================		public function animateIn():void{			TweenMax.to(view, .5,{scale: 1, autoAlpha:1, y: _yOrig+50, onComplete:_onAnimateIn, ease: Back.easeOut});		}		private function _onAnimateIn():void{			_timer.start();			dispatchEvent(new AnimationEvent(AnimationEvent.IN));		}		public function _animateOut($e:TimerEvent = null):void{				//oc: todo: tween out.			TweenMax.to(view, .5,{scale: .5, alpha:0, visible: false, y: _yOrig, onComplete:_onAnimateOut, ease: Back.easeOut});			_timer.reset();					}		private function _onAnimateOut():void{			_removeExtra();			dispatchEvent(new AnimationEvent(AnimationEvent.OUT));		}		// =================================================		// ================ @Getters / Setters		// =================================================				// =================================================		// ================ @Interfaced		// =================================================				// =================================================		// ================ @Core Handler		// =================================================				// =================================================		// ================ @Overrides		// =================================================				// =================================================		// ================ @Constructor		// =================================================		public function FeedbackController($mc:MovieClip, target:IEventDispatcher=null)		{			super(target);			view 	= $mc;				}//end constructor			}//end class}//end package