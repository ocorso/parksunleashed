package com.zyrtec.kiteflying.controller {		import com.bigspaceship.display.AnimationState;	import com.bigspaceship.events.AnimationEvent;	import com.bigspaceship.tween.easing.Back;	import com.bigspaceship.utils.Out;	import com.bigspaceship.utils.SimpleSequencer;	import com.g2.gaming.framework.FrameWorkStates;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.SoundManager;	import com.g2.gaming.framework.events.ButtonIdEvent;	import com.g2.gaming.framework.events.LevelScreenUpdateEvent;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.FastEase;	import com.greensock.easing.Linear;	import com.greensock.easing.Quad;	import com.greensock.easing.Strong;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VisiblePlugin;	import com.zyrtec.events.ZyrtecGameEvent;	import com.zyrtec.interfaces.IScreen;	import com.zyrtec.kiteflying.controller.scoreboard.KFScoreboardController;	import com.zyrtec.kiteflying.events.KiteFlyingEvent;	import com.zyrtec.kiteflying.game.KiteFlyingGame;	import com.zyrtec.kiteflying.model.KFModel;	import com.zyrtec.kiteflying.services.TheSoundOfMusic;	import com.zyrtec.kiteflying.view.screens.Background;	import com.zyrtec.kiteflying.view.screens.KFAbstractScreen;	import com.zyrtec.kiteflying.view.screens.KFGameOver;	import com.zyrtec.kiteflying.view.screens.KFLevelIn;	import com.zyrtec.kiteflying.view.screens.KFPauseHelp;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.net.URLRequest;	import flash.utils.Timer;
			public class KiteFlyingMain extends GameFramework {				private var _m				:KFModel;		private var _bg				:Background;//Main Screen				private var _endAnimation	:MovieClip; //game over animation		private var _ss				:SimpleSequencer;		private var _isGameIn		:Boolean = false;				private var _sounds			:Object;				//level in vars		private var _doShow321		:Boolean = true;		private var _timer			:Timer;		private const __INTERVAL	:Number = 4000;					// =================================================		// ================ @Callable		// =================================================		override public function init():void {						_m 	= KFModel.getInstance();			_m.addEventListener(KFModel.PAUSE, _pause,false, 0, true);			_m.addEventListener(SoundEvent.PLAY_SOUND, _soundHandler, false, 0,true);						_timer = new Timer(__INTERVAL);			_timer.addEventListener(TimerEvent.TIMER, _onTimer);						//add background			if (_bg == null){				_bg 				= new Background(new ScreenMainMC());				_bg.mc.x			= 70;				_bg.mc.y			= -_bg.mc.height;				addChild(_bg.mc);			}						if (game == null) {				game 	= new KiteFlyingGame();				game.x 	= KFModel.SWF_WIDTH/2;				addChild(game);			}						//set up scoreboad during game			if (scoreBoard == null) {				scoreBoard = new KFScoreboardController(new ScoreboardMC());				Out.info(this, "scoreboard width: "+scoreBoard.width);				scoreBoard.x  	= KFModel.SWF_WIDTH - scoreBoard.width*1.5 + 15;				scoreBoard.y	= 45;				addChild(scoreBoard);			}									///new level screen			if (levelInScreen == null) {				levelInScreen = new KFLevelIn(new ScreenLevelInMC());				levelInScreen.id = FrameWorkStates.STATE_SYSTEM_LEVEL_IN;				levelInScreen.x = (KFModel.SWF_WIDTH  - levelInScreen.width)/2 -50;				levelInScreen.y = (KFModel.GAME_HEIGHT - levelInScreen.height)/2;				addChild(levelInScreen); 			}						//game over screen //high scoreboard displayed			if (gameOverScreen==null) {				gameOverScreen 			= new KFGameOver(new ScreenGameOverMC());				gameOverScreen.x		= (KFModel.SWF_WIDTH-gameOverScreen.width)/2;				gameOverScreen.id 		= FrameWorkStates.STATE_SYSTEM_GAME_OVER;				gameOverScreen.visible	= false;				addChild(gameOverScreen);			}						//pause screen			if (pauseScreen==null) {				pauseScreen = new ScreenPauseHelpMC();				pauseScreen.id = FrameWorkStates.STATE_SYSTEM_PAUSE;				pauseScreen.x = KFModel.SWF_WIDTH/2;				pauseScreen.y = KFModel.SWF_HEIGHT/2;				pauseScreen.scaleX = pauseScreen.scaleY = 0;				addChild(pauseScreen);				//pauseScreen.visible = false;			}						//Set standard wait time between levels 			waitTime = 30;//= 1 second						//CREATE SOUND MANAGER //////////////////////			soundManager 	= new SoundManager();			_sounds			= new Object();						//register external sounds			Out.debug(this, "cdn: "+ _m.cdn);			var doLow:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.DO_LOW));			var re:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.RE));			var mi:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.MI));			var fa:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.FA));			var so:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.SO));			var la:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.LA));			var ti:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.TI));			var doHi:Sound				= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.DO_HI));			var gameOverSound:Sound		= new Sound(new URLRequest(_m.cdn+TheSoundOfMusic.GAME_OVER));						var powerUpSound:Sound 		= new KFModel.SOUND_MP3_POWER_UP as Sound;			var superPowerUpSound:Sound = new KFModel.SOUND_MP3_SUPER_POWER_UP as Sound;			var powerDownSound:Sound 	= new KFModel.SOUND_MP3_POWER_DOWN as Sound;			var levelInCount:Sound		= new KFModel.SOUND_MP3_COUNT as Sound			var goSound:Sound			= new KFModel.SOUND_MP3_GO as Sound;			//var ambientSound:Sound		= new KFModel.SOUND_MP3_AMBIENT as Sound;						soundManager.addSound(KFModel.SOUND_ID_DO_LOW, doLow);			soundManager.addSound(KFModel.SOUND_ID_RE, re);			soundManager.addSound(KFModel.SOUND_ID_MI, mi);			soundManager.addSound(KFModel.SOUND_ID_FA, fa);			soundManager.addSound(KFModel.SOUND_ID_SO, so);			soundManager.addSound(KFModel.SOUND_ID_LA, la);			soundManager.addSound(KFModel.SOUND_ID_TI, ti);			soundManager.addSound(KFModel.SOUND_ID_DO_HI, doHi);						soundManager.addSound(KFModel.SOUND_ID_SUPER_POWER_UP, superPowerUpSound);			soundManager.addSound(KFModel.SOUND_ID_POWER_UP,powerUpSound); 			soundManager.addSound(KFModel.SOUND_ID_POWER_DOWN,powerDownSound); 			soundManager.addSound(KFModel.SOUND_ID_COUNT,levelInCount); 			soundManager.addSound(KFModel.SOUND_ID_GO,goSound); 			soundManager.addSound(KFModel.SOUND_ID_GAME_OVER, gameOverSound);			//soundManager.addSound(KFModel.SOUND_ID_AMBIENT,ambientSound); 						//create timer and run it one time 			frameRate = _m.frameRate = 31; 						//SET INITIAL GAME STATE  //for these games, initial state will be instructions/play/leaderboard screen			switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_GAME); 		}		public function updateLeaderboard():void{			Out.status(this, "updateLeaderboard");			_m.addEventListener(ZyrtecGameEvent.ON_LEADERBOARD_RESULT, _onLeaderboardResults);			_m.shell.leaderboardcallback(_m.dataToSend);		}		private function _onTimer($e:TimerEvent):void
		{			Out.status(this, "_onTimer");			_timer.reset();			KiteFlyingGame(game).levelChangeEnd();			game.addEventListener(KFModel.SUPER_POWER_UP_END, _onLevelChangeEnd);
		}		private function _onLevelChangeEnd($e:KiteFlyingEvent):void{			
			Out.status(this, "_onLevelChangeEnd, is paused: "+paused);			game.removeEventListener(KFModel.SUPER_POWER_UP_END, _onLevelChangeEnd);			KiteFlyingGame(game).showElements();			if (paused) switchSystemState(FrameWorkStates.STATE_SYSTEM_PAUSE);			else switchSystemState(nextSystemState);					}		/*//FUNCTION : SET PARAMETERS FOR GAME - TBD IF NEEDED		public function setParameters(isLoggedIn:Boolean, userName:String):void {		_m.isLoggedIn = isLoggedIn;		_m.userName = userName;		}*/				// =================================================		// ================ @Workers		// =================================================				// =================================================		// ================ @Handlers		// =================================================		private function _soundHandler($e:SoundEvent):void
		{
					// TODO Auto-generated method stub
			
		}		private function _pause($e:Event):void{						KiteFlyingGame(game).removeEvents();			switchSystemState(FrameWorkStates.STATE_SYSTEM_PAUSE); 					}				//FUNCTION : ON PAUSE CLICKED		private function onPauseClicked(e:Event):void { //need to prevent the end level screen from overlapping			Out.status(this, "onPauseClicked");			_m.pause();		}		private function _checkPause($e:KiteFlyingEvent):void{			Out.status(this, "checkPause: "+ paused);			if (paused) switchSystemState(FrameWorkStates.STATE_SYSTEM_PAUSE);			else switchSystemState(nextSystemState);			}		private function _onLeaderboardResults($e:ZyrtecGameEvent):void{						_m.removeEventListener(ZyrtecGameEvent.ON_LEADERBOARD_RESULT, _onLeaderboardResults);			KFGameOver(gameOverScreen).updateLeaderboard();					}		// =================================================		// ================ @Animation		// =================================================		protected function _animateGameIn($e:Event = null):void{					if(_ss) _ss = null;			_ss		= new SimpleSequencer();			_ss.addEventListener(Event.COMPLETE, _sss);						if(KFAbstractScreen(gameOverScreen).std.state == AnimationState.IN) {								_ss.addStep(0,gameOverScreen, IScreen(gameOverScreen).animateOut,AnimationEvent.OUT);			}			_ss.addStep(0, _bg,_bg.animateIn, AnimationEvent.IN);			_ss.addStep(1,scoreBoard, IScreen(scoreBoard).animateIn,AnimationEvent.IN);			_ss.addStep(2,levelInScreen, IScreen(levelInScreen).animateIn,AnimationEvent.IN);			_ss.addStep(3,levelInScreen, IScreen(levelInScreen).animateOut,AnimationEvent.OUT);								_isGameIn = true; 			KiteFlyingGame(game).showElements();			_ss.start();		}		protected function _animateGameOut():void{					KFScoreboardController(scoreBoard).mc.windMeterMC.needleMC.rotation = 180;			Out.status(this, "animateGame OUT");			if(_ss) _ss = null;			_ss		= new SimpleSequencer();			_ss.addEventListener(Event.COMPLETE, _sss);			_ss.addStep(0, KiteFlyingGame(game).feedback, KiteFlyingGame(game).feedback.showGameOver,AnimationEvent.OUT);			_ss.addStep(2, _bg,_bg.animateOut, AnimationEvent.OUT);			_ss.addStep(3,scoreBoard, IScreen(scoreBoard).animateOut,AnimationEvent.OUT);			_ss.addStep(4, gameOverScreen, IScreen(gameOverScreen).animateIn,AnimationEvent.IN);					_isGameIn = false; 			KiteFlyingGame(game).hideElements();			_ss.start();		}				protected function _sss($e:Event = null):void{				Out.status(this, "sss"); 			if(_isGameIn){				game.resumeGame(); 				switchSystemState(nextSystemState);			}//end if					}//end function					// =================================================		// ================ @Getters / Setters		// =================================================				// =================================================		// ================ @Interfaced		// =================================================				// =================================================		// ================ @Core Handler		// =================================================				//FUNCTION : PLAY BUTTONS FROM VARIOUS SCREENS - HANDLE ANIMATION OF DIFFERENT SCREENS		override public function okButtonClickListener(e:ButtonIdEvent):void {			Out.status(this, "okClickHandler");			switch(e.id) {				case FrameWorkStates.STATE_SYSTEM_TITLE: 					//removeChild(titleScreen); 					//titleScreen.removeEventListener(ButtonIdEvent.BUTTON_ID,okButtonClickListener); 					//switchSystemState(nextSystemState);					break; 								case FrameWorkStates.STATE_SYSTEM_INSTRUCTIONS: 					instructionsScreen.removeEventListener(ButtonIdEvent.BUTTON_ID,okButtonClickListener); 					IScreen(instructionsScreen).removeEvents();					TweenMax.to(instructionsScreen, 0.6, {x:(KFModel.SWF_WIDTH/2-KFModel.INSTRUCTIONS_W/2), y:-KFModel.INSTRUCTIONS_H, ease:Back.easeIn, visible:false, onComplete:switchSystemState, onCompleteParams:[nextSystemState]});               						break;								case FrameWorkStates.STATE_SYSTEM_GAME_OVER: 					systemNewGame();					break; 								case FrameWorkStates.STATE_SYSTEM_PAUSE: 					paused = false;					pauseScreen.removeEventListener(ButtonIdEvent.BUTTON_ID,okButtonClickListener);					IScreen(pauseScreen).removeEvents();					TweenMax.to(pauseScreen, 0.6, {scaleX:0, scaleY:0, ease:Back.easeIn, visible:false, onComplete:function onResume():void {game.resumeGame(); switchSystemState(nextSystemState);}}); 						break; 								case FrameWorkStates.STATE_SYSTEM_LEVEL_IN: 					levelInScreen.removeEventListener(ButtonIdEvent.BUTTON_ID,okButtonClickListener);					IScreen(levelInScreen).animateOut();					break; 			}		}						//FUNCTION : DESTROY -- KILL ALL LISTENERS IN THE GAME FROM THE SHELL		public function destroy():void {			Out.status(this, "destroy()");						if (gameTimer!=null) {				gameTimer.removeEventListener(TimerEvent.TIMER, runGame);				gameTimer.stop();			}			KiteFlyingGame(game).destroy();						// STOP ALL SOUNDS !!						pauseScreen.removeEventListener(ButtonIdEvent.BUTTON_ID,okButtonClickListener);			game.removeEventListener(ScoreBoardUpdateEvent.UPDATE_TEXT,scoreBoardUpdateListener); 			game.removeEventListener(LevelScreenUpdateEvent.UPDATE_TEXT, levelScreenUpdateListener);			game.removeEventListener(SoundEvent.PLAY_SOUND, soundEventListener);			game.removeEventListener(SoundEvent.STOP_SOUND, soundEventListener); 			game.removeEventListener(Game.GAME_OVER, gameOverListener);			game.removeEventListener(Game.NEW_LEVEL, newLevelListener);			game.removeEventListener(Game.PAUSE, pauseListener);			removeEventListener(EVENT_WAIT_COMPLETE, waitCompleteListener);			game.removeEventListener(KFModel.LEVEL_CHANGE_END, _checkPause);			KFGameOver(gameOverScreen).removeEvents();			gameOverScreen.removeEventListener(ButtonIdEvent.BUTTON_ID, okButtonClickListener);						IScreen(pauseScreen).removeEvents();			pauseScreen.removeEventListener(ButtonIdEvent.BUTTON_ID, okButtonClickListener);					}		// =================================================		// ================ @Overrides		// =================================================						//FUNCTION : ON GAME START		override public function systemNewGame():void { 						Out.status(this, "system new game");			game.addEventListener(SoundEvent.PLAY_SOUND, soundEventListener,false, 0, true);			game.addEventListener(SoundEvent.STOP_SOUND, soundEventListener,false, 0, true);			game.addEventListener(Game.GAME_OVER, gameOverListener, false, 0, true);			game.addEventListener(Game.NEW_LEVEL, newLevelListener, false, 0, true);			game.addEventListener(Game.PAUSE, pauseListener, false, 0, true);			game.addEventListener(KFModel.LEVEL_CHANGE_END, _checkPause);			if (gameOverScreen.hasEventListener(ButtonIdEvent.BUTTON_ID)) gameOverScreen.removeEventListener(KFModel.PLAY_AGAIN, systemNewGame);			game.newGame();			_doShow321 = true;						switchSystemState(FrameWorkStates.STATE_SYSTEM_NEW_LEVEL); 		}  				//FUNCTION : ON LEVEL IN ("3...2...1...GO!")		override public function systemLevelIn():void {						switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE); //waits for animation done 			nextSystemState = FrameWorkStates.STATE_SYSTEM_GAME_PLAY; 			Out.status(this, "system level in screen");			if (_doShow321){				_doShow321 = false;				_animateGameIn();			}else{				KiteFlyingGame(game).levelChangeBegin();				_timer.start();			}			levelInScreen.addEventListener(SoundEvent.PLAY_SOUND, soundEventListener,false, 0, true);							}				//FUNCTION : ON GAME OVER - SHOW HIGH SCORES / REPLAY, etc		override public function systemGameOver():void {			Out.warning(this, "GAME OVER!");						KiteFlyingGame(game).removeEvents();			gameOverScreen.addEventListener(ButtonIdEvent.BUTTON_ID, okButtonClickListener);						//populate leaderboard with info we have from game user just played			KFGameOver(gameOverScreen).setStaticText();			gameOverScreen.visible	= true;						//call out to leaderboard, listen for asynch results			updateLeaderboard();						//to test templeaderboard ONLY -- COMMENT OUT FOR LIVE PUBLISH			//_m.leaderboardResults = _m.shell.leaderboardcallback(_m.dataToSend);				switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE);			nextSystemState = FrameWorkStates.STATE_SYSTEM_NEW_GAME;			_animateGameOut();		}				//FUNCTIO : ON SYSTEM PAUSE		override public function systemPause():void {			Out.status(this, " SYSTEM PAUSING");			paused = true;			IScreen(pauseScreen).addEvents();			pauseScreen.addEventListener(Game.PAUSE, _sss); 			pauseScreen.visible = true;			TweenMax.to(pauseScreen, 0.5, {scaleX:1, scaleY:1, ease:Back.easeOut, onComplete:function onPauseOut():void {IScreen(pauseScreen).addEvents(); pauseScreen.addEventListener(ButtonIdEvent.BUTTON_ID, okButtonClickListener, false, 0, true);}});         	   			switchSystemState(FrameWorkStates.STATE_SYSTEM_WAIT_FOR_CLOSE); 			nextSystemState = FrameWorkStates.STATE_SYSTEM_GAME_PLAY; 		}				// =================================================		// ================ @Constructor		// =================================================		public function KiteFlyingMain() {						FastEase.activate([Strong, Linear, Quad]);			TweenPlugin.activate([VisiblePlugin]);					}//end constructor	}//end class	}//end package