package com.zyrtec.kiteflying.game{	import com.adobe.protocols.dict.events.MatchEvent;	import com.bigspaceship.display.StandardButton;	import com.bigspaceship.utils.Out;	import com.carlcalderon.arthropod.Debug;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.Quad;	import com.zyrtec.analytics.Tracking;	import com.zyrtec.kiteflying.controller.FeedbackController;	import com.zyrtec.kiteflying.controller.MatchIndicator;	import com.zyrtec.kiteflying.controller.ParticlesController;	import com.zyrtec.kiteflying.controller.kite.KiteController;	import com.zyrtec.kiteflying.events.KiteFlyingEvent;	import com.zyrtec.kiteflying.model.KFLevels;	import com.zyrtec.kiteflying.model.KFModel;	import com.zyrtec.kiteflying.utils.MatchHelper;	import com.zyrtec.kiteflying.view.ui.SmokeParticle;		import flash.display.CapsStyle;	import flash.display.JointStyle;	import flash.display.LineScaleMode;	import flash.display.MovieClip;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.MouseEvent;		import net.ored.util.ORedUtils;
		public class KiteFlyingGame extends Game{				//Game Model		private var _m				:KFModel;				//bools		private var _isGameOver		:Boolean = false; //whether the game is over		private var _left			:Boolean = false;//whether left key is pressed		private var _right			:Boolean = false;//whether right key is pressed				//values for game			private var _gameLevel					:int = 1;		private var _score						:int=0;		private var _lvlScore					:int; //store level score		private var _lvlScoresArr				:Array; //store all level scores		private var _particlesTillLevelChange	:int = 3;		private var _isAlmostLevelChange		:Boolean = false;		private var _trio						:Number = 3;//treat spurts of spewed particles as trio's 		private var _isOneGoodInTrio			:Boolean = false;				//view controllers		public var _kite			:KiteController;		private var _spool			:SpoolMC;		private var _line			:Shape = new Shape();		private var _goalLine		:GoalLineMC;		private var _pc				:ParticlesController;		private var _fc				:FeedbackController;		private var _mi				:MatchIndicator;				//debug		private var _g				:Sprite;//game rect		private var _counter		:uint=0;				// =================================================		// ================ @Callable		// =================================================		public function addEvents():void {			Out.status(this, "addEvents");						_m.addEventListener(SoundEvent.PLAY_SOUND, 			dispatchEvent);			_m.addEventListener(KFModel.GAME_OVER, 				_gameOverHandler);			_m.addEventListener(KFModel.POSITIVE_FEEDBACK, 		_positiveFeedbackHandler);			_m.addEventListener(KFModel.GRAVITY_CHANGE, 		_pc.changeGravity);			_m.addEventListener(KFModel.MAX_PARTICLE_CHANGE, 	_pc.changeMaxParticles);			_m.addEventListener(KFModel.GAMEPLAY_MATCH_CHANGE, 	_mi.animateIn);			_m.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);			_m.stageRef.addEventListener(KeyboardEvent.KEY_UP, 	_onKeyUp);			_pc.addEventListener(KFModel.GAMEPLAY_LEVEL_CHANGE, _handleLevelChange, false,0,true);			_pc.addEventListener(KFModel.CHECK_COLLISION, 		_checkCollision, false, 0, true);						if (_m.totalHits == 0)	_mi.animateIn();			_left = _right = false;		}//end function								public function removeEvents():void { //on pause			Out.status(this, "removeEvents");						_m.removeEventListener(SoundEvent.PLAY_SOUND, dispatchEvent);			_m.removeEventListener(KFModel.GAME_OVER, _gameOverHandler);			_m.removeEventListener(KFModel.POSITIVE_FEEDBACK, _positiveFeedbackHandler);			_m.removeEventListener(KFModel.GRAVITY_CHANGE, _pc.changeGravity);			_m.removeEventListener(KFModel.MAX_PARTICLE_CHANGE, _pc.changeMaxParticles);			_m.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, _onKeyDown);			_m.stageRef.removeEventListener(KeyboardEvent.KEY_UP, _onKeyUp);			_m.removeEventListener(KFModel.GAMEPLAY_MATCH_CHANGE, _mi.animateIn);			if (_pc!=null) {				_pc.removeEventListener(KFModel.GAMEPLAY_LEVEL_CHANGE, _handleLevelChange);				_pc.removeEventListener(KFModel.CHECK_COLLISION, 		_checkCollision);			}			_left = _right = false;					}//end function				public function showElements():void{			_kite.view.rotation	= 0;			_kite.view.x 		= 0;			_kite.view.visible 	= true;			_spool.visible		= true;			_drawLine();			_goalLine.visible	= true;			_line.visible		= true;			_pc.view.visible	= true; 		}		public function hideElements():void{						_kite.view.visible 	= false;			_spool.visible		= false;			_goalLine.visible	= false;			_line.visible		= false;			_pc.view.visible	= false;		}		/**		 * - jets come out of kite		 * - kite moves up and shrinks a little		 * @param $e		 * 		 */				public function levelChangeBegin($e:KiteFlyingEvent = null):void		{
			Out.status(this, "_superPowerUpBegin; y: "+_kite.view.y);				_m.gravity		+= KFModel.GRAVITY_INCREMENT;			_m.kiteX		= 0;			_fc.showRound(_m.currentRound);				dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_SUPER_POWER_UP));			TweenMax.to(_kite.view, .9,{overwrite:false, rotation: 0, x:0, y:KFModel.SUPER_POWER_UP_Y, scaleX: KFModel.SUPER_POWER_UP_SCALE, scaleY: KFModel.SUPER_POWER_UP_SCALE, ease:Quad.easeOut, onComplete:function():void{ _kite.smoke.isVisible = true;}});			addEventListener(Event.ENTER_FRAME, _updateJets);			_pc.view.visible = false;		}//end function 				public function levelChangeEnd($e:KiteFlyingEvent = null):void
		{
			Out.status(this, "_levelChangeEnd");				removeEventListener(Event.ENTER_FRAME, _updateJets);			_kite.smoke.fadeOut();			TweenMax.to(_kite.view, .9,{overwrite:false, y:KFModel.GOALLINE_Y, scaleX: 1, scaleY: 1, ease:Quad.easeOut, onComplete:dispatchEvent, onCompleteParams:[new KiteFlyingEvent(KFModel.LEVEL_CHANGE_END)], onUpdate:_drawLine});
		}				// =================================================		// ================ @Workers		// =================================================				private function _init():void{			Out.status(this, "init game; ");						//grab the model			_m 		= KFModel.getInstance();						//create game elements			_createGameElements();					}		private function _createGameElements():void{						_createGoalLine();			_createParticleEmitter();			_g = ORedUtils.gimmeRectWithTransparency(10,10);			_createSpool();			_createKite();			_createFeedback();			_createMatchIndicator();		}				private function _createGoalLine():void		{			_goalLine 	 	= 	new GoalLineMC();			_goalLine.x		=	(KFModel.SWF_WIDTH - KFModel.GAME_WIDTH) - KFModel.GAME_WIDTH/2 -220;			_goalLine.y		=	KFModel.GOALLINE_Y;			_goalLine.visible	= false;			addChild(_goalLine);		}		
		private function _createMatchIndicator():void
		{			_mi			= new MatchIndicator(new MatchIndicatorView());			_mi.view.x	= -20;			_mi.view.y	= 200;
			addChild(_mi.view);
					}		
		private function _createFeedback():void
		{			_fc			= new FeedbackController(new UserFeedback());			_fc.view.y 	= KFModel.SWF_HEIGHT/3;			_fc.init();			addChild(_fc.view);
		}				private function _createParticleEmitter():void		{			Out.info(this, "createParticleEmitter: "+_m.currentLevel.id);				_pc				= new ParticlesController(_m.currentLevel);			_pc.view.x -= KFModel.GAME_WIDTH/2;					addChild(_pc.view); 			_pc.view.visible = false;		}				private function _createSpool():void
		{
			_spool 			= new SpoolMC();						_spool.x		= KFModel.GAME_WIDTH/6;			_spool.y 		= KFModel.GAME_HEIGHT+100;			_line.visible 	= false;			_spool.visible 	= false;			addChild(_line);			addChild(_spool);
		}				private function _createKite():void{						_kite				= new KiteController(new KiteMC());			_kite.y 			= KFModel.GOALLINE_Y;			_kite.view.visible 	= false;			addChild(_kite.view);					}				private function checkforEndGame():void { 			if (_isGameOver) { 				destroy();				dispatchEvent(new KiteFlyingEvent(KFModel.GAME_OVER)); 			} 		}			private function _drawLine():void		{			_line.graphics.clear();			_line.graphics.lineStyle(					1,//THICKNESS 				0xFFFFFF, 				1, 				false, 				LineScaleMode.VERTICAL,				CapsStyle.NONE, 				JointStyle.MITER, 				10);			_line.graphics.moveTo(_spool.x,_spool.y);			_line.graphics.lineTo(_kite.view.x, _kite.view.y);		}				// =================================================		// ================ @Handlers		// =================================================		private function _updateJets($e:Event):void		{			//show smoke			if (_kite.view.y == KFModel.SUPER_POWER_UP_Y)	{												_kite.smoke.update(this, _m.kiteX);						}			_drawLine();		}						/**		 * This function does some stuff when we change a level, however we don't want to let 		 * the main controller know until the last sequence of spewed, i mean spawned particles 		 * have crossed the goalline.		 * 		 * after level 5, we switch so a pseudo-random level/matching scenario		 * - pick a random matchCode from PARTICLE_CODES_TO_MATCH [7-18]		 * - 3 sequences per matchCode		 * - 4 matchCodes per level		 * - ensure a matchCode particle appears in each sequence		 *  		 * @param $e		 * 		 */				private function _handleLevelChange($e:KiteFlyingEvent):void		{
			Out.status(this, "_handleLevelChange");			_m.levelIndex++;
			//_pc.level 					= _m.levels[_m.levelIndex];
			_pc.level 					= _m.currentLevel;			_m.currentLevel.toString();
			_particlesTillLevelChange 	= 3;			_isAlmostLevelChange 		= true;		}						private function _positiveFeedbackHandler($e:KiteFlyingEvent):void		{			//Debug.log("great job!", Debug.LIGHT_BLUE);				_fc.showStreak($e.payload.streakType);		}				protected function _gameOverHandler($e:KiteFlyingEvent):void		{			_isGameOver = true;				//oc: tracking			Tracking.track(Tracking.L1_GAME_KITE_END); 			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, KFModel.SOUND_ID_GAME_OVER));		}		//end function init		private function _checkCollision($e:KiteFlyingEvent):void		{			var isBad:Boolean	= false;			var p:Number 		= $e.payload.xPos - KFModel.GAME_WIDTH/2;//normalize point			var n:String		= $e.payload.clipName;//clip is child of game			var mc:MovieClip 	= _pc.view.getChildByName(n) as MovieClip;			//any hit			_m.totalHits++;			_trio--;						//let last particle trio fall before level change			if (_isAlmostLevelChange) _particlesTillLevelChange--;			if (_particlesTillLevelChange == 0) {				_isAlmostLevelChange = false;				_particlesTillLevelChange = -1;				dispatchEvent(new KiteFlyingEvent(Game.NEW_LEVEL));				}						//oc: "collision detection"			if (MatchHelper.isCollision(p,_kite.view.x) && MatchHelper.isHitGood($e.payload.pCode, _m.currentMatchCode))				_isOneGoodInTrio = true;						//when a full trio of spew'ed particles crosses goalline, do a bunch of stuff.			if (_trio == 0){								if (_isOneGoodInTrio){					Debug.log("omg correct collision!", Debug.LIGHT_BLUE);					//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_POWER_UP));					_kite.blinkColor(true);					//mc.holder.gotoAndPlay(KFModel.COLLISION_LABEL);					_m.currentStreak++;								}else { 										Out.error(this, "Ouch didn't hit the good one"); 					_m.currentStreak = 0;					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_POWER_DOWN));					_m.windPower -= KFModel.POWER_DOWN_AMOUNT;					_kite.blinkColor(false);								}				_trio 				= 3;				_isOneGoodInTrio 	= false;			}//end if _trio==0						}//end function				// according to the key pressed, set the proper variable to "true"		public function _onKeyDown(e:KeyboardEvent):void {						switch (e.keyCode) {				case 37 :					_left=true;					break;				case 38 :					//up=true;					break;				case 39 :					_right=true;					break;				case 40 :					//down=true;					break;				default : Out.debug(this, e.keyCode);			}		}				private function _onKeyUp($ke:KeyboardEvent):void{			switch ($ke.keyCode) {				case 37 :					_left=false;					break;				case 38 :					//up=false;					break;				case 39 :					_right=false;					break;				case 40 :					//down=false;					break;			}			if ($ke.keyCode == 80) {				Out.info(this, "p for pause");				dispatchEvent(new Event(KFModel.PAUSE));				 				}		}				// =================================================		// ================ @Animation		// =================================================		private function _updateKite():void{						if (_left){				//move kite left				_m.kiteX 	-= KFModel.KITE_X_INCREMENT;				_m.kiteRot 	= -45;							}else if (_right){								//move kite right				_m.kiteX 	+= KFModel.KITE_X_INCREMENT;				_m.kiteRot 	= 45;			}else _m.kiteRot = 0;			//move kite			TweenMax.to(_kite.view,.2,{	x:_m.kiteX, 										rotation:_m.kiteRot,										ease:Quad.easeInOut, 										onComplete:function():void{												TweenMax.to(_kite.view, .2, {rotation:0});									}} 			);//			//redraw line			_drawLine();		}//end function				// =================================================		// ================ @Core Handler		// =================================================				//FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER		override public function runGame():void { //on game tick function       						_updateKite();			_pc.update();			checkforEndGame();					}//end function runGame				// =================================================		// ================ @Overrides		// =================================================		//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void { 			Out.status(this, "newGame");			_m.score 			= 0;			_m.gravity			= KFModel.GRAVITY_ORIG;			_m.windPower 		= KFModel.DEFAULT_WIND_POWER;			_m.levelIndex		= 0;			_isGameOver 		= false; 			_m.currentMatchCode	= _m.levels[0].matches[0];			_m.kiteX			= 0;			_m.resetHitCount();							//oc: tracking			Tracking.track(Tracking.L1_GAME_KITE_START); 						//start game soundtrack			//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_AMBIENT,true,1000,0,.6));		} 					//FUNCTION : NEW LEVEL - CALLED AFTER NEW GAME AND BEFORE START OF NEW LEVEL		override public function newLevel():void { 				//dispatchEvent(new LevelScreenUpdateEvent(LevelScreenUpdateEvent.UPDATE_TEXT,String(_gameLevel))); //if graphically showing level		} 						//FUNCTION : RESUME GAME		override public function resumeGame():void { //on resume - add the appropriate listeners			addEvents();		}				//FUNCTION : DESTROY LISTENERS		override public function destroy():void {			removeEvents();			//kill everything			_pc.reset();					}		public function get feedback():FeedbackController
		{
			return _fc;
		}		public function set feedback(value:FeedbackController):void
		{
			_fc = value;
		}//end function		// =================================================		// ================ @Constructor		// =================================================				public function KiteFlyingGame(){			super();			_init();				}//end constructor		}//end class}//end package