package com.zyrtec.kiteflying.model{	import com.bigspaceship.utils.Out;	import com.carlcalderon.arthropod.Debug;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.events.SoundEvent;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.kiteflying.events.KFScoreboardUpdateEvent;	import com.zyrtec.kiteflying.events.KiteFlyingEvent;	import com.zyrtec.kiteflying.model.vo.KFGameData;	import com.zyrtec.kiteflying.model.vo.KFLevel;	import com.zyrtec.kiteflying.model.vo.KFScoreboardValueObject;	import com.zyrtec.model.MiniGameModel;		import flash.display.Stage;		import net.ored.util.ORedUtils;		// =================================================	// ================ @Class	// =================================================	public class KFModel extends MiniGameModel	{		// =================================================		// ================ @Constants alphabetically grouped		// =================================================		public static const SHOW_FRIEND_BONUS		:Boolean = false; //whether or not the game will offer an invite a friend bonus //mandatory for high scores screen		public static const IS_TIME_BASED_SCORE		:Boolean = false; //on game over screen - display 00:00:00 if true, else display numerical value given		//dimensions for positioning and scale		public static const COLLISION_AREA_WIDTH	:Number = 180;		public static const SWF_WIDTH				:Number = 960;//SWF Dimensions		public static const SWF_HEIGHT				:Number = 600;		public static const GAME_WIDTH				:Number = 720;		public static const GAME_HEIGHT				:Number = 400;		public static const GAME_OFFSET_Y			:Number = 80;		public static const INSTRUCTIONS_W			:Number = 724;		public static const INSTRUCTIONS_H			:Number = 453;		public static const GAME_Y_MIN				:Number = -85;		public static const SCALE_MIN				:Number = .1;		public static const SCALE_MAX				:Number = 1.2;		public static const AMOUNT_TO_MOVE_UP		:Number = 8;		//environmental constants 		public static const DEFAULT_DECAY_RATE		:Number = .1;		public static const GRAVITY_ORIG			:Number = .4;//how fast particles fall		public static const GRAVITY_INCREMENT		:Number = .1;//how fast particles fall		public static const FRAME_RATE				:Number = 31;//frames per second			public static const ONE_SECOND				:Number = 1000;//frames per second			public static const KITE_X_INCREMENT		:Number = 25;//how much the kite moves each frame;		public static const GOALLINE_Y				:Number = 420;				//events 		public static const GAME_OVER				:String = "game over";		public static const NEW_LEVEL				:String = "new level";		public static const PLAY_AGAIN				:String = "play again";		public static const LOGIN					:String = "login";		public static const CONTINUE_TO_SHELL		:String = "continueToShell";		public static const PAUSE					:String = "pause";		public static const SCORE					:String = "score";		public static const GAMEPLAY_MATCH_CHANGE	:String = "gameplayChangeWhatToMatch";		public static const GAMEPLAY_LEVEL_CHANGE	:String = "gameplayChangeLevel";		public static const PARTICLE_COLLISION		:String = "collisionPossible";		public static const CHECK_COLLISION			:String = "checkCollision";		public static const WINDPOWER_CHANGE		:String = "windpowerChange";		public static const UPDATE_SCOREBOARD		:String = "updateScoreboard";		public static const POSITIVE_FEEDBACK		:String = "positiveFeedback";		public static const GRAVITY_CHANGE			:String = "gravityChange";		public static const MAX_PARTICLE_CHANGE		:String = "maxParticleChange";		public static const TOTAL_HIT_CHANGE		:String = "totalHitChange";		public static const	DECAY_RATE_CHANGE		:String = "decayRateChange";		public static const	SUPER_POWER_UP_BEGIN	:String = "superPowerUpBegin";		public static const	SUPER_POWER_UP_END		:String = "superPowerUpEnd";		public static const STREAK_CHANGE			:String = "streakChange";		public static const LEVEL_CHANGE_END		:String = "levelChangeEnd";		 					//game layers		public static const GAME_LAYERS_PARTICLES	:int = 0;		public static const GAME_LAYERS_GOALLINE	:int = 1;		public static const GAME_LAYERS_SMOKE		:int = 2;		public static const GAME_LAYERS_KITE		:int = 3;		public static const GAME_LAYERS_TOTAL		:int = 3;				//labels				public static const LABEL_PREFIX			:String = "LABEL_";		public static const LABEL_SUPER				:String = "LABEL_SUPER";		public static const LABEL_ROUND				:String = "LABEL_ROUND";		public static const LABEL_STREAK			:String = "LABEL_STREAK";		public static const LABEL_GREAT				:String = "LABEL_GREAT";		public static const LABEL_GAME_OVER			:String = "LABEL_GAME_OVER";				//feedback 		public static const STREAK_TYPES			:Vector.<String> = new <String>["x2","x4","x8"];		//particles		public static const SPAWN_RATE					:Number = 2;		public static const COLLISION_LABEL				:String = "collision";		public static const PARTICLE_Y					:Number = 50;		public static const PARTICLE_CODES_TO_MATCH		:Vector.<String> = new <String>[																		"0","1","2","3",	//colors only 																	"P","S","D",		//type only																	"P0","P1","P2","P3",//powerUps 		+ colors																	"S0","S1","S2","S3",//superPowerUps + colors																	"D0","D1","D2","D3"]//debris		+ colors		public static const PARTICLE_TYPES				:Vector.<String> = new <String>["PowerUp", "PowerDown", "SuperPowerUp","Empty"];		public static const PARTICLE_TYPES_BY_NAME		:Vector.<String> = new <String>["Regular Wind", "Super Wind", "Cloud"];		public static const PARTICLE_COLORS_BY_HEX		:Vector.<Number> = new <Number>[0xff0000, 0xffff00, 0x00ff00, 0x0000ff];//red, yellow, green, blue		public static const PARTICLE_COLORS_BY_NAME		:Vector.<String> = new <String>["Red", "Yellow", "Green", "Blue"];		public static const SMOKE_PARTICLE				:String = "SmokeMC";				public static const PARTICLE_TRACKS	:Vector.<Object> = new Vector.<Object>();		private static const PARTICLE_TRACK_1_DATA		:Object = new Object();		private static const PARTICLE_TRACK_2_DATA		:Object = new Object();		private static const PARTICLE_TRACK_3_DATA		:Object = new Object();		private static const PARTICLE_TRACK_4_DATA		:Object = new Object();		public static const X_START						:String = "xStart";		public static const X_END						:String = "xEnd";		public static const T_BASE						:String = "base";		public static const TANGENT						:String = "tangent";				// This block is run once when the class is first accessed		{				PARTICLE_TRACK_1_DATA[X_START] 		=	GAME_WIDTH/2-20;			PARTICLE_TRACK_1_DATA[X_END] 		=	140;			PARTICLE_TRACK_1_DATA[T_BASE]		= 	PARTICLE_TRACK_1_DATA[X_START] - PARTICLE_TRACK_1_DATA[X_END];			PARTICLE_TRACK_1_DATA[TANGENT] 		=	(GAME_HEIGHT-PARTICLE_Y)/PARTICLE_TRACK_1_DATA[T_BASE];						PARTICLE_TRACK_2_DATA[X_START] 		=	GAME_WIDTH/2-20;			PARTICLE_TRACK_2_DATA[X_END] 		=	GAME_WIDTH/2-40;		//	PARTICLE_TRACK_2_DATA[T_BASE]		= 	PARTICLE_TRACK_2_DATA[X_START] - PARTICLE_TRACK_2_DATA[X_END];		//	PARTICLE_TRACK_2_DATA[TANGENT] 		=	(GAME_HEIGHT-PARTICLE_Y)/PARTICLE_TRACK_2_DATA[T_BASE];						PARTICLE_TRACK_3_DATA[X_START] 		=	GAME_WIDTH/2;			PARTICLE_TRACK_3_DATA[X_END] 		=	GAME_WIDTH - 200;			PARTICLE_TRACK_3_DATA[T_BASE]		= 	PARTICLE_TRACK_3_DATA[X_END] - PARTICLE_TRACK_3_DATA[X_START];			PARTICLE_TRACK_3_DATA[TANGENT] 		=	(GAME_HEIGHT-PARTICLE_Y)/PARTICLE_TRACK_3_DATA[T_BASE];						PARTICLE_TRACK_4_DATA[X_START] 		=	9999;			PARTICLE_TRACKS.push(PARTICLE_TRACK_1_DATA);			PARTICLE_TRACKS.push(PARTICLE_TRACK_2_DATA);			PARTICLE_TRACKS.push(PARTICLE_TRACK_3_DATA);			PARTICLE_TRACKS.push(PARTICLE_TRACK_4_DATA);		}				//power ups/power downs		public static const POWER_UP_AMOUNT			:Number = 13;		public static const POWER_DOWN_AMOUNT		:Number = 25;		public static const SUPER_POWER_UP_AMOUNT	:Number = 25;		public static const SUPER_POWER_UP_LENGTH	:Number = 5;		public static const SUPER_POWER_UP_Y		:Number = 225;		public static const SUPER_POWER_UP_Y_CHANGE	:Number = 200;		public static const SUPER_POWER_UP_SCALE	:Number = .5;						//scoring		public static const CURRENT_SCORE_TITLE		:String = "CURRENT SCORE";		public static const DEFAULT_WIND_POWER		:Number = 100;		public static const DEFAULT_MAX_SCORE		:Number = 1000;				//sharing		public static const KF_BADGE_URL			:String = "http://c679303.r3.cf2.rackcdn.com/main/game/L1/assets/images/highFlyerBadge.jpg";		//sound		public static const SOUND_PREFIX			:String = "assets/sounds/";		public static const SOUND_ON				:String = "on";		public static const SOUND_OFF				:String = "off";		/*		[Embed(source='/../mp3/kiteflying/doLow.mp3')]		public static var SOUND_MP3_DO_LOW			:Class; 		[Embed(source='/../mp3/kiteflying/re.mp3')]		public static var SOUND_MP3_RE				:Class; 		[Embed(source='/../mp3/kiteflying/mi.mp3')]		public static var SOUND_MP3_MI				:Class; 		[Embed(source='/../mp3/kiteflying/fa.mp3')]		public static var SOUND_MP3_FA				:Class; 		[Embed(source='/../mp3/kiteflying/so.mp3')]		public static var SOUND_MP3_SO				:Class; 		[Embed(source='/../mp3/kiteflying/la.mp3')]		public static var SOUND_MP3_LA				:Class; 		[Embed(source='/../mp3/kiteflying/ti.mp3')]		public static var SOUND_MP3_TI				:Class; 		[Embed(source='/../mp3/kiteflying/doHi.mp3')]		public static var SOUND_MP3_DO_HI			:Class; 		[Embed(source='/../mp3/kiteflying/gameOver.mp3')]		public static var SOUND_MP3_GAME_OVER			:Class;*/		public static const SOUND_ID_DO_LOW			:String = "doLow";		public static const SOUND_ID_RE				:String = "re";		public static const SOUND_ID_MI				:String = "mi";		public static const SOUND_ID_FA				:String = "fa";		public static const SOUND_ID_SO				:String = "so";		public static const SOUND_ID_LA				:String = "la";		public static const SOUND_ID_TI				:String = "ti";		public static const SOUND_ID_DO_HI			:String = "doHi";		public static const SOUND_ID_GAME_OVER			:String = "gameOverSound";		[Embed(source='/../mp3/kiteflying/powerUp.mp3')]		public static var SOUND_MP3_POWER_UP			:Class; 		public static const SOUND_ID_POWER_UP			:String = "powerUp";		[Embed(source='/../mp3/kiteflying/superPowerUp.mp3')]		public static var SOUND_MP3_SUPER_POWER_UP		:Class;		public static const SOUND_ID_SUPER_POWER_UP		:String = "superPowerUp";		[Embed(source='/../mp3/kiteflying/powerDown.mp3')]		public static var SOUND_MP3_POWER_DOWN			:Class;		public static const SOUND_ID_POWER_DOWN			:String = "powerDown";		[Embed(source='/../mp3/kiteflying/countdown.mp3')]		public static var SOUND_MP3_COUNT				:Class;		public static const SOUND_ID_COUNT				:String = "count";		[Embed(source='/../mp3/kiteflying/go.mp3')]		public static var SOUND_MP3_GO					:Class;		public static const SOUND_ID_GO					:String = "go";//		[Embed(source='/../mp3/kiteflying/ambient.mp3')]//		public static var SOUND_MP3_AMBIENT				:Class;//		public static const SOUND_ID_AMBIENT			:String = "ambient";				// =================================================		// ================ @Instance vars		// =================================================		public var frameRate				:int;		private var _kiteX					:Number = 0;		private var _kiteRot				:Number = 0;		private var _windPower				:Number = DEFAULT_WIND_POWER;//default is 50%		private var _totalHits				:Number	= 0;		private var _gravity				:Number = GRAVITY_ORIG;		private var _maxScore				:Number = DEFAULT_MAX_SCORE;				private var _currentMatchCode		:String = "0";		private var _doesMissHurt			:Boolean = true;		private var _doesWrongHurt			:Boolean = true;		private var _hurtAmount				:Number = 25;		private var _longestStreak			:Number = 0;		private var _currentStreak			:Number = 0;		private var _levels					:Vector.<KFLevel>;		private var _levelIndex				:int = 0;		private var _currentRound			:int = 1;		private var _currentLevel			:KFLevel;				// =================================================		// ================ @Singleton		// =================================================		protected static var __instance		:KFModel;		public static function getInstance():KFModel{ return __instance || (__instance = new KFModel()); }		// =================================================		// ================ @Callable		// =================================================		public function pause():void{	dispatchEvent(new KiteFlyingEvent(Game.PAUSE));}				public function resetHitCount():void		{			totalHits 			= 0;			currentStreak	 	= 0;			longestStreak	 	= 0;		}		// =================================================		// ================ @Workers		// =================================================		private function _getStreakBasedIncrement($streak):Number{			switch ($streak){				case 1 : return 100;				case 2 : return 200;				case 3 : return 400;				default : return 800;			}		}		// =================================================		// ================ @Getters / Setters		// =================================================		override public function get dataToSend():Object{ 						var data:Object		= new Object();						data.UserID			= uid;			data.GameID			= gid;			data.SessionID		= sid;			data.Stars			= stars;						var d:Object		= new Object();//data to encrypt			d.totalHits			= totalHits;			d.longestStreak		= longestStreak;						if (isRefreshScore) {				d.score = -1;			} else {				d.score	= score;			}			isRefreshScore = false; //reset right away						d.priceofteainchina	= "69 cents";						data.Data=d;//= encryptor.encrypt(d);						Out.info(this, "here is the data to send: ");			ORedUtils.objectToString(data);			Out.info(this, "here is custom data to send: ");			ORedUtils.objectToString(d);			return data;				}//end function				public function get kiteX():Number		{			return _kiteX;		}		public function set kiteX(value:Number):void		{			var h:Number = GAME_WIDTH/2;	//half 			if (value < -h)		_kiteX = -h + 100;//lower bounds			else if (value > h) _kiteX = h - 100;	//upper bounds			else	_kiteX = value;			//default		}		public function get kiteRot():Number		{			return _kiteRot;		}		public function set kiteRot(value:Number):void		{			_kiteRot = value;		}				public function get windPower():Number		{			return _windPower;		}		public function set windPower(value:Number):void		{							if (value <= 100) _windPower 		= value;				else if (value > 100) _windPower 	= 100;								if (_windPower <=0){ dispatchEvent(new KiteFlyingEvent(GAME_OVER));									dispatchEvent(new KiteFlyingEvent(WINDPOWER_CHANGE, {windPower:0}));				}else				dispatchEvent(new KiteFlyingEvent(WINDPOWER_CHANGE, {windPower:windPower}));					Out.error(this, "ouch: windPower: " + windPower);		}//end setter		public function get totalHits():Number		{			return _totalHits;		}		public function set totalHits(value:Number):void		{			_totalHits = value;			dispatchEvent(new KiteFlyingEvent(TOTAL_HIT_CHANGE, {totalHits:totalHits}));		}		public function get gravity():Number		{			return _gravity;		}		public function set gravity(value:Number):void		{			_gravity = value;			dispatchEvent(new KiteFlyingEvent(GRAVITY_CHANGE, {newGravity:_gravity}));		}		public function get maxScore():Number		{			return _maxScore;		}		public function set maxScore(value:Number):void		{			_maxScore = value;		}		override public function set score(value:Number):void		{			if(value > maxScore)	maxScore = value;			_score = value;			var o:KFScoreboardValueObject = new KFScoreboardValueObject(windPower,score, maxScore);			dispatchEvent(new KFScoreboardUpdateEvent(UPDATE_SCOREBOARD, o));		}		override public function get displayScore():String{			return score.toString();		}		public function get levelIndex():int		{			return _levelIndex;		}		public function set levelIndex(value:int):void		{			Out.status(this, "set levelIndex: "+value);						value != 0	?	_currentRound++ : _currentRound = 1;			_levelIndex =  value;						if(value < _levels.length){				_currentLevel = levels[_levelIndex];			}else{				_currentLevel = KFLevels.generateRandomLevel(_currentRound);			}			Out.debug(this, "set levelIndex. round: "+_currentRound);		}//end setter		public function get currentMatchCode():String		{			return _currentMatchCode;		}		public function set currentMatchCode(value:String):void		{			_currentMatchCode = value;			Debug.log("current Match Code: "+value, Debug.LIGHT_BLUE)			dispatchEvent(new KiteFlyingEvent(KFModel.GAMEPLAY_MATCH_CHANGE,{newMatchCode:value}));		}		public function get doesMissHurt():Boolean		{			return _doesMissHurt;		}		public function set doesMissHurt(value:Boolean):void		{			_doesMissHurt = value;		}		public function get doesWrongHurt():Boolean		{			return _doesWrongHurt;		}		public function set doesWrongHurt(value:Boolean):void		{			_doesWrongHurt = value;		}		public function get hurtAmount():Number		{			return _hurtAmount;		}		public function set hurtAmount(value:Number):void		{			_hurtAmount = value;			currentStreak = 0;		}		public function get longestStreak():Number		{			return _longestStreak;		}		public function set longestStreak(value:Number):void		{			_longestStreak = value;		}		public function get currentStreak():Number		{			return _currentStreak;		}		public function set currentStreak(value:Number):void		{			if (value > longestStreak) longestStreak = value;			if (value != 0)	score += _getStreakBasedIncrement(value);			_currentStreak = value;			var payload:Object = new Object();			switch(value){				case 0 : break;				case 1 : //play sound					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_DO_LOW));					break;				case 2 : payload.streakType = STREAK_TYPES[0];					dispatchEvent(new KiteFlyingEvent(POSITIVE_FEEDBACK, payload));					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_RE));					break;				case 3 : //play sound					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_MI));					break;				case 4 : payload.streakType = STREAK_TYPES[1];					dispatchEvent(new KiteFlyingEvent(POSITIVE_FEEDBACK, payload));					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_FA));					break;				case 5 : //play sound					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_SO));					break;				case 6 : //play sound					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_LA));					break;				case 7 : //play sound					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_TI));					break;				case 8 : payload.streakType = STREAK_TYPES[2];					windPower+= POWER_DOWN_AMOUNT;					dispatchEvent(new KiteFlyingEvent(POSITIVE_FEEDBACK, payload));				default: 					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND,KFModel.SOUND_ID_DO_HI	));					break;			}			dispatchEvent(new KiteFlyingEvent(STREAK_CHANGE,{value:currentStreak}));		}		public function get levels():Vector.<KFLevel>		{			return _levels;		}		public function set levels(value:Vector.<KFLevel>):void		{			_levels = value;		}		public function get currentLevel():KFLevel		{			return _currentLevel;		}		public function set currentLevel(value:KFLevel):void		{			_currentLevel = value;		}		public function get currentRound():int		{			return _currentRound;		}		public function set currentRound(value:int):void		{			_currentRound = value;		}		// =================================================		// ================ @Interfaced		// =================================================				// =================================================		// ================ @Core Handler		// =================================================				// =================================================		// ================ @Overrides		// =================================================		override public function initialize($s:Stage):void{			super.initialize($s);			_levels = KFLevels.create();			_currentLevel = _levels[0];		}		override public function setGameData($gameData:IGameData):void{			super.setGameData($gameData);						maxScore = ($gameData as KFGameData).highScore;						//uncomment for production			//Out.info(this, "salt: "+encryptor.saltForServices);		}//end function		}//end class}//end package