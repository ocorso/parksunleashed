package com.zyrtec.kiteflying.utils{	import com.bigspaceship.utils.Out;	import com.zyrtec.kiteflying.events.KiteFlyingEvent;	import com.zyrtec.kiteflying.model.KFModel;		import fl.controls.CheckBox;	import fl.controls.ComboBox;	import fl.controls.Slider;	import fl.controls.TextInput;	import fl.data.DataProvider;	import fl.events.ComponentEvent;	import fl.events.SliderEvent;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.text.TextField;		public class KFDebugSliders extends MovieClip	{		private var _items:Array = [ 			//colors only			{label:KFModel.PARTICLE_COLORS_BY_NAME[0]+ " Only", data:	KFModel.PARTICLE_CODES_TO_MATCH[0]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[1]+ " Only", data:	KFModel.PARTICLE_CODES_TO_MATCH[1]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[2]+ " Only", data:	KFModel.PARTICLE_CODES_TO_MATCH[2]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[3]+ " Only", data:	KFModel.PARTICLE_CODES_TO_MATCH[3]}, 			//type only			{label:KFModel.PARTICLE_TYPES_BY_NAME[0], 	 		data:	KFModel.PARTICLE_CODES_TO_MATCH[4]}, 			{label:KFModel.PARTICLE_TYPES_BY_NAME[1], 			data:	KFModel.PARTICLE_CODES_TO_MATCH[5]}, 			{label:KFModel.PARTICLE_TYPES_BY_NAME[2], 			data:	KFModel.PARTICLE_CODES_TO_MATCH[6]}, 			//colors + powerUps			{label:KFModel.PARTICLE_COLORS_BY_NAME[0]+" "+KFModel.PARTICLE_TYPES_BY_NAME[0]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[7]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[1]+" "+KFModel.PARTICLE_TYPES_BY_NAME[0]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[8]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[2]+" "+KFModel.PARTICLE_TYPES_BY_NAME[0]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[9]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[3]+" "+KFModel.PARTICLE_TYPES_BY_NAME[0]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[10]}, 			//colors + powerDowns			{label:KFModel.PARTICLE_COLORS_BY_NAME[0]+" "+KFModel.PARTICLE_TYPES_BY_NAME[1]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[11]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[1]+" "+KFModel.PARTICLE_TYPES_BY_NAME[1]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[12]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[2]+" "+KFModel.PARTICLE_TYPES_BY_NAME[1]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[13]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[3]+" "+KFModel.PARTICLE_TYPES_BY_NAME[1]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[14]}, 			//color + debris			{label:KFModel.PARTICLE_COLORS_BY_NAME[0]+" "+KFModel.PARTICLE_TYPES_BY_NAME[2]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[15]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[1]+" "+KFModel.PARTICLE_TYPES_BY_NAME[2]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[16]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[2]+" "+KFModel.PARTICLE_TYPES_BY_NAME[2]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[17]}, 			{label:KFModel.PARTICLE_COLORS_BY_NAME[3]+" "+KFModel.PARTICLE_TYPES_BY_NAME[2]+"s", data:	KFModel.PARTICLE_CODES_TO_MATCH[18]}, 		]; 		private var _m:KFModel;				public var gravitySlider:Slider;		public var gravityInput:TextInput;				public var doesMissHurtMC:CheckBox;		public var doesWrongHurtMC:CheckBox;				public var matchesCB:ComboBox;		public var totalHitsTF:TextField;		public var streakTF:TextField;		public var curMatchTF:TextField;		public var hurtAmountMC:TextInput;						public function KFDebugSliders()		{			super();			_init();		}				/**		 *     	gravity 				- how fast particles come down		 * 		maxParticles 			- total num of particles that have fallen		 * 		totalHits				- total fallen particles		 */						private function _init():void		{			Out.status(this, "init");							_m	= KFModel.getInstance();						//top down adding listeners			gravitySlider.addEventListener(SliderEvent.CHANGE, _onGravityMove);			gravityInput.addEventListener(ComponentEvent.ENTER, _onGravityEnter);						doesMissHurtMC.addEventListener(MouseEvent.CLICK, _checkBoxHandler);			doesWrongHurtMC.addEventListener(MouseEvent.CLICK, _checkBoxHandler);						hurtAmountMC.addEventListener(Event.CHANGE, _hurtAmountChangeHandler);			_m.addEventListener(KFModel.GRAVITY_CHANGE, _onGravityChange);			_m.addEventListener(KFModel.TOTAL_HIT_CHANGE, _onTotalHitChange);			_m.addEventListener(KFModel.STREAK_CHANGE, _onStreakChange);			_m.addEventListener(KFModel.GAMEPLAY_MATCH_CHANGE, _changeCB);						matchesCB.dataProvider = new DataProvider(_items); 			matchesCB.addEventListener(Event.CHANGE, _cbChangeHandler);						matchesCB.selectedIndex = 3;		}				protected function _changeCB($e:KiteFlyingEvent):void		{			for (var e:* in _items){				//Out.warning(this, "e.data: "+_items[e].data);				//Out.info(this, "e.label: "+_items[e].label);				if (_items[e].data == $e.payload.newMatchCode){			Out.status(this, "_changeCB: "+_items[e].label);					matchesCB.selectedIndex = e;					curMatchTF.text			= _items[e].label;				}			}		}				protected function _onStreakChange($e:KiteFlyingEvent):void		{			streakTF.text = $e.payload.value;					}				protected function _hurtAmountChangeHandler(event:Event):void		{			//Out.status(this, "_hurtAmountChange: "+hurtAmountMC.text);			_m.hurtAmount = hurtAmountMC.text as Number;		}				protected function _checkBoxHandler($me:MouseEvent):void		{			//Out.status(this, "_checkBoxHandler");			_m.doesMissHurt = doesMissHurtMC.selected;						_m.doesWrongHurt = doesWrongHurtMC.selected;					}				protected function _cbChangeHandler($e:Event):void		{			_m.currentMatchCode = ComboBox($e.target).selectedItem.data;				curMatchTF.text	 	= ComboBox($e.target).selectedItem.label;		}				protected function _onTotalHitChange($e:KiteFlyingEvent):void		{			//Out.status(this, "onHit: "+_m.totalHits)			totalHitsTF.text = $e.payload.totalHits;		}				protected function _onGravityChange($e:KiteFlyingEvent):void{			gravityInput.text = _m.gravity.toString();			gravitySlider.value = _m.gravity;		}				protected function _onGravityEnter($e:ComponentEvent):void		{			_m.gravity = $e.target.text;						}				protected function _onGravityMove($e:SliderEvent):void		{			Out.status(this, "onGravityMove; value: "+$e.target.value);						_m.gravity = $e.target.value;			gravityInput.text = $e.target.value;		}	}}