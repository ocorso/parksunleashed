package com.zyrtec.kiteflying.utils{	import com.bigspaceship.utils.MathUtils;	import com.bigspaceship.utils.Out;	import com.zyrtec.kiteflying.model.KFModel;	import com.zyrtec.kiteflying.view.ui.Particle;	import com.zyrtec.kiteflying.view.ui.SmokeParticle;		import fl.motion.Color;		import flash.display.DisplayObjectContainer;	import flash.filters.BitmapFilter;	import flash.filters.BitmapFilterQuality;	import flash.filters.BlurFilter;	import flash.filters.GlowFilter;	import flash.utils.getDefinitionByName;
	public class ParticleHelper	{		// =================================================		// ================ @Particle Factory Method		// =================================================		public static function particleFactory($v:DisplayObjectContainer, $code:String = "P01"):Particle{						var type:String 		= ParticleHelper.getTypeFromCode($code); 			var track:int			= ParticleHelper.getTrackFromCode($code);			var t:Number 			= track != -1 ? track : getRandomTrack();			var x:Number			= KFModel.PARTICLE_TRACKS[t][KFModel.X_START];			var ty:String			= type == "" ? ParticleHelper.getRandomType() : type;			var c:Class				= getDefinitionByName(ty) as Class;			var p:Particle 			= new Particle(c, $v, x,  KFModel.PARTICLE_Y);						//store the code as a property on the particle			p.pCode			= $code;						//set which track it comes down on			p.track			= t;						//explicitly set type rather than check what type of Class clip is.			p.pType			= ty;						//always set the gravity to the current level			p.gravity 		= KFModel.getInstance().gravity;//oc: i consider this reference to the model cheating btw...						// give it a steady velocity 			p.setVel(5,5);						//tint 			var color:Color					= ParticleHelper.getColorFromCode($code);			p.clip.transform.colorTransform = color;						//glow			//p.clip.filters	= [getGlowFromCode($code)];			return p;					}//end factory method				// =================================================		// ================ @Particle Codes		// =================================================		public static function getTypeFromCode($whatKind:String):String{			var type:String = "";			if ($whatKind == "") return type;						switch ($whatKind.charAt(0)){				case "P" 	: type = KFModel.PARTICLE_TYPES[0]; break; //tornado				case "D" 	: type = KFModel.PARTICLE_TYPES[1]; break; //debris				case "S"	: type = KFModel.PARTICLE_TYPES[2]; break; //super powerup				case "0"	: type = KFModel.PARTICLE_TYPES[3]; break; //empty				default		: Out.warning(new Object(), "unknown type in code");							}//end switch						return type;		}				public static function getTrackFromCode($whatKind:String):int{			var track:int = -1;			if ($whatKind == "") return track;						switch ($whatKind.charAt(2)){				case "1" 	: track = 0; break;				case "2" 	: track = 1; break;				case "3"	: track = 2; break;				case "4"	: track = 3; break;				default		: Out.warning(new Object(), "unknown track in code");			}//end switch						return track;		}		public static function getColorFromCode($whatKind:String):Color{			var color:Color = new Color();			var hex:uint;			if ($whatKind == "") return color;						switch ($whatKind.charAt(1)){				case "0" 	: hex = KFModel.PARTICLE_COLORS_BY_HEX[0]; break;				case "1" 	: hex = KFModel.PARTICLE_COLORS_BY_HEX[1]; break;				case "2"	: hex = KFModel.PARTICLE_COLORS_BY_HEX[2]; break;				case "3"	: hex = KFModel.PARTICLE_COLORS_BY_HEX[3]; break;				default		: hex = 0xffffff; Out.warning(new Object(), "unknown color in code");								}//end switch						color.setTint(hex,.7);						return color;		}		public static function getColorValueFromCode($whatKind:String):Number{			var hex:uint;			if ($whatKind == "") return 0xffffff;						switch ($whatKind.charAt(1)){				case "0" 	: hex = KFModel.PARTICLE_COLORS_BY_HEX[0]; break;				case "1" 	: hex = KFModel.PARTICLE_COLORS_BY_HEX[1]; break;				case "2"	: hex = KFModel.PARTICLE_COLORS_BY_HEX[2]; break;				case "3"	: hex = KFModel.PARTICLE_COLORS_BY_HEX[3]; break;				default		: hex = 0xffffff; Out.warning(new Object(), "unknown color in code");								}//end switch						return hex;		}		public static function getGlowFromCode($whatKind:String):BitmapFilter{						var alpha:Number = 0.8;			var blurX:Number = 35;			var blurY:Number = 35;			var strength:Number = 2;			var inner:Boolean = false;			var knockout:Boolean = false;			var quality:Number = BitmapFilterQuality.HIGH;						return new GlowFilter(getColorValueFromCode($whatKind),				alpha,				blurX,				blurY,				strength,				quality,				inner,				knockout);		}				// =================================================		// ================ @Utils		// =================================================		public static function getScale($yPos:Number):Number{									var s:Number = $yPos / (KFModel.GAME_HEIGHT);			s	=	(s *KFModel.SCALE_MAX - KFModel.SCALE_MIN) + KFModel.SCALE_MIN;						return s;		}//end function				public static function getRandomType():String		{			var i:Number 	= Math.floor(MathUtils.getRandomInt(0, KFModel.PARTICLE_TYPES.length-1));			var c:String	= KFModel.PARTICLE_TYPES[i];			return c;		}		public static function getRandomTrack():int{			return Math.round(MathUtils.getRandomInt(0,2));		}		/**		 * This function calculates the x position 		 * @param track		 * @return 		 * 		 */				public static function findXOffset($t:Number, $h:Number):Number		{			var x,base:Number;			switch($t)			{									case 0://left track				{					base 	= ($h / KFModel.PARTICLE_TRACKS[$t][KFModel.TANGENT]);					x 		= KFModel.PARTICLE_TRACKS[$t][KFModel.X_START] - base;					break;				}				case 1: // middle track				{					x 		= KFModel.PARTICLE_TRACKS[$t][KFModel.X_START];					break;				}				case 2: // right track				{					base	= ($h / KFModel.PARTICLE_TRACKS[$t][KFModel.TANGENT]);					x 		= base + KFModel.PARTICLE_TRACKS[$t][KFModel.X_START];					break;				}				case 3: // invisible particle track					x 		= 9999;			}			return x;		}//end function		// =================================================		// ================ @Smoke			// =================================================		public static function createSmokeParticle($v:DisplayObjectContainer, $x:Number = 0, $y:Number = 0):SmokeParticle{			var bfArray:Array	= [new BlurFilter(10,10,1)];			var p:SmokeParticle = new SmokeParticle(getDefinitionByName(KFModel.SMOKE_PARTICLE) as Class, $v, $x, $y);			p.clip.filters = bfArray;			return p;		}	}//end class}//end package