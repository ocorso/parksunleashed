package com.zyrtec.kiteflying.view.screens{	import com.bigspaceship.display.StandardInOut;	import com.bigspaceship.events.AnimationEvent;	import com.bigspaceship.utils.Out;	import com.g2.gaming.framework.events.ButtonIdEvent;	import com.greensock.TweenMax;	import com.greensock.easing.Back;	import com.greensock.plugins.TweenPlugin;	import com.greensock.plugins.VisiblePlugin;	import com.theginbin.ui.RollOverButton;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.analytics.Tracking;	import com.zyrtec.events.ZyrtecGameEvent;	import com.zyrtec.kiteflying.model.KFModel;	import com.zyrtec.kiteflying.utils.FacebookHelper;	import com.zyrtec.kiteflying.view.screens.assets.KFGameOverView;	import com.zyrtec.view.Leaderboard;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.external.ExternalInterface;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;		import net.ored.util.ORedUtils;		public class KFGameOver extends KFAbstractScreen	{		/*//the view contains the following:		public var txtTimeComplete:MovieClip;		public var txtStars:MovieClip;		public var txtScore:MovieClip;		public var txtYourRank:MovieClip;		public var btnFBShare:MovieClip;		public var star1:MovieClip;		public var star2:MovieClip;		public var star3:MovieClip;		public var btnPlayAgain:MovieClip;		public var continueMC:MovieClip;*/		private var _m					:KFModel;		private var _playerArray		:Array; // holds player info from leaderboard callback		private var _playerHolder		:Sprite; //container clip for leaderboard player clips				private var sessionTime			:Number = 0;		private var sessionTimer		:Timer;		private const __INTERVAL		:Number = 30;//milliseconds		private var _timeConverter		:TimeConverter;				// =================================================		// ================ @Callable		// =================================================		override public function addEvents($ae:AnimationEvent = null):void{			Out.status(this, "addEvents");						KFGameOverView(view).btnPlayAgain.addEventListener(MouseEvent.CLICK, _playAgainClickHandler);			KFGameOverView(view).btnBack.addEventListener(MouseEvent.CLICK, _continueClickHandler);			KFGameOverView(view).btnFBShare.addEventListener(MouseEvent.CLICK, _fbShareClickHandler);			RollOverButton(view.btnBack).addEvents();			RollOverButton(view.btnFBShare).addEvents();			RollOverButton(view.btnPlayAgain).addEvents();						//login/signup if necessary			if (!_m.isLoggedIn){						KFGameOverView(view).loginMC.addEventListener(MouseEvent.CLICK, _loginClickHandler);				KFGameOverView(view).btnSignUpMC.addEventListener(MouseEvent.CLICK, _signInClickHandler);				RollOverButton(view.loginMC).addEvents();				RollOverButton(view.btnSignUpMC).addEvents();			}					}//end function						override public function removeEvents($ae:AnimationEvent = null):void{						KFGameOverView(view).btnPlayAgain.removeEventListener(MouseEvent.CLICK, _playAgainClickHandler);			KFGameOverView(view).btnBack.removeEventListener(MouseEvent.CLICK, _continueClickHandler);			KFGameOverView(view).btnFBShare.removeEventListener(MouseEvent.CLICK, _fbShareClickHandler);			if (KFGameOverView(view).btnReload != null) {				KFGameOverView(view).btnReload.removeEventListener(MouseEvent.CLICK, onReloadClick);			}						RollOverButton(view.btnFBShare).removeEvents();			RollOverButton(view.btnPlayAgain).removeEvents();			RollOverButton(view.btnBack).removeEvents();			RollOverButton(view.btnReload).removeEvents();									//login/signup if necessary			if (!_m.isLoggedIn){						KFGameOverView(view).btnSignUpMC.removeEventListener(MouseEvent.CLICK, _signInClickHandler);				KFGameOverView(view).loginMC.removeEventListener(MouseEvent.CLICK, _loginClickHandler);				RollOverButton(view.btnSignUpMC).removeEvents();				RollOverButton(view.loginMC).removeEvents();			}//end if no one is logged in						if (sessionTimer) sessionTimer.reset();					}//end function				public function updateLeaderboard():void{			TweenMax.to(view.txtLoading, 0.4, {alpha:0});						Out.status(this, "updateLeaderboard");			ORedUtils.objectToString(_m.leaderboardResults);						if (_playerHolder.numChildren>0) { //clear out the leaderboard data before this animates in				var clip:MovieClip;					for (var i:uint = 0; i < _playerHolder.numChildren; i++) {						clip = MovieClip(_playerHolder.getChildAt(i));						clip.visible = false;						clip = null;					}			}						var resultsObj:Object 			= _m.leaderboardResults;			sessionTime						= (resultsObj.TimeLeft != null && resultsObj.TimeLeft != undefined) ? resultsObj.TimeLeft : 0;						//session countdown clock			if (resultsObj.hasOwnProperty("TimeLeft") && resultsObj.TimeLeft!=null) {				sessionTime = resultsObj.TimeLeft;				if (sessionTime > 1000) { //only use the timer if the time left is greater than 1 second					if(sessionTimer==null) {						sessionTimer = new Timer(1000);					}					sessionTimer.addEventListener(TimerEvent.TIMER, _onSessionTimer);					sessionTimer.start();				}			}						if (!_m.isLoggedIn || !resultsObj.hasOwnProperty("TopScore") || resultsObj.TopScore==null || resultsObj.TopScore==undefined) {				view.txtYourRank.txtScore.text 	= _m.score.toString(); 			} else {				view.txtYourRank.txtScore.text = resultsObj.TopScore; 			} 						//Rank			/*if(resultsObj.hasOwnProperty("Rank") && resultsObj.Rank != undefined)		view.txtYourRank.txtRank.text 	= resultsObj.Rank;			else Out.error(this, "the dreaded Rank is empty");*/						//SessionName			if (resultsObj.SessionName != null && resultsObj.SessionName != undefined) 	view.txtSession.text 			=	resultsObj.SessionName;							var leaderboardPlayer:MovieClip;			var spacing:uint = 10;						try {				// statements			//Scores			if (resultsObj.hasOwnProperty("Scores") && resultsObj.Scores!=null) {				Out.debug(this, resultsObj.Scores);				for (i=0; i<resultsObj.Scores.length; i++) { //just grab first 5 players										leaderboardPlayer 				= new LeaderboardPlayerMC();					leaderboardPlayer.txtRank.text 	= resultsObj.Scores[i].order; //assuming "order" will correspond to the order of the array					leaderboardPlayer.txtName.text 	= resultsObj.Scores[i].name;					leaderboardPlayer.txtScore.text = getPlayerScoreDisplay(resultsObj.Scores[i].score);					leaderboardPlayer.y 			= (leaderboardPlayer.height+spacing)*i;					_playerHolder.addChild(leaderboardPlayer);									}//end for loop			}//end if we scores						} catch ($err:TypeError) {				Out.error(this, $err.toString());// null point RTE			} catch ($err:Error){				Out.warning(this, "not a type error error");				Out.error(this, $err.toString());			}			//show new list of players and current players row			TweenMax.to(_playerHolder, 0.4, {alpha:1, delay:0.4});			TweenMax.to(view.txtYourRank, 0.4, {alpha:1, delay:0.4});			TweenMax.delayedCall(0.4, addReloadEvents);					}//end function 		public function setStaticText():void		{			Out.status(this, "setStaticText");						if (_m.isLoggedIn) { //gray these out				view.btnSignUpMC.alpha 	= 0.4;				view.loginMC.alpha 		= 0.4;			}									KFGameOverView(view).scoreMC.tf.text 			= _m.score;						KFGameOverView(view).longestStreakMC.tf.text 	= _m.longestStreak;									/*			 * 			  PLACEHOLDER VALUES						1 Star: 1-5,999			2 Stars: 6,000 - 9,999			3 Stars: 10,000+ 			*/						//display stars earned : NOTE : THIS WILL BE DIFFERENT ACROSS GAMES						if (_m.score > 10000) { //3 stars				view.star1.gotoAndStop(2);				view.star2.gotoAndStop(2);				view.star3.gotoAndStop(2);				view.txtPointsThreshMC.tf.text = "> 10,000 points";				view.txtStars.tf.text = "3 stars";				_m.stars				= 3;			} else if (_m.score > 6000){ //2 stars				view.star1.gotoAndStop(2);				view.star2.gotoAndStop(2);				view.txtPointsThreshMC.tf.text = "> 6,000 points";				view.txtStars.tf.text = "2 stars";				_m.stars				= 2;			} else if (_m.score < 5999){ //1 star				view.star1.gotoAndStop(2);				view.txtPointsThreshMC.tf.text = "< 5,999";				view.txtStars.tf.text = "1 star";				_m.stars				= 1;			}					}//end function 				public function disableLogInSignUp():void{						if (_m.isLoggedIn) { //gray these out				KFGameOverView(view).btnSignUpMC.removeEventListener(MouseEvent.CLICK, _signInClickHandler);				KFGameOverView(view).loginMC.removeEventListener(MouseEvent.CLICK, _loginClickHandler);				RollOverButton(view.btnSignUpMC).removeEvents();				RollOverButton(view.loginMC).removeEvents();				view.btnSignUpMC.alpha 	= 0.4;				view.loginMC.alpha 		= 0.4;			}		}		// =================================================		// ================ @Workers		// =================================================		private function _init():void		{			TweenPlugin.activate([VisiblePlugin]);			_m						= KFModel.getInstance();			std						= new StandardInOut(view);			std.addEventListener(AnimationEvent.IN, addEvents);			std.addEventListener(AnimationEvent.OUT_START, removeEvents);			std.addEventListener(AnimationEvent.OUT, _onAnimateOut);						_timeConverter			= new TimeConverter();						_playerHolder 			= new Sprite(); 			_playerHolder.x 		= 371;			_playerHolder.y 		= 155;			view.addChild(_playerHolder);			view.y 					= -view.height-100;						_playerHolder.alpha		= 0;			view.txtYourRank.alpha 	= 0;			view.txtLoading.alpha 	= 0;			addChild(view);					}//end function 				public function addReloadEvents():void {			RollOverButton(view.btnReload).addEvents();			view.btnReload.addEventListener(MouseEvent.CLICK, onReloadClick, false, 0, true);		}				public function _onSessionTimer(e:TimerEvent):void {			var timeString:String;			var numArray:Array;			var timeConverter:TimeConverter;			if (sessionTime>1000) {				timeConverter = new TimeConverter();				sessionTime-=1000;				timeString = timeConverter.convertMillisecondsToHours(sessionTime);				numArray = timeString.split( ":" );				view.txtTimeRemaining.txtHour.text = numArray[0];				view.txtTimeRemaining.txtMin.text = numArray[1];				view.txtTimeRemaining.txtSec.text = numArray[2];				//view.txtTimeRemaining.txtMs.text = numArray[3];			} else {				trace("SESSION TIMER ::: "+sessionTimer);				if (sessionTimer!=null) {					sessionTimer.removeEventListener(TimerEvent.TIMER, _onSessionTimer);					sessionTimer.stop();				}				//timeString = timeConverter.convertMillisecondsToHours(sessionTime);				//numArray = timeString.split( ":" );				view.txtTimeRemaining.txtHour.text = "00";				view.txtTimeRemaining.txtMin.text = "00";				view.txtTimeRemaining.txtSec.text = "00";				//view.txtTimeRemaining.txtMs.text = "00";			}		}						private function getPlayerScoreDisplay(num:Number):String {			var displayScore:String			= "";						if (KFModel.IS_TIME_BASED_SCORE) {				var timeConverter:TimeConverter = new TimeConverter();				var timeString:String 		= timeConverter.convertTime(num, "milliseconds");				displayScore 				= timeString;			} else {				displayScore 				= num.toString(); //TO DO: add a comma for every thousand			}						return displayScore;		}		// =================================================		// ================ @Handlers		// =================================================				private function _continueClickHandler($me:MouseEvent):void		{			Out.status(this, "continue To Shell");			_m.shell.completecallback();		}				private function _signInClickHandler($me:MouseEvent):void		{			Out.status(this, "signin!");			_m.shell.signincallback();		}				private function _loginClickHandler($me:MouseEvent):void		{			Out.status(this, "login");			_m.shell.logincallback();		}				protected function _playAgainClickHandler($me:MouseEvent):void		{			Out.status(this, "playAgainClick");						//oc: tracking			Tracking.track(Tracking.L1_MESSAGE_KITE_REPLAY); 						//oc: animate out game over screen			animateOut();		}		private function _fbShareClickHandler($me:MouseEvent):void		{			Out.status(this, "facebook share click");			var url:String = FacebookHelper.shareURL(_m.score.toString(),_m.stars, _m.shareURL, _m.badgeURL);			Out.info(this, 	url);			if (ExternalInterface.available){				ExternalInterface.call("openPopup", url, "ShareFacebook", Leaderboard.POP_UP_WIDTH, Leaderboard.POP_UP_HEIGHT);			}else navigateToURL(new URLRequest(url));						//oc: tracking			Tracking.track(Tracking.L1_SHARE_HIGHFLYER); 		}				public function onReloadClick(e:MouseEvent):void{ //tell shell to sign up			//RollOverButton(leaderboardClip.btnReload).removeEvents();			trace("reloading clicked");			view.btnReload.removeEventListener(MouseEvent.CLICK, onReloadClick);			_m.isRefreshScore = true;			_m.addEventListener(ZyrtecGameEvent.ON_LEADERBOARD_RESULT, _onLeaderboardResults);			_m.shell.leaderboardcallback(_m.dataToSend);						//FOR TESTING ONLY:			//_m.leaderboardResults = _m.shell.leaderboardcallback(_m.dataToSend);		}				//FUNCTION : ON LEADERBOARD RESULTS IN		private function _onLeaderboardResults($e:ZyrtecGameEvent):void{			Out.status(this, "leaderboard results in after reloading click");			_m.removeEventListener(ZyrtecGameEvent.ON_LEADERBOARD_RESULT, _onLeaderboardResults);			updateLeaderboard();		}				// =================================================		// ================ @Animation		// =================================================		override public function animateIn():void{			Out.status(this, "animateIn");			std.addEventListener(AnimationEvent.IN, _onAnimateIn);			TweenMax.to(view, 0.5, {y:(KFModel.SWF_HEIGHT-view.height)/2-KFModel.AMOUNT_TO_MOVE_UP, delay:0.5, ease:Back.easeOut, onComplete: std.animateIn});			//std.animateIn();			}		protected function _onAnimateIn($ae:AnimationEvent):void{						std.removeEventListener(AnimationEvent.IN, dispatchEvent);			//oc: tracking			Tracking.track(Tracking.L1_MESSAGE_KITE_CONGRATS); 			dispatchEvent($ae);		}				override public function animateOut():void{ 							TweenMax.to(view, 0.6, {y:-view.height-100, ease:Back.easeIn, visible:false, onComplete:std.animateOut});               			//std.animateOut();					}		protected function _onAnimateOut($ae:AnimationEvent):void{						view.txtLoading.alpha = 1;			dispatchEvent(new ButtonIdEvent(ButtonIdEvent.BUTTON_ID, id));		}//end function		// =================================================		// ================ @Getters / Setters		// =================================================				// =================================================		// ================ @Interfaced		// =================================================				// =================================================		// ================ @Core Handler		// =================================================				// =================================================		// ================ @Overrides		// =================================================				// =================================================		// ================ @Constructor		// =================================================		public function KFGameOver($mc:ScreenGameOverMC, id:int=0, addBitmapBackground:Boolean=false, width:Number=0, height:Number=0, isTransparent:Boolean=false, color:uint=0)		{			super(id, addBitmapBackground, width, height, isTransparent, color);			view = $mc;			_init();		}		//end constructor	}//end class}//end package