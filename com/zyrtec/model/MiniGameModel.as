package com.zyrtec.model{	import com.bigspaceship.utils.Out;	import com.zyrtec.adapters.ShellAdapter;	import com.zyrtec.events.ZyrtecGameEvent;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.utils.EncryptUtils;		import flash.display.Stage;	import flash.events.EventDispatcher;		import net.ored.util.ORedUtils;
		public class MiniGameModel extends EventDispatcher	{		public var shell					:ShellAdapter;		protected var _stageRef				:Stage;//global stage ref		protected var _uid					:String;//user id		protected var _sid					:String;//session id		protected var _gid					:String;//game id		protected var _name					:String;//user's name		protected var _cdn					:String = "";//content delivery network		protected var _isArcadeMode			:Boolean = false;//whether or not contest has ended yet			protected var _shareURL				:String;		protected var _badgeURL				:String;		protected var _stars				:int = 0;		protected var _leaderboardResults	:Object;		protected var _score				:Number = 0; //global score thats sent in leaderboardCallback		protected var _displayScore			:String=""; //player's time/score as it should be displayed all over leaderboard		protected var _isRefreshScore		:Boolean=false; //whether user clicked refresh - send score of -1 if so				// =================================================		// ================ @Callable		// =================================================		public function initialize($s:Stage):void{			Out.status(this, "initialize");			//global stage ref			_stageRef		= $s;			//there's only 1 ref to shell			shell			= new ShellAdapter();		}//end function initialize				public function setGameData($gameData:IGameData):void{						//parse out game data			_uid 			= $gameData.uid;			_sid			= $gameData.sid;			_gid			= $gameData.gid;			_cdn			= $gameData.cdn;			_name 			= $gameData.name;			_isArcadeMode	= $gameData.isArcadeMode;			_shareURL		= $gameData.shareURL;			_badgeURL		= $gameData.badgeURL;						// are we logged in?			Out.info(this, "user id: "+ uid);		}//end function				// =================================================		// ================ @Getters / Setters		// =================================================		/**		 * This function prepares the game score and necessary data		 * to be sent to the backend database via the main shell		 * 		 * it uses the encryptor.encrypt method to create a secure		 * payload.		 * 		 * //in children extend this.		 * for reference, see the overridden method: dataToSend 		 * in: com.zyrtec.kiteflying.model.KFModel.as		 * 		 * 		 * @return the Object to send to the leaderboardCallback 		 * 		 */				public function get dataToSend():Object{ return new Object();}				/**		 * this method packages up the score for the main experience to use. 		 * @return Object: a fully populated object containing the score		 * 		 */				public function get scoreToSend():Object{ //OVERRIDE TO DISPLAY SPECIFIC MESSAGING, e.g. "10:30:04 minutes", "500 points"						var scoreToSend:Object 	= new Object();			scoreToSend.displayValue = score.toString(); //example: this.displayScore+" minutes";					return scoreToSend;					}//end function				/**		 * Acts as a global stage reference.		 *  		 * @return 		 * 		 */				public function get stageRef():Stage{ return _stageRef;}		public function get uid():String		{			return _uid;		}		public function set uid(value:String):void		{			_uid = value;		}		public function get sid():String		{			return _sid;		}		public function set sid(value:String):void		{			_sid = value;		}		public function get gid():String		{			return _gid;		}		public function set gid(value:String):void		{			_gid = value;		}		public function get name():String		{			return _name;		}		public function set name(value:String):void		{			_name = value;		}		public function get cdn():String		{			return _cdn;		}		public function set cdn(value:String):void		{			_cdn = value;		}		public function get isArcadeMode():Boolean		{			return _isArcadeMode;		}		public function set isArcadeMode(value:Boolean):void		{			_isArcadeMode = value;		}				public function get isRefreshScore():Boolean		{			return _isRefreshScore;		}				public function set isRefreshScore(value:Boolean):void		{			_isRefreshScore = value;		}		public function get shareURL():String		{			return _shareURL;		}		public function set shareURL(value:String):void		{			_shareURL = value;		}				public function get badgeURL():String		{			return _badgeURL;		}				public function set badgeURL(value:String):void		{			_badgeURL = value;		}		public function get stars():int		{			return _stars;		}		public function set stars(value:int):void		{			_stars = value;		}		public function get leaderboardResults():Object		{			return _leaderboardResults;		}		public function set leaderboardResults(value:Object):void		{			Out.info(this, "44444444444444!!!!!!!! SETTING LEADERBOARD RESULTS!!!!!!!!");			ORedUtils.objectToString(value);			_leaderboardResults = value;			dispatchEvent(new ZyrtecGameEvent(ZyrtecGameEvent.ON_LEADERBOARD_RESULT));		}		public function get displayScore():String	{	return _displayScore;	}		public function set displayScore(value:String):void	{	_displayScore = value;	}		public function get score():Number		{			return _score;		}		public function set score(value:Number):void		{			_score = value;		} 				public function get isLoggedIn():Boolean{			return uid != "-1" && uid != null && uid != "107.QKMWZC2QAROZKCYH";		}			}//end class }//end package