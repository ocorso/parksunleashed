package com.zyrtec.pianoTuning.model{	import com.bigspaceship.utils.Out;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.model.MiniGameModel;		import flash.display.*;	import flash.events.*;		import net.ored.util.ORedUtils;	// =================================================	// ================ @Class	// =================================================	public class PTModel extends MiniGameModel	{		private static var _instance			:PTModel=null;		// SINGLETON instance		public static const IS_TIME_BASED_SCORE	:Boolean = false; //on game over screen - display 00:00:00 if true, else display numerical value given		public static const TIME_BETWEEN_NOTES	:Number = 800;		public static const USER_RESPONSE_TIME	:Number = 4000;		public static const MAX_LIVES			:Number = 3;		public static const MESSAGE_END			:String = "messageEnd";				//game specific		private var _numLives					:uint=0; //number of lives		private var _matchTimeStampsArray		:Array; //CHEAT CHECK - stores the time of each match gotten		private var _level 						:uint = 0;		private var _longestStreak				:Number = 0;		private var _currentStreak				:Number = 0;				private var _isDebugMode				:Boolean = false;				// =================================================		// ================ @Constructor		// =================================================		public function PTModel( event:SingletonEnforcer ):void		{			_matchTimeStampsArray = new Array();		}		public static function getInstance():PTModel		{			if (_instance == null) {				_instance = new PTModel(new SingletonEnforcer());			}			return _instance;		}		// =================================================		// ================ @Callable		// =================================================		override public function setGameData($gameData:IGameData):void {			super.setGameData($gameData as PTGameData);			this.numLives = ($gameData as PTGameData).numLives;			$gameData.toString();		}				public function track($id, $val):void{			shell.track(_uid, _sid, $id, $val);					}				// =================================================		// ================ @Workers		// =================================================				// =================================================		// ================ @Handlers		// =================================================				// =================================================		// ================ @Getters / Setters		// =================================================		override public function get dataToSend():Object{ 						var dataObj:Object 	= new Object();						dataObj.UserID 		= uid;			dataObj.GameID 		= gid;			dataObj.SessionID 	= sid;			dataObj.Stars 		= stars;						var data:Object 	= new Object();//data to encrypt			//data.userTime		= _score;			data.score			= score;			data.longestStreak	= longestStreak;			data.timeStampArray = _matchTimeStampsArray;						dataObj.Data 		= data;//encryptor.encrypt(customDataObj);						Out.info(this, "here is the data to send: ");			ORedUtils.objectToString(dataObj);			Out.info(this, "here is custom data to send: ");			ORedUtils.objectToString(data);			return dataObj;					}//end function		public function get matchTimeStampsArray():Array	{	return _matchTimeStampsArray;	}		public function set matchTimeStampsArray(value:Array):void	{	_matchTimeStampsArray = value;	}				public function get isDebugMode():Boolean	{	return _isDebugMode;	}				public function get numLives():uint	{			return _numLives;		}		public function set numLives(value:uint):void {			Out.status(this, "numLives: " + value);			_numLives = value;		}				public function get level():uint	{			return _level;		}		public function set level(value:uint):void {			_level = value;		}		public function get longestStreak():Number		{			return _longestStreak;		}		public function set longestStreak(value:Number):void		{			_longestStreak = value;		}		public function get currentStreak():Number		{			return _currentStreak;		}		public function set currentStreak(value:Number):void		{			if (value > longestStreak) longestStreak = value;			_currentStreak = value;		}		override public function get displayScore():String { return score.toString();}	}}// =================================================// ================ @Singleton // =================================================	class SingletonEnforcer {	}