package com.zyrtec.pianoTuning.view.screens.instructions{	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.theginbin.ui.RollOverButton;	import com.zyrtec.pianoTuning.events.PianoTuningEvent;		import flash.display.*;	import flash.events.*;	import flash.text.*;	import flash.ui.Keyboard;
	// =================================================	// ================ @Class	// =================================================	public class Question extends MovieClip {		private var _id:uint;		private var _answer:String;				// the correct answer as a String passed from ScreenInstructions		private var _userAnswer:String;			// the users submitted answer		private var _inputFieldArray:Array;		// array of all the input textfields		private var _inputFieldTotal:uint;	// total number of inputfields		private var _currentInputField:uint //the current input field in focus		private var _result:uint;				// 0 is didnt answer (technically not wrong), 1 is correct, 2 is wrong		// =================================================		// ================ @Constructor		// =================================================		public function Question():void {			_inputFieldArray=new Array();		}				// =================================================		// ================ @Callable		// =================================================		public function addEvents():void {			_userAnswer="";			_inputFieldArray=[];			_result=0;						if (_answer!=null) {				_inputFieldTotal = _answer.length;								for (var i:Number=0; i<_inputFieldTotal; i++) {					_inputFieldArray[i]=this['input_tf_'+i];					_inputFieldArray[i].tabIndex=i+1;					_inputFieldArray[i].restrict = "A-Za-z0-9";					_inputFieldArray[i].addEventListener(MouseEvent.CLICK, onMouseClick);					_inputFieldArray[i].addEventListener(FocusEvent.FOCUS_OUT, onFocusOut);					_inputFieldArray[i].addEventListener(FocusEvent.FOCUS_IN, onFocusIn);					_inputFieldArray[i].text="";				}			}						_currentInputField = 0;			_inputFieldArray[_currentInputField].stage.focus = _inputFieldArray[_currentInputField];						this.stage.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			this.stage.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			this.stage.addEventListener(MouseEvent.MOUSE_DOWN, onMouseDwn);		}				public function removeEvents():void {			for (var i:Number=0; i<_inputFieldTotal; i++) {				_inputFieldArray[i].tabIndex=NaN;				_inputFieldArray[i].removeEventListener(MouseEvent.CLICK, onMouseClick);				_inputFieldArray[i].removeEventListener(FocusEvent.FOCUS_OUT, onFocusOut);				_inputFieldArray[i].removeEventListener(FocusEvent.FOCUS_IN, onFocusIn);				//_inputFieldArray[i].text="";			}			this.stage.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			this.stage.removeEventListener(MouseEvent.MOUSE_DOWN, onMouseDwn);		}				public function checkAnswer():uint {			trace("checking answer");			_userAnswer="";			for (var i:uint=0; i<_inputFieldTotal; i++) {						_userAnswer += String(_inputFieldArray[i].text);			}						var a:Array=new Array();			a=_userAnswer.split("");						var hasError:Boolean=false;						for (var j:uint=0; j<_inputFieldTotal; j++) {					if (a[j] == "" || a[j] == " " || a[j] == "_") {					_result = 0;					hasError=true;					break;					}			}						if (_inputFieldTotal==0) {				_result = 0;				hasError = true;			}						if (!hasError) {				if (_userAnswer.toLowerCase() ==_answer.toLowerCase()){					_result=1;				} else {					_result=2;				}			}					return _result;		}				//FUCNTION : SHOW CORRECT ANSWER IN TEXTFIELDS		public function showCorrectAnswer():void {			for (var i:uint=0; i<_inputFieldTotal; i++) {				_inputFieldArray[i].text=_answer.charAt(i);				//trace("*********** ==== "+_answer.charAt(i));			}		}				//FUNCTION : CLEAR FIELDS		public function clearFields():void {			for (var i:Number=0; i<_inputFieldTotal; i++) {				_inputFieldArray[i].text="";			}		}		// =================================================		// ================ @Workers		// =================================================				private function checkInputField():void		{			for (var i:uint=0; i<_inputFieldTotal; i++) {				if (_inputFieldArray[i].text==" " || _inputFieldArray[i].text=="" || _inputFieldArray[i].text=="_") {					_inputFieldArray[i].text="";				}			}		}		// =================================================		// ================ @Handlers		// =================================================				private function keyUpHandler(event:KeyboardEvent):void {			if (event.keyCode != Keyboard.ENTER) {				_currentInputField++;				if (_currentInputField < _inputFieldTotal && _inputFieldArray[_currentInputField]!=undefined) {					_inputFieldArray[_currentInputField].stage.focus = _inputFieldArray[_currentInputField];				}			}		}		private function keyDownHandler(event:KeyboardEvent):void{  			if (event.keyCode == Keyboard.ENTER) {				//this.stage.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				_result = checkAnswer();				this.dispatchEvent(new PianoTuningEvent(PianoTuningEvent.QUESTION_ANSWERED));			} else { //make sure the current input field is on the currently selected textfield in case user skips around				for (var i:uint=0; i<_inputFieldTotal; i++) {					if (_currentInputField < _inputFieldTotal) {						if (_inputFieldArray[i]==_inputFieldArray[_currentInputField].stage.focus) {							_currentInputField = i;							break;						}					}				}			}		}		private function onMouseClick(event:MouseEvent):void{			if ((event.target as TextField).text=="_"){				(event.target as TextField).text="";			}		}		private function onMouseDwn(event:MouseEvent):void{			if (event.target is TextField){				checkInputField();			}		}		private function onFocusOut(event:FocusEvent):void{		    checkInputField();		}		private function onFocusIn(event:FocusEvent):void{			event.currentTarget.setSelection(event.currentTarget.text.length, event.currentTarget.text.length);		}				// =================================================		// ================ @Getters / Setters		// =================================================				public function get id():uint					{	return _id;	}		public function set id(val:uint):void			{	_id = val;	}				public function set answer(val:String):void		{	_answer = val;	}				public function get result():int				{	return _result;	}	}}