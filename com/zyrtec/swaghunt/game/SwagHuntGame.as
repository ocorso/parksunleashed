package com.zyrtec.swaghunt.game{		import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.analytics.Tracking;	import com.zyrtec.swaghunt.controller.SwagHuntMain;	import com.zyrtec.swaghunt.events.SwagHuntEvent;	import com.zyrtec.swaghunt.model.SHModel;	import com.zyrtec.swaghunt.model.SoundData;	import com.zyrtec.swaghunt.view.objects.Grid;	import com.zyrtec.swaghunt.view.objects.GridObject;		import flash.display.*;	import flash.events.*;	import flash.sampler.StackFrame;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;
		// =================================================	// ================ @Class	// =================================================		public class SwagHuntGame extends Game	{		//display objs				private var _stageRef:Stage;		private var _correctOnePopup:MovieClip; //feedback clip		private var _wrongOnePopup:MovieClip;		private var _timeUpPopup:MovieClip;		//bools		private var _isGameOver:Boolean = false;			//whether the game is over		private var _passedLevel:Boolean = false;			//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;				//whether timer has started running		private var _paused:Boolean = false;		//values for game			private var _gameWidth:int;		private var _gameHeight:int;		private var _holderX:int = 186;			private var _holderY:int = 411;		private var _gameLevel:int;		private var _levelToSend:int;		private var _score:String="";						// score aka Time		private var _numMatches:int;						//number of matches		private var _numLevels:int;							//matches left		private var _levelScore:int;						//store level score		private var _scoreEquation:int;		//private var _levelScoresArray:Array;				//store all level scores		private var _count:int = 0;		private var _overCount:int = 0;		private var _matchingID:int;		private var _currentObj:MovieClip;		private var _missedIdArray:Array;		//game specific vars		private var _clockTimer:BasicFrameTimer;			//scoreboard timer		private var _numLevelMatches:int;		private var _grid:Grid;		private var _dogArray:Array;		private var	_model:SHModel;							// Game Model (Singleton)		private var myDelay:Timer;		private var _gameOverMC:MovieClip;		private var _className:String;		private var _classRef:Class;		private var _box:MovieClip;		private var _objectsPresent:Boolean;				// =================================================		// ================ @Constructor		// =================================================		public function SwagHuntGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);						_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = SHModel.getInstance();			_stageRef = _model.stageRef;//			trace("MODEL STAGEREF " + _stageRef);			//bring in box				_className = "Box";				_classRef = getDefinitionByName(_className) as Class;				_box = new _classRef();				_box.alpha = 0;				addChild(_box);				_box.x = 750;				_box.y = 500;				_box.alpha = 0;				_box.scaleX = _box.scaleY = 0;					}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 						trace("new gameskie");			Tracking.track(Tracking.L3_GAME_SWAG_START); //tracking			_model.score= 0;			_model.displayScore = "0";			_scoreEquation = 0;			_levelScore = 0;			_gameLevel = 0;			_levelToSend = 0;			_isGameOver = false;			_isStarted = false;			_numMatches = 0;			//_numLevels = 18; 			_count = 0;			_objectsPresent = false;													TweenMax.to(_box, 1, {scaleX:1, scaleY:1, alpha:1, ease:Elastic.easeOut});												if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(30, 0, 60000, false);			} else {				_clockTimer.reset();			}			if (_grid==null) {				_grid= new Grid(3, 6, 18);				_grid.x= 186;				_grid.y = 75;				addChild(_grid);			}			_grid.visible = true;					//updateScoreBoard();				updateScoreBoardPairs();//update the scoreboard			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, SwagHuntMain.TIME, "01:00:00" ) );			 			_className = "GameOverMC";			_classRef = getDefinitionByName(_className) as Class;			_gameOverMC = new _classRef;			if (_gameOverMC==null) {			// add if null				_gameOverMC= new GameOverMC();			}						this.addChild(_gameOverMC);			_gameOverMC.visible = false;			_gameOverMC.x = 500;			_gameOverMC.y = 225;			newGameLevel();		} 				//FUNCTION: make new game level		public function newGameLevel():void{						_numLevelMatches = 0;//			trace("current game level is: " +_gameLevel);			_gameLevel++;			trace("new game Level is: " + _gameLevel);						if(_gameLevel < 19){				_levelToSend = _gameLevel;			}else if(_gameLevel > 18){				_levelToSend = _gameLevel-18;			}else if(_gameLevel > 36){				_levelToSend = _gameLevel - 36;			}			_grid.getMatchObjects(_gameLevel, _levelToSend);			_grid.getLevelObjects(_gameLevel);						if (_gameLevel >1){						_grid.addEventListener(SwagHuntEvent.OBJECT_CLICK, onObjectClick);			}		}				//FUNCTION:delayed call to animate in		public function callAnimation(event:TimerEvent):void{		}		 		 //FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER		override public function runGame():void		{ // on game tick function       			// call custom functions here			if(_count < 2){				_clockTimer.updateByMilliseconds();				checkforEndGame();				updateScoreBoard();			}		}				//FUNCTION : RESUME GAME		override public function resumeGame():void		{			addEvents();			_clockTimer.stopPauseTime();			_paused = false;		}				//FUNCTION : DESTROY LISTENERS		override public function destroy():void		{				trace("destroying...");			//_grid.resetAfterClick(_isGameOver);			if(!_grid.objectsRemoved){				_grid.clearObjects(_objectsPresent);			}						TweenMax.to(_box, 1, {scaleX:0, scaleY:0, alpha:0, ease:Elastic.easeOut});			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, SwagHuntMain.TIME, "00:00:00" ) );						//_clockTimer.removeEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp);			_clockTimer.stop();			removeEvents();			//_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			//animate objects in here			TweenMax.delayedCall(1.5, onAnimatedIn, null); //delay the 3,2,1 go animation		}				//FUNCTION : ADD EVENTS		public function addEvents():void		{			trace("game.addEvents");						if (!_isStarted) {				_isStarted = true;				//_clockTimer.addEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp, false, 0, true);				_clockTimer.start();			}			//took out the Pause cause cheaters suck			//_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);		}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			_grid.removeEvents();					_grid.removeEventListener(SwagHuntEvent.OBJECT_CLICK, onObjectClick);		}				//FUNCTION : RESET GAME		public function reset():void		{			if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(30, 0, 60000, false);				//_clockTimer = new BasicFrameTimer(31, 36000000000, 0, true); //if need time limit in milliseconds, set here			} else {				_clockTimer.reset();				updateScoreBoard();				updateScoreBoardPairs();			}		}			// =================================================		// ================ @Workers		// =================================================		//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 				//&& (_overCount ==1)     						if ((_isGameOver)){					trace("game is over!");				destroy();				if(_count == 1){					Tracking.track(Tracking.L3_GAME_SWAG_END); //tracking					TweenMax.delayedCall(1.5, Tracking.track, [Tracking.L3_GAME_SWAG_CONGRATS]);	//tracking the time is up screen 				}				_gameOverMC.visible = true;				_gameOverMC.gotoAndPlay(2);				TweenMax.delayedCall(1.5, dispatchEvent, [new Event(GAME_OVER)]); //				TweenMax.delayedCall(1.5, Tracking.track, [Tracking.L3_GAME_SWAG_CONGRATS]);	//tracking the time is up screen 			}else {							}		}				//FUNCTION : CHECK FOR END GAME		private function checkforEndLevel():void		{			if(!_isGameOver){				if(_numLevelMatches == _grid.numMatchObjs){					//level is over					removeEvents();					_grid.clearLevelObjects();					//trace("game not over, but cleared objects");					TweenMax.delayedCall(1, newGameLevel, null);					_objectsPresent = true;				}			}		}			//FUNCTION : UPDATE THE SCOREBOARD TIME CLOCK		private function updateScoreBoard():void		{				var timeConverter:TimeConverter = new TimeConverter();			//trace(" real time: " + _clockTimer.milliseconds);			var timeInSeconds:Number;			var timeString:String;										timeInSeconds = _clockTimer.milliseconds;		//.seconds*1000;				//trace("_clockTimer.milliseconds: " + _clockTimer.milliseconds);				timeString = timeConverter.convertTime(timeInSeconds, "milliseconds");				dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, SwagHuntMain.TIME, String(timeString) ) );				_model.score = _scoreEquation;				_model.displayScore = String(_model.score);				if((timeInSeconds < 800) && (timeInSeconds > 0)){					trace("game is overrr");					_isGameOver = true;					_count++;					_overCount++;					dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, SwagHuntMain.TIME, "00:00:00" ) );				}								if (_isGameOver){					//_grid.clearObjects(_overCount);					_model.score = _scoreEquation;					_model.displayScore = String(_model.score);									}		}				//FUNCTION : UPDATE SCOREBOARD PAIRS		private function updateScoreBoardPairs():void		{			dispatchEvent(new ScoreBoardUpdateEvent(ScoreBoardUpdateEvent.UPDATE_TEXT, SwagHuntMain.PAIRS_REMAINING, _model.displayScore));   		}				//FUNCTION: CHECK MATCH		private function checkMatch(clickedId:uint):Boolean		{			var isMatch:Boolean = false;			if (clickedId >= 50) {				isMatch = true;			} 				trace("Is it a match?  " + isMatch + "!!!");				return isMatch;		}				//FUNCTION: CIRCLE CLICK		private function onObjectClick(e:SwagHuntEvent):void		{			trace("_gameLevel in onObjectClick: " + _gameLevel);//			trace("clicked ID (e.data): " + (e.data));				var objClickedID:uint = (e.data);				if(checkMatch(e.data)) { //IT'S A MATCH					trace("CORRECT!!!");										_grid.objectRxn(objClickedID,true);					if (_correctOnePopup==null) {						_correctOnePopup = new CorrectOneMC();												_correctOnePopup.mouseEnabled = false;						_correctOnePopup.mouseChildren = false;						_correctOnePopup.scaleX = _correctOnePopup.scaleY = 0.7;						addChild(_correctOnePopup);					}					_correctOnePopup.x = _grid.x + _grid.popupx;					_correctOnePopup.y = _grid.y + _grid.popupy;					_correctOnePopup.visible = true;										_numMatches++;						_numLevelMatches++;					//level scoring:					if(_gameLevel < 6){						_correctOnePopup.gotoAndPlay("first");								_scoreEquation = _model.score + 25;					}else if((_gameLevel > 5) && (_gameLevel < 10)){						_correctOnePopup.gotoAndPlay("second");							_scoreEquation = _model.score + 50;					}else if(_gameLevel > 9){						_correctOnePopup.gotoAndPlay("third");							_scoreEquation = _model.score + 100;					}					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WOOSH,false,0, 0, 1));					TweenMax.delayedCall(1, dispatchEvent, [new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DROP,false,0, 0, 1)]);//					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DROP,false,0, 0, 1));	//drop sound//					trace("model.displayScore: " + _model.displayScore);//					trace("*** CORRECT AND NUM MATCHES == "+_numMatches + " AND NUM LEVEL MATCHES == "+_numLevelMatches);									}else{					//NOT A MATCH					/*if (_wrongOnePopup==null) {						_wrongOnePopup = new WrongOneMC();						_wrongOnePopup.x = 480;						_wrongOnePopup.y = 100;						_wrongOnePopup.mouseEnabled = false;						_wrongOnePopup.mouseChildren = false;						_wrongOnePopup.scaleX = _wrongOnePopup.scaleY = 0.7;						addChild(_wrongOnePopup);					}*/					//_wrongOnePopup.visible = true;					//_wrongOnePopup.gotoAndPlay(2);					_grid.objectRxn(objClickedID,false);					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_BUZZ,false,0, 0, 1));				}												updateScoreBoard();				checkforEndGame();				checkforEndLevel();				updateScoreBoardPairs();								}				// =================================================		// ================ @Handlers		// ================================================				//FUNCTION : ON TILES ANIMATED IN		private function onAnimatedIn(e:AnimationEvent = null):void		{			TweenMax.delayedCall(1, dispatchEvent, [new Event(Game.NEW_LEVEL)] );	// this starts the level in, can add delay			TweenMax.delayedCall(4.3, _grid.addEvents, null);			_grid.addEventListener(SwagHuntEvent.OBJECT_CLICK, onObjectClick);					}				//FUNCTION : ON KEY DOWN - CHECK FOR P PAUSE		private function keyDownHandler(event:KeyboardEvent):void{  			if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); //prevent tile roll and click				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			} 		}				// =================================================		// ================ @Getters / Setters		// =================================================				//public function get gameLevel():int { return _gameLevel};		public function set gameLevel(value:int):void { _gameLevel = value};		}}