package com.zyrtec.swaghunt.model{	import com.bigspaceship.utils.Out;	import com.zyrtec.adapters.ShellAdapter;	import com.zyrtec.interfaces.IGameData;	import com.zyrtec.model.MiniGameModel;	import com.zyrtec.utils.EncryptUtils;		import net.ored.util.ORedUtils;		import flash.display.*;	import flash.events.*;		// =================================================	// ================ @Class	// =================================================	public class SHModel extends MiniGameModel	{		//public static const SHOW_FRIEND_BONUS:Boolean = false; //whether or not the game will offer an invite a friend bonus //mandatory for high scores screen		public static const numLevels:int = 18;		//public static const levelTime:int = 15;						private static var _instance:SHModel=null;		// SINGLETON instance				//game specific		private var _showQuiz:Boolean; //whether to go to quiz mode or straight to game play		private var _numBonuses:uint=0; //number of bonus tile pairs to reveal before game starts		private var _numQuizBonuses:uint=0; //number of bonuses from quiz		private var _hasDogBonus:Boolean; //has dog bonus		private var _hasFriendBonus:Boolean; //has bonus from friend invite		private var _matchTimeStampsArray:Array; //CHEAT CHECK - stores the time of each match gotten		//private var _score:uint=0;	//	player's score (aka matches + remaining lives)				private var _isDebugMode:Boolean = true;//	t:show numbers on tile and skip to end, f: dont				// =================================================		// ================ @Constructor		// =================================================				public function SHModel( event:SingletonEnforcer ):void		{					}				public static function getInstance():SHModel		{			if (_instance == null) {				_instance = new SHModel(new SingletonEnforcer());			}			return _instance;		}				// =================================================		// ================ @Callable		// =================================================		/*override public function setGameData($gameData:IGameData):void {		super.setGameData($gameData as TOWGameData);				}*/				public function track($id, $val):void{			shell.track(_uid, _sid, $id, $val);					}				// =================================================		// ================ @Workers		// =================================================										// =================================================		// ================ @Handlers		// =================================================				// =================================================		// ================ @Getters / Setters		// =================================================		override public function get dataToSend():Object{ 							var dataObj:Object = new Object();						dataObj.UserID = uid;			dataObj.GameID = gid;			dataObj.SessionID = sid;			dataObj.Stars = stars;						var customDataObj:Object = new Object();//data to encrypt			if (isRefreshScore) {	// or if levels werent completed				customDataObj.score = -1;			} else {				customDataObj.score = _score;			}			isRefreshScore=false; //reset this right away						dataObj.Data = customDataObj;									Out.warning(this, "game ID: " + gid);			Out.info(this, "here is the object data to send : ");			ORedUtils.objectToString(dataObj);			Out.info(this, "here is the custom data objct : ");			ORedUtils.objectToString(customDataObj);						return dataObj;											}//end function				override public function get scoreToSend():Object{						var scoreToSend:Object 	= new Object();			scoreToSend.displayValue = this.displayScore+" min";						return scoreToSend;					}				//public function get score():uint	{	return _score;	}		//public function set score(value:uint):void	{	_score = value;	}				public function get hasFriendBonus():Boolean	{	return _hasFriendBonus;	}		public function set hasFriendBonus(value:Boolean):void	{	_hasFriendBonus=value;	}				public function get isDebugMode():Boolean	{	return _isDebugMode;	}			}}// =================================================// ================ @Singleton // =================================================class SingletonEnforcer {	}