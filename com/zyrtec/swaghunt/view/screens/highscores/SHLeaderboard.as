package com.zyrtec.swaghunt.view.screens.highscores{	import com.greensock.*;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.ui.RollOverButton;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.dogmatch.model.DMModel;	import com.zyrtec.events.ZyrtecGameEvent;	import com.zyrtec.model.MiniGameModel;	import com.zyrtec.view.Leaderboard;	import com.zyrtec.analytics.Tracking;		import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.MouseEvent;	import flash.events.TimerEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.utils.Timer;	import flash.external.ExternalInterface;		public class SHLeaderboard extends Leaderboard	{		public function SHLeaderboard(leaderboardClipMC:MovieClip, gameModel:MiniGameModel)		{			super(leaderboardClipMC, gameModel);		}				//FUNCTION : SET THE LEADERBOARD STATIC TEXT		override public function setStaticText():void {			if (model.isLoggedIn) {  //gray these out				leaderboardClip.signupAreaMC.alpha = 0.4;			}						leaderboardClip.txtLoading.alpha = 1;			//DMModel(model).levelsCompleted;						leaderboardClip.txtTimeComplete.txt.autoSize = "right";			leaderboardClip.txtTimeComplete.txt.text = model.displayScore;			trace("model.score: " + model.score);						//display stars earned 			leaderboardClip.txtMinutes.txt.autoSize = "left";			leaderboardClip.txtStars.txt.autoSize = "left";									leaderboardClip.congratulationsMC.visible = true; 								if (model.score >1099) { //3 stars					leaderboardClip.txtMinutes.txt.text = "scoring " + (model.score) +" points.";					leaderboardClip.txtStars.txt.text = "3 stars";					leaderboardClip.star1.gotoAndStop(2);					leaderboardClip.star2.gotoAndStop(2);					leaderboardClip.star3.gotoAndStop(2);					model.stars = 3;				} else if (model.score < 1100 && model.score > 799){ //2 stars					leaderboardClip.txtMinutes.txt.text = "scoring " + (model.score) +" points.";					leaderboardClip.txtStars.txt.text = "2 stars";					leaderboardClip.star1.gotoAndStop(2);					leaderboardClip.star2.gotoAndStop(2);					model.stars = 2;				} else if (model.score < 800 && model.score > 99){ //1 star					leaderboardClip.txtMinutes.txt.text = "scoring " + (model.score) +" points.";					leaderboardClip.txtStars.txt.text = "1 star";					leaderboardClip.star1.gotoAndStop(2);					model.stars = 1;				}else if (model.score < 100){ //0 star					leaderboardClip.txtMinutes.txt.text = "scoring 0 points.";					leaderboardClip.txtStars.txt.text = "0 stars";					model.stars = 0;				}			}				override public function onPlayAgainClick(e:MouseEvent):void{ //restart the game, go to next system state			RollOverButton(leaderboardClip.btnPlayAgain).removeEvents();			leaderboardClip.btnPlayAgain.removeEventListener(MouseEvent.CLICK, onPlayAgainClick);			dispatchEvent(new ZyrtecGameEvent(ZyrtecGameEvent.PLAY_AGAIN));			Tracking.track(Tracking.L3_GAME_SWAG_PLAYAGAIN); //tracking		}				//FUNCTION : SET THE LEADERBOARD DYNAMIC TEXT -- OVERRIDING BECAUSE SCORES ARRAY SHOULD BE ASCENDING AND BACKEND RETURNS DESCENDING//		override public function setLeaderboardText():void {//			//trace("results obj = "+model.leaderboardResults);//			trace("SETTING LEADERBOARD TEXT");//			TweenMax.to(leaderboardClip.txtLoading, 0.4, {alpha:0});//			//			var i:int;//			if (playerHolder.numChildren>0) { //clear out the leaderboard data before this animates in//				var clip:MovieClip;//				for (i = 0; i < playerHolder.numChildren; i++) {//					clip = MovieClip(playerHolder.getChildAt(i));//					clip.visible = false;//					clip = null;//				}//			//			}//			var resultsObj:Object = model.leaderboardResults;//			//			if (!model.isLoggedIn || !resultsObj.hasOwnProperty("TopScore") || resultsObj.TopScore==null || resultsObj.TopScore==undefined) {//				leaderboardClip.txtYourRank.txtTime.text = model.displayScore; //				//			} else {//				leaderboardClip.txtYourRank.txtTime.text = getPlayerScoreDisplay(resultsObj.TopScore); //			}//			//			/*if (resultsObj.hasOwnProperty("Rank") && resultsObj.Rank!=null && resultsObj.Rank!=undefined) {//			leaderboardClip.txtYourRank.txtRank.text = resultsObj.Rank;//			} else {//			leaderboardClip.txtYourRank.txtRank.text = "";//			}*///			//			if (resultsObj.hasOwnProperty("SessionName") && resultsObj.SessionName!=null && resultsObj.SessionName!=undefined) {//				leaderboardClip.txtSession.txt.text = resultsObj.SessionName;//			}//			//			//start the session countdown clock//			if (resultsObj.hasOwnProperty("TimeLeft") && resultsObj.TimeLeft!=null && resultsObj.TimeLeft!=undefined) {//				sessionTime = resultsObj.TimeLeft;//				if (sessionTime>1000) { //only use the timer if the time left is greater than 1 second//					if(sessionTimer==null) {//						sessionTimer = new Timer(1000);//					}//					sessionTimer.addEventListener(TimerEvent.TIMER, onSessionTimer);//					sessionTimer.start();//				}//			}//			//			//populate the leaderboard//			var leaderboardPlayer:MovieClip;//			var spacing:uint = 10;//			var rank:String;//			var scoresLength:int;//			if (resultsObj.hasOwnProperty("Scores") && resultsObj.Scores!=null && resultsObj.Scores!=undefined) {//				scoresLength = resultsObj.Scores.length;//				//				for (i=0; i<resultsObj.Scores.length; i++) { //just grab first 5 players//					leaderboardPlayer = new LeaderboardPlayerMC();//					trace("SCORES ARRAY -- looping through array and i == "+i+" and order == "+resultsObj.Scores[(scoresLength-1)-i].order+" and name == "+resultsObj.Scores[(scoresLength-1)-i].name+" and score == "+getPlayerScoreDisplay(resultsObj.Scores[(scoresLength-1)-i].score));//					leaderboardPlayer.txtRank.text = (i+1).toString();//resultsObj.Scores[i].order; //assuming "order" will correspond to the order of the array//					leaderboardPlayer.txtName.text = resultsObj.Scores[(scoresLength-1)-i].name;//					leaderboardPlayer.txtScore.text = getPlayerScoreDisplay(resultsObj.Scores[(scoresLength-1)-i].score);//					//					leaderboardPlayer.y = (leaderboardPlayer.height+spacing)*i;//					//					playerHolder.addChild(leaderboardPlayer);//				}//			}//			//			//fade in//			TweenMax.to(playerHolder, 0.4, {alpha:1, delay:0.4});//			TweenMax.to(leaderboardClip.txtYourRank, 0.4, {alpha:1, delay:0.4});//			TweenMax.delayedCall(0.4, addReloadEvents);//		}				//FUNCTION : ON FACEBOOK SHARE CLICK		override public function onFacebookShareClick(e:MouseEvent):void //share page on facebook		{			var title:String ="I unlocked the Swagger Bagger Badge!!";			var copy:String;			copy = "I earned "+ model.stars +" stars for scoring "+ model.score +" points in Swag Hunt at ZYRTEC%26reg; Parks Unleashed%26trade;. Top that!";							//var copy:String = "I earned "+model.stars+" stars for finishing in "+model.displayScore+" minutes and unlocked the Match Dogs badge at ZYRTEC%26reg; Parks Unleashed%26trade;. Ch-ch-check it out.";			var url:String = "http://www.facebook.com/sharer.php?s=100&p[title]="+title+"&p[url]="+model.shareURL+"&p[images][0]="+model.badgeURL+"&p[summary]="+copy;			if (ExternalInterface.available){				ExternalInterface.call("openPopup", url, "ShareFacebook", Leaderboard.POP_UP_WIDTH, Leaderboard.POP_UP_HEIGHT);			}else{ navigateToURL(new URLRequest(url), "_blank");							Tracking.track(Tracking.L3_SHARE_SWAGGERBAGGER);  //tracking		}		}	}}