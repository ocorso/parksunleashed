package com.zyrtec.tugofwar.game{	import com.bigspaceship.events.AnimationEvent;	import com.g2.gaming.framework.Game;	import com.g2.gaming.framework.GameFramework;	import com.g2.gaming.framework.events.ScoreBoardUpdateEvent;	import com.g2.gaming.framework.events.SoundEvent;	import com.greensock.TweenMax;	import com.greensock.easing.*;	import com.greensock.plugins.*;	import com.theginbin.ui.RollOverButton;	import com.theginbin.utils.BasicFrameTimer;	import com.theginbin.utils.TimeConverter;	import com.zyrtec.tugofwar.controller.TugOfWarMain;	import com.zyrtec.tugofwar.events.TugOfWarEvent;	import com.zyrtec.tugofwar.model.SoundData;	import com.zyrtec.tugofwar.model.TOWModel;	import com.zyrtec.tugofwar.video.VideoController;	import com.zyrtec.tugofwar.view.patterns.PatternObject;		import flash.display.*;	import flash.events.*;	import flash.ui.Keyboard;	import flash.utils.Timer;	import flash.utils.getDefinitionByName;	// =================================================	// ================ @Class	// =================================================		public class TugOfWarGame extends Game	{		//display objs		private var _stageRef:Stage;		private var _feedbackClip:MovieClip; //feedback messages clip		private var _popupEndLevel:MovieClip; //pop up end of level to start timer		private var _hourglass:MovieClip; 		private var _videoController:VideoController; // controller for the dog and boy		private var _patternObjectHolder:MovieClip; //clip that holds the 4 pattern object buttons		private var _gameOverMC:MovieClip;				//bools		private var _isGameOver:Boolean = false;//whether the game is over		private var _passedLevel:Boolean = false;//whether they passed or failed the level, value read from Main		private var _isStarted:Boolean = false;	//whether timer has started running				//req values for game			private var _gameWidth:int;		private var _gameHeight:int;							//game specific vars		private var _clockTimer:BasicFrameTimer;//scoreboard timer		private var _patternArray:Array; //store the pattern for the level		private var _totalBeats:uint; //the number of beats per pattern (patternArray.length)		private var _currentBeat:uint; //the current beat playing in the pattern		private var _totalClicks:uint; //stores the number of user clicks 		private var _currentClick:uint; //the current user click -- needs to match the array index id		private var _totalCorrect:uint; //number of correct hits per beat sequence 		private var _beatToShow:uint; //to order teh showing beats so they don't overlap tween		private var _enableSpacebar:Boolean; //enable check for spacebar down		private var _isEndLevel:Boolean; //whether the level is over		private var _timerPullDog:Timer; //countdown timer to pulling dog		private var _secondCountdownNum:Number; //countdown number to pulling dog		private var _isInPlay:Boolean; //whether to allow keyboard events for arrow keys		private var _patternKeyClicked:Boolean; //whether the pattern key has been clicked when the keys are in play - prevent overlap		private var _isCorrectHit:Boolean = false; //if the keyboard hit is correct, keep playing		private var _isFrozen:Boolean = false; //freezing the clock - outside of pause		private var	_model:TOWModel;// Game Model (Singleton)		// =================================================		// ================ @Constructor		// =================================================		public function TugOfWarGame(gameWidth:int, gameHeight:int)		{			super();			TweenPlugin.activate([VisiblePlugin, TransformAroundPointPlugin, TransformAroundCenterPlugin, ShortRotationPlugin, GlowFilterPlugin]);			_gameWidth = gameWidth;			_gameHeight = gameHeight;			_model = TOWModel.getInstance();			_stageRef = _model.stageRef;		}				// ===============================================================================		// ================ @ REQUIRED GAME FUNCTIONS		// ===============================================================================				//FUNCTION : NEW GAME - CALLED ONCE		override public function newGame():void		{ 			_model.score=0;        	_model.gameLevel = 0;        	_isGameOver = false;			_isStarted = false;			_currentBeat = 0;			_totalClicks = 0;			_totalBeats = 0;			_currentClick = 0;			_totalCorrect = 0;			_beatToShow = 0;			_secondCountdownNum = 0;			_isEndLevel = false;			_enableSpacebar = false;			_isInPlay = false;			_patternKeyClicked = false;			_model.wonGame = false;						if (_clockTimer==null) {				//_clockTimer = new BasicFrameTimer(31, 3600000000, 0, true);				_clockTimer = new BasicFrameTimer(31, 0, 3540000, true); //59 minutes			} else {				_clockTimer.reset();			}						if (_videoController==null) {				_videoController = new VideoController();				addChild(_videoController);			}			_videoController.addEvents(); //loads the videos or restart the looping						_videoController.alpha = 0;						if(_patternObjectHolder==null) {				_patternObjectHolder = new PatternObjectHolder();				addChild(_patternObjectHolder);			}			var patternObj:PatternObject;			for (var i:uint = 0; i<_patternObjectHolder.numChildren; i++) { //give each button an id that represents the number in a pattern				patternObj = PatternObject(_patternObjectHolder.getChildByName("object"+i.toString()));				patternObj.id = i;				patternObj.scaleX = patternObj.scaleY = 0;			}						_patternObjectHolder.alpha = 1;			_patternObjectHolder.scaleX = _patternObjectHolder.scaleY = 1;			_patternObjectHolder.x = 345;			_patternObjectHolder.y = 80;						if (_patternArray==null) {				_patternArray = new Array();			} 						if (_hourglass==null) {				_hourglass = new HourglassMC();				addChild(_hourglass);			} 						_hourglass.txtCountdown.alpha = 0;			_hourglass.scaleX = _hourglass.scaleY = 1;			_hourglass.x = 720;			_hourglass.y = 102;			_hourglass.scaleX = _hourglass.scaleY = 0;			_hourglass.gotoAndStop(1);			_hourglass.alpha = 1;			_hourglass.rotation = 180;			//_hourglass.sand.alpha = 0;						if (_gameOverMC==null) {				_gameOverMC = new GameOverTextMC();				_gameOverMC.x = 492;				_gameOverMC.y = 200;				addChild(_gameOverMC);			}			_gameOverMC.scaleX = _gameOverMC.scaleY = 0;			_gameOverMC.visible = false;						//update the scoreboard			updateScoreBoard();			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, TOWModel.TIME, "00:00:00" ) );		      	} 		//FUNCTION : NEW LEVEL - CALLED AFTER NEW GAME AND BEFORE LEVEL IN ANIMATION      	override public function newLevel():void		{ 			trace("new level");			//reset everything			_currentBeat = 0;			_totalClicks = 0;			_totalBeats = 0;			_currentClick = 0;			_totalCorrect = 0;			_beatToShow = 0;			_secondCountdownNum = 0;			_isEndLevel = false;			_enableSpacebar = false;			_isInPlay = false;			_patternKeyClicked = false;			_isCorrectHit = false;			_hourglass.sand.alpha = 1;			_hourglass.sand.gotoAndStop(1);			_patternArray.splice(0); //clear the array						_model.gameLevel++;			setPattern(); //set up the next pattern						dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, TOWModel.LEVEL, String(_model.gameLevel)));			      	} 		//FUNCTION : RUN GAME - CALLED ON EVERY FRAME OF TIMER      	override public function runGame():void		{ // on game tick function                	// call custom functions here			checkforEndGame();			if (!_isFrozen) {				_clockTimer.updateByMilliseconds();			}			updateScoreBoard();      	}		//FUNCTION : RESUME GAME     	override public function resumeGame():void		{			_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			_clockTimer.stopPauseTime();     	}     			//FUNCTION : DESTROY LISTENERS     	override public function destroy():void		{			removeEvents();			_videoController.destroyVideos();			     	}		// ===============================================================================		// ================ @ CUSTOM GAME FUNCTIONS		// ===============================================================================				// =================================================		// ================ @Callable		// =================================================				//FUNCTION : ANIMATE IN 		public function animateIn():void		{			_hourglass.txtCountdown.alpha = 0;			TweenMax.to(_videoController, 0.3, {alpha:1});			TweenMax.to(_hourglass, 0.3, {scaleX:0.6, scaleY:0.6, ease:Back.easeOut});			var patternObj:PatternObject;			var completeFunction:Function=null;			for (var i:uint = 0; i<4; i++) { //give each button an id that represents the number in a pattern				patternObj = PatternObject(_patternObjectHolder.getChildByName("object"+i.toString()));				if (i==3) {					completeFunction = onAnimatedIn;				}				TweenMax.to(patternObj, 0.4, {scaleX:1, scaleY:1, delay:0.4+(i*0.15), ease:Back.easeOut, onComplete:completeFunction});			}		}				//FUNCTION : ADD EVENTS		public function addEvents():void		{				trace("game.addEvents");			//debug(_model.isDebugMode);			if (!_isStarted) {				_isStarted = true;				_clockTimer.addEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp, false, 0, true);				_clockTimer.start();			} else {				_isFrozen = false;				_clockTimer.stopPauseTime();			}						_model.stageRef.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);						playPattern(); //start the sequence playing		}				//FUNCTION : REMOVE EVENTS		public function removeEvents():void		{			if (_clockTimer!=null) {				_clockTimer.removeEventListener(BasicFrameTimer.TIME_IS_UP, onClockTimerUp);				_clockTimer.stop();			}			_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);			_model.stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);						if (_timerPullDog!=null) {				_timerPullDog.removeEventListener(TimerEvent.TIMER, onCountdownTimer);				_timerPullDog.stop();			}						for (var i:uint = 0; i<4; i++) {				PatternObject(_patternObjectHolder.getChildAt(i)).removeEventListener(TugOfWarEvent.PATTERN_OBJECT_CLICKED, onPatternObjectClicked);				PatternObject(_patternObjectHolder.getChildAt(i)).removeEventListener(TugOfWarEvent.BLINK_COMPLETE, onBlinkComplete);				PatternObject(_patternObjectHolder.getChildAt(i)).removeEvents();			}						_videoController.removeEvents();		}				//FUNCTION : RESET GAME		public function reset():void		{			if (_clockTimer==null) {				_clockTimer = new BasicFrameTimer(31, 36000000000, 0, true); //if need time limit in milliseconds, set here			} else {				_clockTimer.reset();				updateScoreBoard();			}		}				// =================================================		// ================ @Workers		// =================================================		//FUNCTION : SET A PATTERN		private function setPattern():void{			if (_model.gameLevel <= 7) { //max out at 10 total beats				_totalBeats = _model.gameLevel+3;			} else {				_totalBeats = 10;			}			//_totalBeats = 4;//debug			for (var i:uint=0; i<_totalBeats; i++) {				_patternArray[i] = Math.floor(Math.random()*4);			}			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, TOWModel.PATTERN, "0/"+_totalBeats.toString() ) );			trace("THE NEW PATTERN IS = "+_patternArray);			//_patternArray = [0,0,1,0]; //test		}				//FUNCTION : PLAY PATTERN		private function playPattern():void {			trace("PLAY PATTERN");			_model.stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);			if (_videoController.bandanaXPos > 70) { //dog wins				_model.wonGame = false;				_isGameOver = true;			} else { //proceed as normal					_currentClick = 0; //reset the clicks				_beatToShow = 0; //reset beats showing in pattern				_isInPlay = false;				if (_isCorrectHit) {					_totalCorrect++;				}				_isCorrectHit = false;				var patternObj:PatternObject;				if (_currentBeat<_totalBeats) { //start the first beat					patternObj = PatternObject(_patternObjectHolder.getChildAt(_patternArray[_beatToShow]));					patternObj.addEventListener(TugOfWarEvent.BLINK_COMPLETE, onBlinkComplete);					patternObj.blink();					playPatternNote(patternObj.id);					_currentBeat++;					dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, TOWModel.PATTERN, _currentBeat.toString()+"/"+_totalBeats.toString() ) );				} else { //sequence is complete					trace("level is over!!");					_isFrozen = true;					_clockTimer.startPauseTime(); ////STOP THE CLOCK!!!!!										//TO DO : WORK OUT HOW THE TOTAL CORRECT CORRESPONDS TO THE AMOUNT OF TIME YOU HAVE TO HIT SPACEBAR					if (_popupEndLevel==null) {						_popupEndLevel = new PopUpEndLevelMC();						_popupEndLevel.x = 492;						_popupEndLevel.y = 200;						_popupEndLevel.scaleX = _popupEndLevel.scaleY = 0;						addChild(_popupEndLevel);					}					//_popupEndLevel.gotoAndStop("LEVEL_COMPLETE");					_popupEndLevel.gotoAndStop("SPACEBAR");										//calculate count time based on percent correct					var percentCorrect:Number = _totalCorrect/_totalBeats;					if (percentCorrect==1) {						_secondCountdownNum = 5; //max number of seconds to hit keyboard					} else if (percentCorrect>=0.7 && percentCorrect <1){						_secondCountdownNum = 4;					} else if (percentCorrect>=0.5 && percentCorrect <0.7){						_secondCountdownNum = 3;					}else if (percentCorrect>=0.3 && percentCorrect <0.5){						_secondCountdownNum = 2;					} else if (percentCorrect>0  && percentCorrect <0.3){						_secondCountdownNum = 1;					} else {						_secondCountdownNum = 1; //special case - display "no time earned", just go to next level					}										//trace("&&&&&%%%% percemt correct and seconds = "+percentCorrect, _secondCountdownNum);					_hourglass.txtCountdown.txt.autoSize = "right";					_hourglass.txtCountdown.txt.text = "0"+_secondCountdownNum.toString();										_popupEndLevel.visible = true;					_hourglass.sand.gotoAndStop("FULL");					//TweenMax.to(_popupEndLevel, 0.4, {scaleX:1, scaleY:1, ease:Back.easeOut});					TweenMax.to(_hourglass, 0.2, {scaleX:0.6, scaleY:0.6, glowFilter:{color:0xFF8300, alpha:0, blurX:0, blurY:0, strength:0}});					//TweenMax.to(_hourglass.sand, 0.4, {alpha:0, overwrite:false, onComplete:_hourglass.gotoAndStop, onCompleteParams:["START"]});					_hourglass.gotoAndStop("START");					_hourglass.sand.alpha = 0;					TweenMax.delayedCall(0.5, swapHourglass);					//TweenMax.to(_popupEndLevel, 0.4, {scaleX:0, scaleY:0, delay:1, ease:Back.easeIn, overwrite:false, onComplete:swapHourglass});				}			}		}				//FUNCTION : SWAP HOURGLASS AND PATTERN KEYS		private function swapHourglass():void {			if (_hourglass.scaleX<1) { //put hourglass in the middle of the screen				dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_FLUTTER,false,0, 0, 1));				TweenMax.to(_patternObjectHolder, 0.5, {x:640, y:48, scaleX:0.5, scaleY:0.5, ease:Back.easeInOut});				TweenMax.to(_hourglass, 0.5, {x:480, y:180, scaleX:1, scaleY:1, ease:Back.easeInOut, overwrite:false});				TweenMax.to(_hourglass, 1, {rotation:0, delay:0.2, ease:Back.easeInOut, overwrite:false});				TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:1, delay:3});				_popupEndLevel.gotoAndStop("SPACEBAR");				//_popupEndLevel.scaleX = _popupEndLevel.scaleY = 1;				TweenMax.to(_popupEndLevel, 0.4, {scaleX:1, scaleY:1, delay:1.2, ease:Back.easeOut});				TweenMax.to(_popupEndLevel, 0.4, {scaleX:0, scaleY:0, delay:3.7, ease:Back.easeIn, visible:false, overwrite:false, onComplete:enableSpacebar});				//_popupEndLevel.alpha = 0;				//TweenMax.to(_popupEndLevel, 0.4, {alpha:1, delay:1, overwrite:false});				//TweenMax.to(_popupEndLevel, 0.4, {alpha:0, delay:3.5, overwrite:false, onComplete:function getReady():void {					//_popupEndLevel.scaleX = _popupEndLevel.scaleY = 0;					//_popupEndLevel.gotoAndStop("GET_READY");					//_popupEndLevel.alpha = 1;					//TweenMax.to(_popupEndLevel, 0.4, {scaleX:1, scaleY:1, delay:0.1, ease:Back.easeOut,overwrite:false});					//TweenMax.to(_popupEndLevel, 0.4, {scaleX:0, scaleY:0, delay:1, ease:Back.easeIn, visible:false, overwrite:false, onComplete:enableSpacebar});				//}});				} else { //switch back -- on complete - dispatch new level				TweenMax.to(_hourglass.txtCountdown, 0.3, {alpha:0});				TweenMax.to(_patternObjectHolder, 0.5, {x:345, y:80, scaleX:1, scaleY:1, ease:Back.easeInOut});				TweenMax.to(_hourglass, 0.5, {x:720, y:102, scaleX:0.6, scaleY:0.6, ease:Back.easeInOut, onComplete:_hourglass.gotoAndPlay, onCompleteParams:["RESET"]});				TweenMax.to(_hourglass, 1, {rotation:180, delay:0.9, ease:Back.easeInOut});				TweenMax.delayedCall(0.8, dispatchEvent, [new Event(Game.NEW_LEVEL)]);			}		}				//FUNCTION : ENABLE SPACEBAR TO PULL DOG AT END OF ROUND		private function enableSpacebar():void {			_enableSpacebar = true;			_isEndLevel = true;			TweenMax.to(_popupEndLevel, 0.3, {scaleX:0, scaleY:0, ease:Back.easeIn, visible:false});			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DOGGROWL,false,0, 0, 1));			if (_timerPullDog ==null) {				_timerPullDog = new Timer(1000);			}			_timerPullDog.addEventListener(TimerEvent.TIMER, onCountdownTimer);			_timerPullDog.start();			dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_TIMER,false,0, 0, 1));			TweenMax.to(_hourglass, _secondCountdownNum, {frame:27, ease:Sine.easeIn}); //tween to the end in the seconds allotted		}				//FUNCTION : SELECT PATTERN OBJECT AFTER IT'S BEEN CLICKED OR KEYBOARD PRESS		private function selectPatternObject(obj:PatternObject):void {			trace("OBJECT CLICKED ID = "+obj.id);			if (obj.id==_patternArray[_currentClick]) { 				trace("CORRECT HIT!");				obj.blink(0);				_isCorrectHit = true;				playPatternNote(obj.id); //PLAY NOTE ONLY IF CORRECT				//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_CORRECT,false,0, 0, 1));				TweenMax.to(_hourglass, 0.1, {scaleX:0.6, scaleY:0.6, glowFilter:{color:0xFF8300, alpha:0, blurX:0, blurY:0, strength:0}, overwrite:true, onComplete:blinkHourglass});				//var alphaSand:String = "+"+((100/_totalBeats)/100).toString();				//trace("alpha sand = "+alphaSand);				//TweenMax.to(_hourglass.sand, 0.2, {alpha:alphaSand});				if (_hourglass.sand.currentFrame<6) {					_hourglass.sand.gotoAndStop(_hourglass.sand.currentFrame+1);				}				//dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DOGGROWL,false,0, 0, 1));			} else {				trace("WRONG HIT!");				_isCorrectHit = false;				_isInPlay = false; //prevent keyboard clicks				obj.errorBlink();				_videoController.playAction("dog");				_currentClick = _currentBeat-1; //advances to the next sequence				dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_DOGBARK,false,0, 0, 1));				dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_WRONG,false,0, 0, 1));			}						if (_currentClick==_currentBeat-1) { //nothing more to click in the sequence, remove events, proceed to show the pattern 				_model.stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);				_isInPlay = false; //prevent keyboard clicks				for (var i:uint = 0; i<4; i++) {					PatternObject(_patternObjectHolder.getChildAt(i)).removeEventListener(TugOfWarEvent.PATTERN_OBJECT_CLICKED, onPatternObjectClicked);					PatternObject(_patternObjectHolder.getChildAt(i)).removeEvents();				}				TweenMax.delayedCall(1.6, playPattern);//ensure the bandana pos is updated first //was 1.1			} else {				_currentClick++;			}		}				//FUNCTION : BLINK HOURGLASS		private function blinkHourglass():void {			TweenMax.to(_hourglass, 0.2, {scaleX:0.8, scaleY:0.8, glowFilter:{color:0xB1FA26, alpha:0.8, blurX:15, blurY:15, strength:2}, yoyo:true, repeat:1, overwrite:true});		}				//FUNCTION : CHECK FOR END GAME		private function checkforEndGame():void		{ 			if (_isGameOver) {					removeEvents();								if (!_model.wonGame) {					_model.displayScore = "00:00:00";					_gameOverMC.gotoAndStop("LOST");					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_LOSE,false));				} else {					_gameOverMC.gotoAndStop("WON");					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_HOORAY,false));				}								this.dispatchEvent(new Event(GAME_OVER));								_model.score = _clockTimer.milliseconds;				updateScoreBoard();								_gameOverMC.visible = true;				TweenMax.to(_gameOverMC, 0.4, {scaleX:1, scaleY:1, delay:0.5, ease:Back.easeOut});				TweenMax.to(_gameOverMC, 0.4, {scaleX:0, scaleY:0, delay:2.5, ease:Back.easeIn, visible:false, overwrite:false});								TweenMax.to(_videoController, 0.3, {alpha:0, delay:2, onComplete:_videoController.reset}); //reset the values on fade out done				TweenMax.to(_patternObjectHolder, 0.3, {alpha:0}); 				TweenMax.to(_hourglass, 0.3, {alpha:0}); 			} else {				if (_videoController.bandanaXPos>50) {					dispatchEvent(new TugOfWarEvent(TugOfWarEvent.DANGER_ZONE));				}			}		}				//FUNCTION : UPDATE THE SCOREBOARD TIME CLOCK		private function updateScoreBoard():void		{			var timeConverter:TimeConverter = new TimeConverter();			var timeInSeconds:Number = _clockTimer.milliseconds;//.seconds*1000;			var timeString:String = timeConverter.convertTime(timeInSeconds, "milliseconds");			dispatchEvent( new ScoreBoardUpdateEvent( ScoreBoardUpdateEvent.UPDATE_TEXT, TOWModel.TIME, String(timeString) ) );			_model.displayScore = timeString;		}				//FUNCTION : PLAY PATTERN NOTE SOUND		private function playPatternNote(noteNum:int):void {			switch (noteNum) {				case 0:					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_NOTE1,false,0, 0, 1));					break;				case 1:					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_NOTE2,false,0, 0, 1));					break;				case 2:					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_NOTE3,false,0, 0, 1));					break;				case 3:					dispatchEvent(new SoundEvent(SoundEvent.PLAY_SOUND, SoundData.SOUND_NOTE4,false,0, 0, 1));					break;			}		}		// =================================================		// ================ @Handlers		// ================================================		//FUNCTION : ON ANIMATED IN		private function onAnimatedIn(e:AnimationEvent=null):void		{			TweenMax.delayedCall(0.4, this.dispatchEvent, [new Event(Game.NEW_LEVEL)]);		}				//FUNCTION : ON BLINK COMPLETE -- play the next beat OR enable user click to play		private function onBlinkComplete(e:TugOfWarEvent):void {			e.target.removeEventListener(TugOfWarEvent.BLINK_COMPLETE, onBlinkComplete);			if (_beatToShow==_currentBeat-1) { //last beat in the sequence, add Events				trace("PATTERN IS COMPLETE -- ENABLE LISTENERS TO PLAY");				_beatToShow = 0;				_currentClick = 0;				for (var i:uint = 0; i<4; i++) {					PatternObject(_patternObjectHolder.getChildAt(i)).addEventListener(TugOfWarEvent.PATTERN_OBJECT_CLICKED, onPatternObjectClicked);					PatternObject(_patternObjectHolder.getChildAt(i)).addEvents();				}				_isInPlay = true; //enable the keyboard events too			} else { //play next beat				_beatToShow++;				var patternObj:PatternObject = PatternObject(_patternObjectHolder.getChildAt(_patternArray[_beatToShow]));				patternObj.addEventListener(TugOfWarEvent.BLINK_COMPLETE, onBlinkComplete);				var delayNum:Number;				if (_model.gameLevel<=3) {					delayNum = 0.2;					patternObj.speed = 0.3;				} else if (_model.gameLevel >3 && _model.gameLevel <=6) {					delayNum = 0.1; 					patternObj.speed = 0.2;				} else {					delayNum = 0;					patternObj.speed = 0.1;				}				patternObj.blink(delayNum); 				TweenMax.delayedCall(delayNum, playPatternNote, [patternObj.id]);			}		}				//FUNCTION : ON PATTERN OBJECT CLICKED		private function onPatternObjectClicked(e:TugOfWarEvent):void {			selectPatternObject(PatternObject(e.target));		}				//FUNCTION : ON COUNTDOWN TIMER 		private function onCountdownTimer(e:TimerEvent):void {			_secondCountdownNum--;			_hourglass.txtCountdown.txt.autoSize = "right";			_hourglass.txtCountdown.txt.text = "0"+_secondCountdownNum.toString();			trace("counting down -- "+_secondCountdownNum);			if (_secondCountdownNum == 0) {				_isInPlay = false;				_enableSpacebar = false;				_isEndLevel = false;				_timerPullDog.removeEventListener(TimerEvent.TIMER, onCountdownTimer);				_timerPullDog.stop();				dispatchEvent(new SoundEvent(SoundEvent.STOP_SOUND, SoundData.SOUND_TIMER,false,0, 0, 1));								_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);							if (_videoController.bandanaXPos<-80) { //the bandana is over the line					_model.wonGame = true;					_isGameOver = true;				} else {					swapHourglass();				}			}		}				//FUNCTION : ON CLOCK TIMER UP		private function onClockTimerUp(e:Event):void		{			_isGameOver = true;		}				//FUNCTION : ON KEY DOWN HANDLER		private function keyDownHandler(event:KeyboardEvent):void{  			/*if (event.keyCode == Keyboard.P) {				_clockTimer.startPauseTime();				removeEvents(); 				//add a black screen so they can't touch anything				_model.stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);				this.dispatchEvent(new Event(PAUSE));			}*/						if (_enableSpacebar) {				if (event.keyCode == Keyboard.SPACE) {					_enableSpacebar = false;					_model.stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					_videoController.playAction("boy");				}			}						if (_isInPlay) {				if (event.keyCode==Keyboard.NUMBER_1 || event.keyCode==Keyboard.NUMPAD_1) {					_isInPlay = false;					_patternKeyClicked = true;					if (_patternArray[_currentClick] == 0) {						_isCorrectHit = true;					}					_model.stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					selectPatternObject(PatternObject(_patternObjectHolder.getChildAt(0)));				} else if (event.keyCode==Keyboard.NUMBER_2 || event.keyCode==Keyboard.NUMPAD_2) {					_isInPlay = false;					_patternKeyClicked = true;					if (_patternArray[_currentClick] == 1) {						_isCorrectHit = true;					}					_model.stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					selectPatternObject(PatternObject(_patternObjectHolder.getChildAt(1)));				} else if (event.keyCode==Keyboard.NUMBER_3 || event.keyCode==Keyboard.NUMPAD_3) {					_isInPlay = false;					_patternKeyClicked = true;					if (_patternArray[_currentClick] == 2) {						_isCorrectHit = true;					}					_model.stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					selectPatternObject(PatternObject(_patternObjectHolder.getChildAt(2)));				}else if (event.keyCode==Keyboard.NUMBER_4 || event.keyCode==Keyboard.NUMPAD_4) {					_isInPlay = false;					_patternKeyClicked = true;					if (_patternArray[_currentClick] == 3) {						_isCorrectHit = true;					}					_model.stageRef.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					selectPatternObject(PatternObject(_patternObjectHolder.getChildAt(3)));				} else {					_isCorrectHit = false;					_patternKeyClicked = false;				}			}		}				//FUNCTION : ON KEY UP HANDLER		private function keyUpHandler(event:KeyboardEvent):void{  			if (!_enableSpacebar && _isEndLevel) { //ensures that you can't play the action until the key is up again				if (event.keyCode == Keyboard.SPACE) {					_model.stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);					_enableSpacebar = true;				}			}						if (!_isInPlay && _patternKeyClicked) { //ensures you can't click down again until the pattern key is up				_model.stageRef.removeEventListener(KeyboardEvent.KEY_UP, keyUpHandler);				//trace("KEY UP ", _currentClick, _currentBeat);				if (event.keyCode == Keyboard.NUMBER_1 || event.keyCode == Keyboard.NUMBER_2 || event.keyCode == Keyboard.NUMBER_3 || event.keyCode == Keyboard.NUMBER_4 || event.keyCode == Keyboard.NUMPAD_1 || event.keyCode == Keyboard.NUMPAD_2 || event.keyCode == Keyboard.NUMPAD_3 || event.keyCode == Keyboard.NUMPAD_4) {					_patternKeyClicked = false;					if (_isCorrectHit) { //allow play to continue						_isInPlay = true;					}				}				}		}				// =================================================		// ================ @Getters / Setters		// =================================================			}}